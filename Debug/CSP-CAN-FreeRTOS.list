
CSP-CAN-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001488  0800df2c  0800df2c  0001df2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3b4  0800f3b4  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3b4  0800f3b4  0001f3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3bc  0800f3bc  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3bc  0800f3bc  0001f3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3c0  0800f3c0  0001f3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800f3c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000108  0800f4cc  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200001a8  0800f56c  000201a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000533c  20000248  0800f60c  00020248  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005584  0800f60c  00025584  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002fe4a  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000075c0  00000000  00000000  000500c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f18  00000000  00000000  00057688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001e28  00000000  00000000  000595a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d956  00000000  00000000  0005b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bab2  00000000  00000000  00078d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000083  00000000  00000000  000847d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000098a4  00000000  00000000  00084854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003581  00000000  00000000  0008e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800df14 	.word	0x0800df14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	0800df14 	.word	0x0800df14

08000210 <csp_buffer_free_resources>:
 8000210:	b510      	push	{r4, lr}
 8000212:	4c06      	ldr	r4, [pc, #24]	; (800022c <csp_buffer_free_resources+0x1c>)
 8000214:	6820      	ldr	r0, [r4, #0]
 8000216:	b118      	cbz	r0, 8000220 <csp_buffer_free_resources+0x10>
 8000218:	f001 fd43 	bl	8001ca2 <csp_queue_remove>
 800021c:	2300      	movs	r3, #0
 800021e:	6023      	str	r3, [r4, #0]
 8000220:	6860      	ldr	r0, [r4, #4]
 8000222:	f001 fd39 	bl	8001c98 <csp_free>
 8000226:	2300      	movs	r3, #0
 8000228:	6063      	str	r3, [r4, #4]
 800022a:	bd10      	pop	{r4, pc}
 800022c:	20000264 	.word	0x20000264

08000230 <csp_buffer_init>:
 8000230:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000234:	4d16      	ldr	r5, [pc, #88]	; (8000290 <csp_buffer_init+0x60>)
 8000236:	4f17      	ldr	r7, [pc, #92]	; (8000294 <csp_buffer_init+0x64>)
 8000238:	8b2c      	ldrh	r4, [r5, #24]
 800023a:	8ae8      	ldrh	r0, [r5, #22]
 800023c:	341b      	adds	r4, #27
 800023e:	f024 0403 	bic.w	r4, r4, #3
 8000242:	4360      	muls	r0, r4
 8000244:	f001 fd16 	bl	8001c74 <csp_malloc>
 8000248:	6078      	str	r0, [r7, #4]
 800024a:	b138      	cbz	r0, 800025c <csp_buffer_init+0x2c>
 800024c:	2104      	movs	r1, #4
 800024e:	8ae8      	ldrh	r0, [r5, #22]
 8000250:	f001 fd24 	bl	8001c9c <csp_queue_create>
 8000254:	6038      	str	r0, [r7, #0]
 8000256:	b9b8      	cbnz	r0, 8000288 <csp_buffer_init+0x58>
 8000258:	f7ff ffda 	bl	8000210 <csp_buffer_free_resources>
 800025c:	f04f 30ff 	mov.w	r0, #4294967295
 8000260:	e00f      	b.n	8000282 <csp_buffer_init+0x52>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f108 0801 	add.w	r8, r8, #1
 8000268:	2200      	movs	r2, #0
 800026a:	a901      	add	r1, sp, #4
 800026c:	4433      	add	r3, r6
 800026e:	4426      	add	r6, r4
 8000270:	6838      	ldr	r0, [r7, #0]
 8000272:	605b      	str	r3, [r3, #4]
 8000274:	9301      	str	r3, [sp, #4]
 8000276:	f001 fd16 	bl	8001ca6 <csp_queue_enqueue>
 800027a:	8aeb      	ldrh	r3, [r5, #22]
 800027c:	4543      	cmp	r3, r8
 800027e:	d8f0      	bhi.n	8000262 <csp_buffer_init+0x32>
 8000280:	2000      	movs	r0, #0
 8000282:	b002      	add	sp, #8
 8000284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000288:	2600      	movs	r6, #0
 800028a:	46b0      	mov	r8, r6
 800028c:	e7f5      	b.n	800027a <csp_buffer_init+0x4a>
 800028e:	bf00      	nop
 8000290:	20000288 	.word	0x20000288
 8000294:	20000264 	.word	0x20000264

08000298 <csp_buffer_get_isr>:
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <csp_buffer_get_isr+0x38>)
 800029a:	8b1b      	ldrh	r3, [r3, #24]
 800029c:	4283      	cmp	r3, r0
 800029e:	b507      	push	{r0, r1, r2, lr}
 80002a0:	d203      	bcs.n	80002aa <csp_buffer_get_isr+0x12>
 80002a2:	2000      	movs	r0, #0
 80002a4:	b003      	add	sp, #12
 80002a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002aa:	2300      	movs	r3, #0
 80002ac:	aa01      	add	r2, sp, #4
 80002ae:	4669      	mov	r1, sp
 80002b0:	e9cd 3300 	strd	r3, r3, [sp]
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <csp_buffer_get_isr+0x3c>)
 80002b6:	6818      	ldr	r0, [r3, #0]
 80002b8:	f001 fcfd 	bl	8001cb6 <csp_queue_dequeue_isr>
 80002bc:	9800      	ldr	r0, [sp, #0]
 80002be:	2800      	cmp	r0, #0
 80002c0:	d0ef      	beq.n	80002a2 <csp_buffer_get_isr+0xa>
 80002c2:	6843      	ldr	r3, [r0, #4]
 80002c4:	4298      	cmp	r0, r3
 80002c6:	d1ec      	bne.n	80002a2 <csp_buffer_get_isr+0xa>
 80002c8:	2301      	movs	r3, #1
 80002ca:	f840 3b08 	str.w	r3, [r0], #8
 80002ce:	e7e9      	b.n	80002a4 <csp_buffer_get_isr+0xc>
 80002d0:	20000288 	.word	0x20000288
 80002d4:	20000264 	.word	0x20000264

080002d8 <csp_buffer_get>:
 80002d8:	4b1c      	ldr	r3, [pc, #112]	; (800034c <csp_buffer_get+0x74>)
 80002da:	8b1b      	ldrh	r3, [r3, #24]
 80002dc:	4283      	cmp	r3, r0
 80002de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80002e0:	4d1b      	ldr	r5, [pc, #108]	; (8000350 <csp_buffer_get+0x78>)
 80002e2:	d20b      	bcs.n	80002fc <csp_buffer_get+0x24>
 80002e4:	782a      	ldrb	r2, [r5, #0]
 80002e6:	b91a      	cbnz	r2, 80002f0 <csp_buffer_get+0x18>
 80002e8:	2400      	movs	r4, #0
 80002ea:	4620      	mov	r0, r4
 80002ec:	b002      	add	sp, #8
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	4602      	mov	r2, r0
 80002f2:	4918      	ldr	r1, [pc, #96]	; (8000354 <csp_buffer_get+0x7c>)
 80002f4:	2000      	movs	r0, #0
 80002f6:	f000 fb85 	bl	8000a04 <do_csp_debug>
 80002fa:	e7f5      	b.n	80002e8 <csp_buffer_get+0x10>
 80002fc:	2600      	movs	r6, #0
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <csp_buffer_get+0x80>)
 8000300:	a901      	add	r1, sp, #4
 8000302:	4632      	mov	r2, r6
 8000304:	6818      	ldr	r0, [r3, #0]
 8000306:	9601      	str	r6, [sp, #4]
 8000308:	f001 fcd3 	bl	8001cb2 <csp_queue_dequeue>
 800030c:	9c01      	ldr	r4, [sp, #4]
 800030e:	b93c      	cbnz	r4, 8000320 <csp_buffer_get+0x48>
 8000310:	782b      	ldrb	r3, [r5, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d0e8      	beq.n	80002e8 <csp_buffer_get+0x10>
 8000316:	4911      	ldr	r1, [pc, #68]	; (800035c <csp_buffer_get+0x84>)
 8000318:	4620      	mov	r0, r4
 800031a:	f000 fb73 	bl	8000a04 <do_csp_debug>
 800031e:	e7e4      	b.n	80002ea <csp_buffer_get+0x12>
 8000320:	6863      	ldr	r3, [r4, #4]
 8000322:	429c      	cmp	r4, r3
 8000324:	d005      	beq.n	8000332 <csp_buffer_get+0x5a>
 8000326:	782a      	ldrb	r2, [r5, #0]
 8000328:	2a00      	cmp	r2, #0
 800032a:	d0dd      	beq.n	80002e8 <csp_buffer_get+0x10>
 800032c:	4622      	mov	r2, r4
 800032e:	490c      	ldr	r1, [pc, #48]	; (8000360 <csp_buffer_get+0x88>)
 8000330:	e7e0      	b.n	80002f4 <csp_buffer_get+0x1c>
 8000332:	78eb      	ldrb	r3, [r5, #3]
 8000334:	b123      	cbz	r3, 8000340 <csp_buffer_get+0x68>
 8000336:	4622      	mov	r2, r4
 8000338:	490a      	ldr	r1, [pc, #40]	; (8000364 <csp_buffer_get+0x8c>)
 800033a:	2003      	movs	r0, #3
 800033c:	f000 fb62 	bl	8000a04 <do_csp_debug>
 8000340:	9c01      	ldr	r4, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	f844 3b08 	str.w	r3, [r4], #8
 8000348:	e7cf      	b.n	80002ea <csp_buffer_get+0x12>
 800034a:	bf00      	nop
 800034c:	20000288 	.word	0x20000288
 8000350:	20000000 	.word	0x20000000
 8000354:	0800e364 	.word	0x0800e364
 8000358:	20000264 	.word	0x20000264
 800035c:	0800e39d 	.word	0x0800e39d
 8000360:	0800e3b1 	.word	0x0800e3b1
 8000364:	0800e3d2 	.word	0x0800e3d2

08000368 <csp_buffer_free_isr>:
 8000368:	b507      	push	{r0, r1, r2, lr}
 800036a:	b1b0      	cbz	r0, 800039a <csp_buffer_free_isr+0x32>
 800036c:	f1a0 0308 	sub.w	r3, r0, #8
 8000370:	079a      	lsls	r2, r3, #30
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	d111      	bne.n	800039a <csp_buffer_free_isr+0x32>
 8000376:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800037a:	4293      	cmp	r3, r2
 800037c:	d10d      	bne.n	800039a <csp_buffer_free_isr+0x32>
 800037e:	f850 3c08 	ldr.w	r3, [r0, #-8]
 8000382:	b153      	cbz	r3, 800039a <csp_buffer_free_isr+0x32>
 8000384:	3b01      	subs	r3, #1
 8000386:	f840 3c08 	str.w	r3, [r0, #-8]
 800038a:	b933      	cbnz	r3, 800039a <csp_buffer_free_isr+0x32>
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	aa01      	add	r2, sp, #4
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <csp_buffer_free_isr+0x38>)
 8000392:	4669      	mov	r1, sp
 8000394:	6818      	ldr	r0, [r3, #0]
 8000396:	f001 fc89 	bl	8001cac <csp_queue_enqueue_isr>
 800039a:	b003      	add	sp, #12
 800039c:	f85d fb04 	ldr.w	pc, [sp], #4
 80003a0:	20000264 	.word	0x20000264

080003a4 <csp_buffer_free>:
 80003a4:	b513      	push	{r0, r1, r4, lr}
 80003a6:	4601      	mov	r1, r0
 80003a8:	b168      	cbz	r0, 80003c6 <csp_buffer_free+0x22>
 80003aa:	f1a0 0208 	sub.w	r2, r0, #8
 80003ae:	4c1c      	ldr	r4, [pc, #112]	; (8000420 <csp_buffer_free+0x7c>)
 80003b0:	f012 0003 	ands.w	r0, r2, #3
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	d008      	beq.n	80003ca <csp_buffer_free+0x26>
 80003b8:	7823      	ldrb	r3, [r4, #0]
 80003ba:	b123      	cbz	r3, 80003c6 <csp_buffer_free+0x22>
 80003bc:	460a      	mov	r2, r1
 80003be:	4919      	ldr	r1, [pc, #100]	; (8000424 <csp_buffer_free+0x80>)
 80003c0:	2000      	movs	r0, #0
 80003c2:	f000 fb1f 	bl	8000a04 <do_csp_debug>
 80003c6:	b002      	add	sp, #8
 80003c8:	bd10      	pop	{r4, pc}
 80003ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d005      	beq.n	80003de <csp_buffer_free+0x3a>
 80003d2:	7823      	ldrb	r3, [r4, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d0f6      	beq.n	80003c6 <csp_buffer_free+0x22>
 80003d8:	460a      	mov	r2, r1
 80003da:	4913      	ldr	r1, [pc, #76]	; (8000428 <csp_buffer_free+0x84>)
 80003dc:	e7f1      	b.n	80003c2 <csp_buffer_free+0x1e>
 80003de:	f851 3c08 	ldr.w	r3, [r1, #-8]
 80003e2:	b923      	cbnz	r3, 80003ee <csp_buffer_free+0x4a>
 80003e4:	7821      	ldrb	r1, [r4, #0]
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d0ed      	beq.n	80003c6 <csp_buffer_free+0x22>
 80003ea:	4910      	ldr	r1, [pc, #64]	; (800042c <csp_buffer_free+0x88>)
 80003ec:	e7e8      	b.n	80003c0 <csp_buffer_free+0x1c>
 80003ee:	3b01      	subs	r3, #1
 80003f0:	f841 3c08 	str.w	r3, [r1, #-8]
 80003f4:	b133      	cbz	r3, 8000404 <csp_buffer_free+0x60>
 80003f6:	7821      	ldrb	r1, [r4, #0]
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0e4      	beq.n	80003c6 <csp_buffer_free+0x22>
 80003fc:	490c      	ldr	r1, [pc, #48]	; (8000430 <csp_buffer_free+0x8c>)
 80003fe:	f000 fb01 	bl	8000a04 <do_csp_debug>
 8000402:	e7e0      	b.n	80003c6 <csp_buffer_free+0x22>
 8000404:	78e3      	ldrb	r3, [r4, #3]
 8000406:	b11b      	cbz	r3, 8000410 <csp_buffer_free+0x6c>
 8000408:	490a      	ldr	r1, [pc, #40]	; (8000434 <csp_buffer_free+0x90>)
 800040a:	2003      	movs	r0, #3
 800040c:	f000 fafa 	bl	8000a04 <do_csp_debug>
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <csp_buffer_free+0x94>)
 8000412:	2200      	movs	r2, #0
 8000414:	a901      	add	r1, sp, #4
 8000416:	6818      	ldr	r0, [r3, #0]
 8000418:	f001 fc45 	bl	8001ca6 <csp_queue_enqueue>
 800041c:	e7d3      	b.n	80003c6 <csp_buffer_free+0x22>
 800041e:	bf00      	nop
 8000420:	20000000 	.word	0x20000000
 8000424:	0800e3da 	.word	0x0800e3da
 8000428:	0800e400 	.word	0x0800e400
 800042c:	0800e424 	.word	0x0800e424
 8000430:	0800e441 	.word	0x0800e441
 8000434:	0800e464 	.word	0x0800e464
 8000438:	20000264 	.word	0x20000264

0800043c <csp_buffer_clone>:
 800043c:	b538      	push	{r3, r4, r5, lr}
 800043e:	4604      	mov	r4, r0
 8000440:	b160      	cbz	r0, 800045c <csp_buffer_clone+0x20>
 8000442:	8940      	ldrh	r0, [r0, #10]
 8000444:	f7ff ff48 	bl	80002d8 <csp_buffer_get>
 8000448:	4605      	mov	r5, r0
 800044a:	b128      	cbz	r0, 8000458 <csp_buffer_clone+0x1c>
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <csp_buffer_clone+0x24>)
 800044e:	4621      	mov	r1, r4
 8000450:	8b1a      	ldrh	r2, [r3, #24]
 8000452:	3210      	adds	r2, #16
 8000454:	f00b fd69 	bl	800bf2a <memcpy>
 8000458:	4628      	mov	r0, r5
 800045a:	bd38      	pop	{r3, r4, r5, pc}
 800045c:	4605      	mov	r5, r0
 800045e:	e7fb      	b.n	8000458 <csp_buffer_clone+0x1c>
 8000460:	20000288 	.word	0x20000288

08000464 <csp_buffer_remaining>:
 8000464:	4b01      	ldr	r3, [pc, #4]	; (800046c <csp_buffer_remaining+0x8>)
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	f001 bc27 	b.w	8001cba <csp_queue_size>
 800046c:	20000264 	.word	0x20000264

08000470 <csp_buffer_size>:
 8000470:	4b01      	ldr	r3, [pc, #4]	; (8000478 <csp_buffer_size+0x8>)
 8000472:	8b18      	ldrh	r0, [r3, #24]
 8000474:	3010      	adds	r0, #16
 8000476:	4770      	bx	lr
 8000478:	20000288 	.word	0x20000288

0800047c <csp_buffer_data_size>:
 800047c:	4b01      	ldr	r3, [pc, #4]	; (8000484 <csp_buffer_data_size+0x8>)
 800047e:	8b18      	ldrh	r0, [r3, #24]
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	20000288 	.word	0x20000288

08000488 <csp_conn_flush_rx_queue.isra.0>:
 8000488:	b513      	push	{r0, r1, r4, lr}
 800048a:	4604      	mov	r4, r0
 800048c:	2200      	movs	r2, #0
 800048e:	a901      	add	r1, sp, #4
 8000490:	68e0      	ldr	r0, [r4, #12]
 8000492:	f001 fc0e 	bl	8001cb2 <csp_queue_dequeue>
 8000496:	2801      	cmp	r0, #1
 8000498:	d001      	beq.n	800049e <csp_conn_flush_rx_queue.isra.0+0x16>
 800049a:	b002      	add	sp, #8
 800049c:	bd10      	pop	{r4, pc}
 800049e:	9801      	ldr	r0, [sp, #4]
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d0f3      	beq.n	800048c <csp_conn_flush_rx_queue.isra.0+0x4>
 80004a4:	f7ff ff7e 	bl	80003a4 <csp_buffer_free>
 80004a8:	e7f0      	b.n	800048c <csp_conn_flush_rx_queue.isra.0+0x4>

080004aa <csp_conn_check_timeouts>:
 80004aa:	4770      	bx	lr

080004ac <csp_conn_get_rxq>:
 80004ac:	2000      	movs	r0, #0
 80004ae:	4770      	bx	lr

080004b0 <csp_conn_enqueue_packet>:
 80004b0:	b513      	push	{r0, r1, r4, lr}
 80004b2:	4604      	mov	r4, r0
 80004b4:	9101      	str	r1, [sp, #4]
 80004b6:	b1b8      	cbz	r0, 80004e8 <csp_conn_enqueue_packet+0x38>
 80004b8:	2200      	movs	r2, #0
 80004ba:	a901      	add	r1, sp, #4
 80004bc:	68c0      	ldr	r0, [r0, #12]
 80004be:	f001 fbf2 	bl	8001ca6 <csp_queue_enqueue>
 80004c2:	2801      	cmp	r0, #1
 80004c4:	d014      	beq.n	80004f0 <csp_conn_enqueue_packet+0x40>
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <csp_conn_enqueue_packet+0x44>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	b153      	cbz	r3, 80004e2 <csp_conn_enqueue_packet+0x32>
 80004cc:	68e2      	ldr	r2, [r4, #12]
 80004ce:	4610      	mov	r0, r2
 80004d0:	9200      	str	r2, [sp, #0]
 80004d2:	f001 fbf2 	bl	8001cba <csp_queue_size>
 80004d6:	9a00      	ldr	r2, [sp, #0]
 80004d8:	4603      	mov	r3, r0
 80004da:	4907      	ldr	r1, [pc, #28]	; (80004f8 <csp_conn_enqueue_packet+0x48>)
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 fa91 	bl	8000a04 <do_csp_debug>
 80004e2:	f04f 30ff 	mov.w	r0, #4294967295
 80004e6:	e001      	b.n	80004ec <csp_conn_enqueue_packet+0x3c>
 80004e8:	f06f 0001 	mvn.w	r0, #1
 80004ec:	b002      	add	sp, #8
 80004ee:	bd10      	pop	{r4, pc}
 80004f0:	2000      	movs	r0, #0
 80004f2:	e7fb      	b.n	80004ec <csp_conn_enqueue_packet+0x3c>
 80004f4:	20000000 	.word	0x20000000
 80004f8:	0800e46d 	.word	0x0800e46d

080004fc <csp_conn_init>:
 80004fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000500:	4c2b      	ldr	r4, [pc, #172]	; (80005b0 <csp_conn_init+0xb4>)
 8000502:	211c      	movs	r1, #28
 8000504:	4d2b      	ldr	r5, [pc, #172]	; (80005b4 <csp_conn_init+0xb8>)
 8000506:	7c20      	ldrb	r0, [r4, #16]
 8000508:	f001 fbb6 	bl	8001c78 <csp_calloc>
 800050c:	6028      	str	r0, [r5, #0]
 800050e:	b958      	cbnz	r0, 8000528 <csp_conn_init+0x2c>
 8000510:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <csp_conn_init+0xbc>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b91b      	cbnz	r3, 800051e <csp_conn_init+0x22>
 8000516:	f04f 30ff 	mov.w	r0, #4294967295
 800051a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800051e:	7c22      	ldrb	r2, [r4, #16]
 8000520:	4926      	ldr	r1, [pc, #152]	; (80005bc <csp_conn_init+0xc0>)
 8000522:	f000 fa6f 	bl	8000a04 <do_csp_debug>
 8000526:	e7f6      	b.n	8000516 <csp_conn_init+0x1a>
 8000528:	1d28      	adds	r0, r5, #4
 800052a:	f001 fbd5 	bl	8001cd8 <csp_bin_sem_create>
 800052e:	2801      	cmp	r0, #1
 8000530:	d008      	beq.n	8000544 <csp_conn_init+0x48>
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <csp_conn_init+0xbc>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0ed      	beq.n	8000516 <csp_conn_init+0x1a>
 800053a:	4921      	ldr	r1, [pc, #132]	; (80005c0 <csp_conn_init+0xc4>)
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fa61 	bl	8000a04 <do_csp_debug>
 8000542:	e7e8      	b.n	8000516 <csp_conn_init+0x1a>
 8000544:	f001 fc78 	bl	8001e38 <csp_get_ms>
 8000548:	f00b fe28 	bl	800c19c <srand>
 800054c:	f00b fe54 	bl	800c1f8 <rand>
 8000550:	7ce3      	ldrb	r3, [r4, #19]
 8000552:	f1c3 023f 	rsb	r2, r3, #63	; 0x3f
 8000556:	3301      	adds	r3, #1
 8000558:	fb90 f1f2 	sdiv	r1, r0, r2
 800055c:	fb01 0012 	mls	r0, r1, r2, r0
 8000560:	4418      	add	r0, r3
 8000562:	7228      	strb	r0, [r5, #8]
 8000564:	f105 000c 	add.w	r0, r5, #12
 8000568:	f001 fbb6 	bl	8001cd8 <csp_bin_sem_create>
 800056c:	2801      	cmp	r0, #1
 800056e:	d01a      	beq.n	80005a6 <csp_conn_init+0xaa>
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <csp_conn_init+0xbc>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0ce      	beq.n	8000516 <csp_conn_init+0x1a>
 8000578:	4912      	ldr	r1, [pc, #72]	; (80005c4 <csp_conn_init+0xc8>)
 800057a:	e7df      	b.n	800053c <csp_conn_init+0x40>
 800057c:	682b      	ldr	r3, [r5, #0]
 800057e:	2104      	movs	r1, #4
 8000580:	7c60      	ldrb	r0, [r4, #17]
 8000582:	fb08 3706 	mla	r7, r8, r6, r3
 8000586:	f001 fb89 	bl	8001c9c <csp_queue_create>
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	b928      	cbnz	r0, 800059a <csp_conn_init+0x9e>
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <csp_conn_init+0xbc>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0bf      	beq.n	8000516 <csp_conn_init+0x1a>
 8000596:	490c      	ldr	r1, [pc, #48]	; (80005c8 <csp_conn_init+0xcc>)
 8000598:	e7d1      	b.n	800053e <csp_conn_init+0x42>
 800059a:	3601      	adds	r6, #1
 800059c:	7c23      	ldrb	r3, [r4, #16]
 800059e:	42b3      	cmp	r3, r6
 80005a0:	dcec      	bgt.n	800057c <csp_conn_init+0x80>
 80005a2:	2000      	movs	r0, #0
 80005a4:	e7b9      	b.n	800051a <csp_conn_init+0x1e>
 80005a6:	2600      	movs	r6, #0
 80005a8:	f04f 081c 	mov.w	r8, #28
 80005ac:	e7f6      	b.n	800059c <csp_conn_init+0xa0>
 80005ae:	bf00      	nop
 80005b0:	20000288 	.word	0x20000288
 80005b4:	2000026c 	.word	0x2000026c
 80005b8:	20000000 	.word	0x20000000
 80005bc:	0800e48c 	.word	0x0800e48c
 80005c0:	0800e4b1 	.word	0x0800e4b1
 80005c4:	0800e4d7 	.word	0x0800e4d7
 80005c8:	0800e4fe 	.word	0x0800e4fe

080005cc <csp_conn_free_resources>:
 80005cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ce:	4c0d      	ldr	r4, [pc, #52]	; (8000604 <csp_conn_free_resources+0x38>)
 80005d0:	6823      	ldr	r3, [r4, #0]
 80005d2:	b99b      	cbnz	r3, 80005fc <csp_conn_free_resources+0x30>
 80005d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005d6:	fb07 0005 	mla	r0, r7, r5, r0
 80005da:	68c0      	ldr	r0, [r0, #12]
 80005dc:	b108      	cbz	r0, 80005e2 <csp_conn_free_resources+0x16>
 80005de:	f001 fb60 	bl	8001ca2 <csp_queue_remove>
 80005e2:	3501      	adds	r5, #1
 80005e4:	7c33      	ldrb	r3, [r6, #16]
 80005e6:	6820      	ldr	r0, [r4, #0]
 80005e8:	42ab      	cmp	r3, r5
 80005ea:	d8f4      	bhi.n	80005d6 <csp_conn_free_resources+0xa>
 80005ec:	f001 fb54 	bl	8001c98 <csp_free>
 80005f0:	2300      	movs	r3, #0
 80005f2:	e9c4 3300 	strd	r3, r3, [r4]
 80005f6:	60e3      	str	r3, [r4, #12]
 80005f8:	7223      	strb	r3, [r4, #8]
 80005fa:	e7eb      	b.n	80005d4 <csp_conn_free_resources+0x8>
 80005fc:	2500      	movs	r5, #0
 80005fe:	4e02      	ldr	r6, [pc, #8]	; (8000608 <csp_conn_free_resources+0x3c>)
 8000600:	271c      	movs	r7, #28
 8000602:	e7ef      	b.n	80005e4 <csp_conn_free_resources+0x18>
 8000604:	2000026c 	.word	0x2000026c
 8000608:	20000288 	.word	0x20000288

0800060c <csp_conn_find>:
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <csp_conn_find+0x30>)
 800060e:	2200      	movs	r2, #0
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	7c1e      	ldrb	r6, [r3, #16]
 8000614:	ea00 0401 	and.w	r4, r0, r1
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <csp_conn_find+0x34>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4296      	cmp	r6, r2
 800061e:	dc01      	bgt.n	8000624 <csp_conn_find+0x18>
 8000620:	2000      	movs	r0, #0
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	881d      	ldrh	r5, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800062c:	d103      	bne.n	8000636 <csp_conn_find+0x2a>
 800062e:	685d      	ldr	r5, [r3, #4]
 8000630:	400d      	ands	r5, r1
 8000632:	42a5      	cmp	r5, r4
 8000634:	d0f5      	beq.n	8000622 <csp_conn_find+0x16>
 8000636:	3201      	adds	r2, #1
 8000638:	331c      	adds	r3, #28
 800063a:	e7ef      	b.n	800061c <csp_conn_find+0x10>
 800063c:	20000288 	.word	0x20000288
 8000640:	2000026c 	.word	0x2000026c

08000644 <csp_conn_allocate>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	4d24      	ldr	r5, [pc, #144]	; (80006d8 <csp_conn_allocate+0x94>)
 8000648:	4606      	mov	r6, r0
 800064a:	f04f 31ff 	mov.w	r1, #4294967295
 800064e:	1d28      	adds	r0, r5, #4
 8000650:	f001 fb5c 	bl	8001d0c <csp_bin_sem_wait>
 8000654:	2801      	cmp	r0, #1
 8000656:	d00a      	beq.n	800066e <csp_conn_allocate+0x2a>
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <csp_conn_allocate+0x98>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b913      	cbnz	r3, 8000664 <csp_conn_allocate+0x20>
 800065e:	2400      	movs	r4, #0
 8000660:	4620      	mov	r0, r4
 8000662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000664:	491e      	ldr	r1, [pc, #120]	; (80006e0 <csp_conn_allocate+0x9c>)
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f9cc 	bl	8000a04 <do_csp_debug>
 800066c:	e7f7      	b.n	800065e <csp_conn_allocate+0x1a>
 800066e:	4f1d      	ldr	r7, [pc, #116]	; (80006e4 <csp_conn_allocate+0xa0>)
 8000670:	2200      	movs	r2, #0
 8000672:	7c2b      	ldrb	r3, [r5, #16]
 8000674:	f04f 0c1c 	mov.w	ip, #28
 8000678:	7c39      	ldrb	r1, [r7, #16]
 800067a:	4614      	mov	r4, r2
 800067c:	6828      	ldr	r0, [r5, #0]
 800067e:	4291      	cmp	r1, r2
 8000680:	dc1a      	bgt.n	80006b8 <csp_conn_allocate+0x74>
 8000682:	b154      	cbz	r4, 800069a <csp_conn_allocate+0x56>
 8000684:	7862      	ldrb	r2, [r4, #1]
 8000686:	bb2a      	cbnz	r2, 80006d4 <csp_conn_allocate+0x90>
 8000688:	2200      	movs	r2, #0
 800068a:	7026      	strb	r6, [r4, #0]
 800068c:	742b      	strb	r3, [r5, #16]
 800068e:	e9c4 2201 	strd	r2, r2, [r4, #4]
 8000692:	e9c4 2204 	strd	r2, r2, [r4, #16]
 8000696:	2201      	movs	r2, #1
 8000698:	7062      	strb	r2, [r4, #1]
 800069a:	4813      	ldr	r0, [pc, #76]	; (80006e8 <csp_conn_allocate+0xa4>)
 800069c:	f001 fb50 	bl	8001d40 <csp_bin_sem_post>
 80006a0:	2c00      	cmp	r4, #0
 80006a2:	d1dd      	bne.n	8000660 <csp_conn_allocate+0x1c>
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <csp_conn_allocate+0x98>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0d8      	beq.n	800065e <csp_conn_allocate+0x1a>
 80006ac:	7c3a      	ldrb	r2, [r7, #16]
 80006ae:	4620      	mov	r0, r4
 80006b0:	490e      	ldr	r1, [pc, #56]	; (80006ec <csp_conn_allocate+0xa8>)
 80006b2:	f000 f9a7 	bl	8000a04 <do_csp_debug>
 80006b6:	e7d3      	b.n	8000660 <csp_conn_allocate+0x1c>
 80006b8:	3301      	adds	r3, #1
 80006ba:	fbb3 f4f1 	udiv	r4, r3, r1
 80006be:	fb01 3314 	mls	r3, r1, r4, r3
 80006c2:	fb0c 0403 	mla	r4, ip, r3, r0
 80006c6:	f894 e001 	ldrb.w	lr, [r4, #1]
 80006ca:	f1be 0f00 	cmp.w	lr, #0
 80006ce:	d0db      	beq.n	8000688 <csp_conn_allocate+0x44>
 80006d0:	3201      	adds	r2, #1
 80006d2:	e7d4      	b.n	800067e <csp_conn_allocate+0x3a>
 80006d4:	2400      	movs	r4, #0
 80006d6:	e7e0      	b.n	800069a <csp_conn_allocate+0x56>
 80006d8:	2000026c 	.word	0x2000026c
 80006dc:	20000000 	.word	0x20000000
 80006e0:	0800e523 	.word	0x0800e523
 80006e4:	20000288 	.word	0x20000288
 80006e8:	20000270 	.word	0x20000270
 80006ec:	0800e53d 	.word	0x0800e53d

080006f0 <csp_conn_new>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	4606      	mov	r6, r0
 80006f4:	2000      	movs	r0, #0
 80006f6:	460d      	mov	r5, r1
 80006f8:	f7ff ffa4 	bl	8000644 <csp_conn_allocate>
 80006fc:	4604      	mov	r4, r0
 80006fe:	b138      	cbz	r0, 8000710 <csp_conn_new+0x20>
 8000700:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8000704:	f001 fb98 	bl	8001e38 <csp_get_ms>
 8000708:	6160      	str	r0, [r4, #20]
 800070a:	4620      	mov	r0, r4
 800070c:	f7ff febc 	bl	8000488 <csp_conn_flush_rx_queue.isra.0>
 8000710:	4620      	mov	r0, r4
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <csp_conn_close>:
 8000714:	b538      	push	{r3, r4, r5, lr}
 8000716:	4604      	mov	r4, r0
 8000718:	b140      	cbz	r0, 800072c <csp_conn_close+0x18>
 800071a:	7845      	ldrb	r5, [r0, #1]
 800071c:	b945      	cbnz	r5, 8000730 <csp_conn_close+0x1c>
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <csp_conn_close+0x68>)
 8000720:	7958      	ldrb	r0, [r3, #5]
 8000722:	b120      	cbz	r0, 800072e <csp_conn_close+0x1a>
 8000724:	4916      	ldr	r1, [pc, #88]	; (8000780 <csp_conn_close+0x6c>)
 8000726:	2005      	movs	r0, #5
 8000728:	f000 f96c 	bl	8000a04 <do_csp_debug>
 800072c:	2000      	movs	r0, #0
 800072e:	bd38      	pop	{r3, r4, r5, pc}
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	4813      	ldr	r0, [pc, #76]	; (8000784 <csp_conn_close+0x70>)
 8000736:	f001 fae9 	bl	8001d0c <csp_bin_sem_wait>
 800073a:	2801      	cmp	r0, #1
 800073c:	d009      	beq.n	8000752 <csp_conn_close+0x3e>
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <csp_conn_close+0x68>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b11b      	cbz	r3, 800074c <csp_conn_close+0x38>
 8000744:	4910      	ldr	r1, [pc, #64]	; (8000788 <csp_conn_close+0x74>)
 8000746:	2000      	movs	r0, #0
 8000748:	f000 f95c 	bl	8000a04 <do_csp_debug>
 800074c:	f06f 0002 	mvn.w	r0, #2
 8000750:	e7ed      	b.n	800072e <csp_conn_close+0x1a>
 8000752:	2500      	movs	r5, #0
 8000754:	4620      	mov	r0, r4
 8000756:	7065      	strb	r5, [r4, #1]
 8000758:	f7ff fe96 	bl	8000488 <csp_conn_flush_rx_queue.isra.0>
 800075c:	6920      	ldr	r0, [r4, #16]
 800075e:	b148      	cbz	r0, 8000774 <csp_conn_close+0x60>
 8000760:	7823      	ldrb	r3, [r4, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d106      	bne.n	8000774 <csp_conn_close+0x60>
 8000766:	69a3      	ldr	r3, [r4, #24]
 8000768:	f413 5f88 	tst.w	r3, #4352	; 0x1100
 800076c:	d002      	beq.n	8000774 <csp_conn_close+0x60>
 800076e:	f001 fa98 	bl	8001ca2 <csp_queue_remove>
 8000772:	6125      	str	r5, [r4, #16]
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <csp_conn_close+0x70>)
 8000776:	f001 fae3 	bl	8001d40 <csp_bin_sem_post>
 800077a:	e7d7      	b.n	800072c <csp_conn_close+0x18>
 800077c:	20000000 	.word	0x20000000
 8000780:	0800e559 	.word	0x0800e559
 8000784:	20000270 	.word	0x20000270
 8000788:	0800e523 	.word	0x0800e523

0800078c <csp_close>:
 800078c:	2101      	movs	r1, #1
 800078e:	f7ff bfc1 	b.w	8000714 <csp_conn_close>

08000792 <csp_connect>:
 8000792:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000796:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80008cc <csp_connect+0x13a>
 800079a:	f000 0003 	and.w	r0, r0, #3
 800079e:	9d08      	ldr	r5, [sp, #32]
 80007a0:	2600      	movs	r6, #0
 80007a2:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80007a6:	2700      	movs	r7, #0
 80007a8:	f001 011f 	and.w	r1, r1, #31
 80007ac:	f360 769f 	bfi	r6, r0, #30, #2
 80007b0:	431d      	orrs	r5, r3
 80007b2:	f898 3000 	ldrb.w	r3, [r8]
 80007b6:	f360 779f 	bfi	r7, r0, #30, #2
 80007ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007be:	f003 031f 	and.w	r3, r3, #31
 80007c2:	f361 5718 	bfi	r7, r1, #20, #5
 80007c6:	f363 5618 	bfi	r6, r3, #20, #5
 80007ca:	f363 675d 	bfi	r7, r3, #25, #5
 80007ce:	f361 665d 	bfi	r6, r1, #25, #5
 80007d2:	f362 3793 	bfi	r7, r2, #14, #6
 80007d6:	f362 260d 	bfi	r6, r2, #8, #6
 80007da:	062a      	lsls	r2, r5, #24
 80007dc:	f36f 0707 	bfc	r7, #0, #8
 80007e0:	bf48      	it	mi
 80007e2:	f025 0540 	bicmi.w	r5, r5, #64	; 0x40
 80007e6:	f36f 0607 	bfc	r6, #0, #8
 80007ea:	f015 0401 	ands.w	r4, r5, #1
 80007ee:	d00b      	beq.n	8000808 <csp_connect+0x76>
 80007f0:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <csp_connect+0x11e>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b91b      	cbnz	r3, 80007fe <csp_connect+0x6c>
 80007f6:	2400      	movs	r4, #0
 80007f8:	4620      	mov	r0, r4
 80007fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007fe:	492d      	ldr	r1, [pc, #180]	; (80008b4 <csp_connect+0x122>)
 8000800:	2000      	movs	r0, #0
 8000802:	f000 f8ff 	bl	8000a04 <do_csp_debug>
 8000806:	e7f6      	b.n	80007f6 <csp_connect+0x64>
 8000808:	f015 0904 	ands.w	r9, r5, #4
 800080c:	d008      	beq.n	8000820 <csp_connect+0x8e>
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <csp_connect+0x11e>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0ef      	beq.n	80007f6 <csp_connect+0x64>
 8000816:	4928      	ldr	r1, [pc, #160]	; (80008b8 <csp_connect+0x126>)
 8000818:	4620      	mov	r0, r4
 800081a:	f000 f8f3 	bl	8000a04 <do_csp_debug>
 800081e:	e7eb      	b.n	80007f8 <csp_connect+0x66>
 8000820:	f015 0410 	ands.w	r4, r5, #16
 8000824:	d005      	beq.n	8000832 <csp_connect+0xa0>
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <csp_connect+0x11e>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0e3      	beq.n	80007f6 <csp_connect+0x64>
 800082e:	4923      	ldr	r1, [pc, #140]	; (80008bc <csp_connect+0x12a>)
 8000830:	e7e6      	b.n	8000800 <csp_connect+0x6e>
 8000832:	066b      	lsls	r3, r5, #25
 8000834:	d505      	bpl.n	8000842 <csp_connect+0xb0>
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <csp_connect+0x11e>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d0db      	beq.n	80007f6 <csp_connect+0x64>
 800083e:	4920      	ldr	r1, [pc, #128]	; (80008c0 <csp_connect+0x12e>)
 8000840:	e7ea      	b.n	8000818 <csp_connect+0x86>
 8000842:	4c20      	ldr	r4, [pc, #128]	; (80008c4 <csp_connect+0x132>)
 8000844:	f04f 31ff 	mov.w	r1, #4294967295
 8000848:	f104 000c 	add.w	r0, r4, #12
 800084c:	f001 fa5e 	bl	8001d0c <csp_bin_sem_wait>
 8000850:	2801      	cmp	r0, #1
 8000852:	d1d0      	bne.n	80007f6 <csp_connect+0x64>
 8000854:	f898 8013 	ldrb.w	r8, [r8, #19]
 8000858:	f894 9008 	ldrb.w	r9, [r4, #8]
 800085c:	f108 0801 	add.w	r8, r8, #1
 8000860:	fa5f f888 	uxtb.w	r8, r8
 8000864:	7a23      	ldrb	r3, [r4, #8]
 8000866:	3301      	adds	r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	454b      	cmp	r3, r9
 800086c:	7223      	strb	r3, [r4, #8]
 800086e:	d101      	bne.n	8000874 <csp_connect+0xe2>
 8000870:	2400      	movs	r4, #0
 8000872:	e016      	b.n	80008a2 <csp_connect+0x110>
 8000874:	2b3f      	cmp	r3, #63	; 0x3f
 8000876:	f44f 217c 	mov.w	r1, #1032192	; 0xfc000
 800087a:	bf88      	it	hi
 800087c:	f884 8008 	strbhi.w	r8, [r4, #8]
 8000880:	7a23      	ldrb	r3, [r4, #8]
 8000882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000886:	f363 3693 	bfi	r6, r3, #14, #6
 800088a:	f363 270d 	bfi	r7, r3, #8, #6
 800088e:	4630      	mov	r0, r6
 8000890:	f7ff febc 	bl	800060c <csp_conn_find>
 8000894:	2800      	cmp	r0, #0
 8000896:	d1e5      	bne.n	8000864 <csp_connect+0xd2>
 8000898:	4639      	mov	r1, r7
 800089a:	4630      	mov	r0, r6
 800089c:	f7ff ff28 	bl	80006f0 <csp_conn_new>
 80008a0:	4604      	mov	r4, r0
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <csp_connect+0x136>)
 80008a4:	f001 fa4c 	bl	8001d40 <csp_bin_sem_post>
 80008a8:	2c00      	cmp	r4, #0
 80008aa:	d0a5      	beq.n	80007f8 <csp_connect+0x66>
 80008ac:	61a5      	str	r5, [r4, #24]
 80008ae:	e7a3      	b.n	80007f8 <csp_connect+0x66>
 80008b0:	20000000 	.word	0x20000000
 80008b4:	0800e56d 	.word	0x0800e56d
 80008b8:	0800e5b8 	.word	0x0800e5b8
 80008bc:	0800e613 	.word	0x0800e613
 80008c0:	0800e66a 	.word	0x0800e66a
 80008c4:	2000026c 	.word	0x2000026c
 80008c8:	20000278 	.word	0x20000278
 80008cc:	20000288 	.word	0x20000288

080008d0 <csp_conn_dport>:
 80008d0:	6840      	ldr	r0, [r0, #4]
 80008d2:	f3c0 3085 	ubfx	r0, r0, #14, #6
 80008d6:	4770      	bx	lr

080008d8 <csp_conn_sport>:
 80008d8:	7940      	ldrb	r0, [r0, #5]
 80008da:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80008de:	4770      	bx	lr

080008e0 <csp_conn_dst>:
 80008e0:	88c0      	ldrh	r0, [r0, #6]
 80008e2:	f3c0 1004 	ubfx	r0, r0, #4, #5
 80008e6:	4770      	bx	lr

080008e8 <csp_conn_src>:
 80008e8:	79c0      	ldrb	r0, [r0, #7]
 80008ea:	f3c0 0044 	ubfx	r0, r0, #1, #5
 80008ee:	4770      	bx	lr

080008f0 <csp_conn_flags>:
 80008f0:	7900      	ldrb	r0, [r0, #4]
 80008f2:	4770      	bx	lr

080008f4 <csp_conn_print_table>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	2400      	movs	r4, #0
 80008f8:	b087      	sub	sp, #28
 80008fa:	4d12      	ldr	r5, [pc, #72]	; (8000944 <csp_conn_print_table+0x50>)
 80008fc:	4e12      	ldr	r6, [pc, #72]	; (8000948 <csp_conn_print_table+0x54>)
 80008fe:	4f13      	ldr	r7, [pc, #76]	; (800094c <csp_conn_print_table+0x58>)
 8000900:	7c2b      	ldrb	r3, [r5, #16]
 8000902:	42a3      	cmp	r3, r4
 8000904:	d801      	bhi.n	800090a <csp_conn_print_table+0x16>
 8000906:	b007      	add	sp, #28
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	6832      	ldr	r2, [r6, #0]
 800090c:	231c      	movs	r3, #28
 800090e:	4638      	mov	r0, r7
 8000910:	fb03 2204 	mla	r2, r3, r4, r2
 8000914:	6911      	ldr	r1, [r2, #16]
 8000916:	7853      	ldrb	r3, [r2, #1]
 8000918:	9104      	str	r1, [sp, #16]
 800091a:	7951      	ldrb	r1, [r2, #5]
 800091c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8000920:	9103      	str	r1, [sp, #12]
 8000922:	6851      	ldr	r1, [r2, #4]
 8000924:	f3c1 3185 	ubfx	r1, r1, #14, #6
 8000928:	9102      	str	r1, [sp, #8]
 800092a:	88d1      	ldrh	r1, [r2, #6]
 800092c:	f3c1 1104 	ubfx	r1, r1, #4, #5
 8000930:	9101      	str	r1, [sp, #4]
 8000932:	79d1      	ldrb	r1, [r2, #7]
 8000934:	f3c1 0144 	ubfx	r1, r1, #1, #5
 8000938:	9100      	str	r1, [sp, #0]
 800093a:	4621      	mov	r1, r4
 800093c:	f00b fba0 	bl	800c080 <iprintf>
 8000940:	3401      	adds	r4, #1
 8000942:	e7dd      	b.n	8000900 <csp_conn_print_table+0xc>
 8000944:	20000288 	.word	0x20000288
 8000948:	2000026c 	.word	0x2000026c
 800094c:	0800e6c3 	.word	0x0800e6c3

08000950 <csp_conn_print_table_str>:
 8000950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000954:	4f20      	ldr	r7, [pc, #128]	; (80009d8 <csp_conn_print_table_str+0x88>)
 8000956:	b0a2      	sub	sp, #136	; 0x88
 8000958:	4606      	mov	r6, r0
 800095a:	460d      	mov	r5, r1
 800095c:	7c3c      	ldrb	r4, [r7, #16]
 800095e:	f04f 091c 	mov.w	r9, #28
 8000962:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80009dc <csp_conn_print_table_str+0x8c>
 8000966:	2c0a      	cmp	r4, #10
 8000968:	f8df a074 	ldr.w	sl, [pc, #116]	; 80009e0 <csp_conn_print_table_str+0x90>
 800096c:	bf8c      	ite	hi
 800096e:	3c0a      	subhi	r4, #10
 8000970:	2400      	movls	r4, #0
 8000972:	7c3b      	ldrb	r3, [r7, #16]
 8000974:	42a3      	cmp	r3, r4
 8000976:	d803      	bhi.n	8000980 <csp_conn_print_table_str+0x30>
 8000978:	2000      	movs	r0, #0
 800097a:	b022      	add	sp, #136	; 0x88
 800097c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000980:	f8d8 3000 	ldr.w	r3, [r8]
 8000984:	2164      	movs	r1, #100	; 0x64
 8000986:	a809      	add	r0, sp, #36	; 0x24
 8000988:	fb09 3304 	mla	r3, r9, r4, r3
 800098c:	691a      	ldr	r2, [r3, #16]
 800098e:	9206      	str	r2, [sp, #24]
 8000990:	795a      	ldrb	r2, [r3, #5]
 8000992:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000996:	9205      	str	r2, [sp, #20]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	f3c2 3285 	ubfx	r2, r2, #14, #6
 800099e:	9204      	str	r2, [sp, #16]
 80009a0:	88da      	ldrh	r2, [r3, #6]
 80009a2:	f3c2 1204 	ubfx	r2, r2, #4, #5
 80009a6:	9203      	str	r2, [sp, #12]
 80009a8:	79da      	ldrb	r2, [r3, #7]
 80009aa:	f3c2 0244 	ubfx	r2, r2, #1, #5
 80009ae:	9202      	str	r2, [sp, #8]
 80009b0:	785a      	ldrb	r2, [r3, #1]
 80009b2:	e9cd 3200 	strd	r3, r2, [sp]
 80009b6:	4623      	mov	r3, r4
 80009b8:	4652      	mov	r2, sl
 80009ba:	f00b fcd5 	bl	800c368 <sniprintf>
 80009be:	462a      	mov	r2, r5
 80009c0:	a909      	add	r1, sp, #36	; 0x24
 80009c2:	4630      	mov	r0, r6
 80009c4:	f00b fdda 	bl	800c57c <strncat>
 80009c8:	a809      	add	r0, sp, #36	; 0x24
 80009ca:	f001 fa49 	bl	8001e60 <strlen>
 80009ce:	1a2d      	subs	r5, r5, r0
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	ddd1      	ble.n	8000978 <csp_conn_print_table_str+0x28>
 80009d4:	3401      	adds	r4, #1
 80009d6:	e7cc      	b.n	8000972 <csp_conn_print_table_str+0x22>
 80009d8:	20000288 	.word	0x20000288
 80009dc:	2000026c 	.word	0x2000026c
 80009e0:	0800e6f2 	.word	0x0800e6f2

080009e4 <csp_conn_get_array>:
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <csp_conn_get_array+0xc>)
 80009e6:	7c1b      	ldrb	r3, [r3, #16]
 80009e8:	6003      	str	r3, [r0, #0]
 80009ea:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <csp_conn_get_array+0x10>)
 80009ec:	6818      	ldr	r0, [r3, #0]
 80009ee:	4770      	bx	lr
 80009f0:	20000288 	.word	0x20000288
 80009f4:	2000026c 	.word	0x2000026c

080009f8 <csp_debug_hook_set>:
 80009f8:	4b01      	ldr	r3, [pc, #4]	; (8000a00 <csp_debug_hook_set+0x8>)
 80009fa:	6018      	str	r0, [r3, #0]
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000280 	.word	0x20000280

08000a04 <do_csp_debug>:
 8000a04:	2806      	cmp	r0, #6
 8000a06:	b40e      	push	{r1, r2, r3}
 8000a08:	b533      	push	{r0, r1, r4, r5, lr}
 8000a0a:	9c05      	ldr	r4, [sp, #20]
 8000a0c:	d810      	bhi.n	8000a30 <do_csp_debug+0x2c>
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <do_csp_debug+0x54>)
 8000a10:	5c1b      	ldrb	r3, [r3, r0]
 8000a12:	b16b      	cbz	r3, 8000a30 <do_csp_debug+0x2c>
 8000a14:	1e43      	subs	r3, r0, #1
 8000a16:	4911      	ldr	r1, [pc, #68]	; (8000a5c <do_csp_debug+0x58>)
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	680d      	ldr	r5, [r1, #0]
 8000a1c:	2b05      	cmp	r3, #5
 8000a1e:	bf96      	itet	ls
 8000a20:	4a0f      	ldrls	r2, [pc, #60]	; (8000a60 <do_csp_debug+0x5c>)
 8000a22:	2312      	movhi	r3, #18
 8000a24:	56d3      	ldrsbls	r3, [r2, r3]
 8000a26:	aa06      	add	r2, sp, #24
 8000a28:	9201      	str	r2, [sp, #4]
 8000a2a:	b135      	cbz	r5, 8000a3a <do_csp_debug+0x36>
 8000a2c:	4621      	mov	r1, r4
 8000a2e:	47a8      	blx	r5
 8000a30:	b002      	add	sp, #8
 8000a32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a36:	b003      	add	sp, #12
 8000a38:	4770      	bx	lr
 8000a3a:	b2d8      	uxtb	r0, r3
 8000a3c:	f001 f9bf 	bl	8001dbe <csp_sys_set_color>
 8000a40:	9901      	ldr	r1, [sp, #4]
 8000a42:	4620      	mov	r0, r4
 8000a44:	f00b fdf8 	bl	800c638 <viprintf>
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <do_csp_debug+0x60>)
 8000a4a:	f00b fb9f 	bl	800c18c <puts>
 8000a4e:	20f0      	movs	r0, #240	; 0xf0
 8000a50:	f001 f9b5 	bl	8001dbe <csp_sys_set_color>
 8000a54:	e7ec      	b.n	8000a30 <do_csp_debug+0x2c>
 8000a56:	bf00      	nop
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000280 	.word	0x20000280
 8000a60:	0800e295 	.word	0x0800e295
 8000a64:	0800e720 	.word	0x0800e720

08000a68 <csp_debug_set_level>:
 8000a68:	2806      	cmp	r0, #6
 8000a6a:	bf9c      	itt	ls
 8000a6c:	4b01      	ldrls	r3, [pc, #4]	; (8000a74 <csp_debug_set_level+0xc>)
 8000a6e:	5419      	strbls	r1, [r3, r0]
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000000 	.word	0x20000000

08000a78 <csp_debug_get_level>:
 8000a78:	2806      	cmp	r0, #6
 8000a7a:	bf9a      	itte	ls
 8000a7c:	4b01      	ldrls	r3, [pc, #4]	; (8000a84 <csp_debug_get_level+0xc>)
 8000a7e:	5c18      	ldrbls	r0, [r3, r0]
 8000a80:	2000      	movhi	r0, #0
 8000a82:	4770      	bx	lr
 8000a84:	20000000 	.word	0x20000000

08000a88 <csp_debug_toggle_level>:
 8000a88:	2806      	cmp	r0, #6
 8000a8a:	bf9f      	itttt	ls
 8000a8c:	4a02      	ldrls	r2, [pc, #8]	; (8000a98 <csp_debug_toggle_level+0x10>)
 8000a8e:	5c13      	ldrbls	r3, [r2, r0]
 8000a90:	f083 0301 	eorls.w	r3, r3, #1
 8000a94:	5413      	strbls	r3, [r2, r0]
 8000a96:	4770      	bx	lr
 8000a98:	20000000 	.word	0x20000000

08000a9c <csp_hton16>:
 8000a9c:	ba40      	rev16	r0, r0
 8000a9e:	b280      	uxth	r0, r0
 8000aa0:	4770      	bx	lr

08000aa2 <csp_ntoh16>:
 8000aa2:	ba40      	rev16	r0, r0
 8000aa4:	b280      	uxth	r0, r0
 8000aa6:	4770      	bx	lr

08000aa8 <csp_hton32>:
 8000aa8:	ba00      	rev	r0, r0
 8000aaa:	4770      	bx	lr

08000aac <csp_ntoh32>:
 8000aac:	f7ff bffc 	b.w	8000aa8 <csp_hton32>

08000ab0 <csp_hton64>:
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	ba08      	rev	r0, r1
 8000ab4:	ba19      	rev	r1, r3
 8000ab6:	4770      	bx	lr

08000ab8 <csp_ntoh64>:
 8000ab8:	f7ff bffa 	b.w	8000ab0 <csp_hton64>

08000abc <csp_htobe16>:
 8000abc:	ba40      	rev16	r0, r0
 8000abe:	b280      	uxth	r0, r0
 8000ac0:	4770      	bx	lr

08000ac2 <csp_htole16>:
 8000ac2:	4770      	bx	lr

08000ac4 <csp_betoh16>:
 8000ac4:	ba40      	rev16	r0, r0
 8000ac6:	b280      	uxth	r0, r0
 8000ac8:	4770      	bx	lr

08000aca <csp_letoh16>:
 8000aca:	4770      	bx	lr

08000acc <csp_htobe32>:
 8000acc:	f7ff bfec 	b.w	8000aa8 <csp_hton32>

08000ad0 <csp_htole32>:
 8000ad0:	4770      	bx	lr

08000ad2 <csp_betoh32>:
 8000ad2:	f7ff bfe9 	b.w	8000aa8 <csp_hton32>

08000ad6 <csp_letoh32>:
 8000ad6:	4770      	bx	lr

08000ad8 <csp_htobe64>:
 8000ad8:	f7ff bfea 	b.w	8000ab0 <csp_hton64>

08000adc <csp_htole64>:
 8000adc:	4770      	bx	lr

08000ade <csp_betoh64>:
 8000ade:	f7ff bfe7 	b.w	8000ab0 <csp_hton64>

08000ae2 <csp_letoh64>:
 8000ae2:	4770      	bx	lr

08000ae4 <csp_htonflt>:
 8000ae4:	ee10 0a10 	vmov	r0, s0
 8000ae8:	b508      	push	{r3, lr}
 8000aea:	f7ff ffdd 	bl	8000aa8 <csp_hton32>
 8000aee:	ee00 0a10 	vmov	s0, r0
 8000af2:	bd08      	pop	{r3, pc}

08000af4 <csp_ntohflt>:
 8000af4:	ee10 0a10 	vmov	r0, s0
 8000af8:	b508      	push	{r3, lr}
 8000afa:	f7ff ffd5 	bl	8000aa8 <csp_hton32>
 8000afe:	ee00 0a10 	vmov	s0, r0
 8000b02:	bd08      	pop	{r3, pc}

08000b04 <csp_htondbl>:
 8000b04:	ec51 0b10 	vmov	r0, r1, d0
 8000b08:	b508      	push	{r3, lr}
 8000b0a:	f7ff ffd1 	bl	8000ab0 <csp_hton64>
 8000b0e:	ec41 0b10 	vmov	d0, r0, r1
 8000b12:	bd08      	pop	{r3, pc}

08000b14 <csp_ntohdbl>:
 8000b14:	ec51 0b10 	vmov	r0, r1, d0
 8000b18:	b508      	push	{r3, lr}
 8000b1a:	f7ff ffc9 	bl	8000ab0 <csp_hton64>
 8000b1e:	ec41 0b10 	vmov	d0, r0, r1
 8000b22:	bd08      	pop	{r3, pc}

08000b24 <csp_iflist_get_by_name>:
 8000b24:	b538      	push	{r3, r4, r5, lr}
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <csp_iflist_get_by_name+0x20>)
 8000b28:	4605      	mov	r5, r0
 8000b2a:	681c      	ldr	r4, [r3, #0]
 8000b2c:	b90c      	cbnz	r4, 8000b32 <csp_iflist_get_by_name+0xe>
 8000b2e:	4620      	mov	r0, r4
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
 8000b32:	220a      	movs	r2, #10
 8000b34:	4629      	mov	r1, r5
 8000b36:	6820      	ldr	r0, [r4, #0]
 8000b38:	f00b fcfe 	bl	800c538 <strncasecmp>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d0f6      	beq.n	8000b2e <csp_iflist_get_by_name+0xa>
 8000b40:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8000b42:	e7f3      	b.n	8000b2c <csp_iflist_get_by_name+0x8>
 8000b44:	20000284 	.word	0x20000284

08000b48 <csp_iflist_add>:
 8000b48:	b538      	push	{r3, r4, r5, lr}
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	4605      	mov	r5, r0
 8000b4e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <csp_iflist_add+0x38>)
 8000b52:	681c      	ldr	r4, [r3, #0]
 8000b54:	b91c      	cbnz	r4, 8000b5e <csp_iflist_add+0x16>
 8000b56:	6018      	str	r0, [r3, #0]
 8000b58:	4620      	mov	r0, r4
 8000b5a:	bd38      	pop	{r3, r4, r5, pc}
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	42a5      	cmp	r5, r4
 8000b60:	d00a      	beq.n	8000b78 <csp_iflist_add+0x30>
 8000b62:	220a      	movs	r2, #10
 8000b64:	6821      	ldr	r1, [r4, #0]
 8000b66:	6828      	ldr	r0, [r5, #0]
 8000b68:	f00b fce6 	bl	800c538 <strncasecmp>
 8000b6c:	b120      	cbz	r0, 8000b78 <csp_iflist_add+0x30>
 8000b6e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d1f3      	bne.n	8000b5c <csp_iflist_add+0x14>
 8000b74:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000b76:	e7f0      	b.n	8000b5a <csp_iflist_add+0x12>
 8000b78:	f06f 0006 	mvn.w	r0, #6
 8000b7c:	e7ed      	b.n	8000b5a <csp_iflist_add+0x12>
 8000b7e:	bf00      	nop
 8000b80:	20000284 	.word	0x20000284

08000b84 <csp_iflist_get>:
 8000b84:	4b01      	ldr	r3, [pc, #4]	; (8000b8c <csp_iflist_get+0x8>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000284 	.word	0x20000284

08000b90 <csp_bytesize>:
 8000b90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000b94:	4690      	mov	r8, r2
 8000b96:	4606      	mov	r6, r0
 8000b98:	4610      	mov	r0, r2
 8000b9a:	460f      	mov	r7, r1
 8000b9c:	f001 fc24 	bl	80023e8 <__aeabi_ui2d>
 8000ba0:	f5b8 1f80 	cmp.w	r8, #1048576	; 0x100000
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	460d      	mov	r5, r1
 8000ba8:	d311      	bcc.n	8000bce <csp_bytesize+0x3e>
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <csp_bytesize+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	f001 f9af 	bl	8001f10 <__aeabi_dmul>
 8000bb2:	234d      	movs	r3, #77	; 0x4d
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	460d      	mov	r5, r1
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <csp_bytesize+0x5c>)
 8000bba:	4639      	mov	r1, r7
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	9302      	str	r3, [sp, #8]
 8000bc0:	e9cd 4500 	strd	r4, r5, [sp]
 8000bc4:	f00b fbd0 	bl	800c368 <sniprintf>
 8000bc8:	b004      	add	sp, #16
 8000bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bce:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8000bd2:	d307      	bcc.n	8000be4 <csp_bytesize+0x54>
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <csp_bytesize+0x60>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f001 f99a 	bl	8001f10 <__aeabi_dmul>
 8000bdc:	234b      	movs	r3, #75	; 0x4b
 8000bde:	4604      	mov	r4, r0
 8000be0:	460d      	mov	r5, r1
 8000be2:	e7e9      	b.n	8000bb8 <csp_bytesize+0x28>
 8000be4:	2342      	movs	r3, #66	; 0x42
 8000be6:	e7e7      	b.n	8000bb8 <csp_bytesize+0x28>
 8000be8:	3eb00000 	.word	0x3eb00000
 8000bec:	0800e722 	.word	0x0800e722
 8000bf0:	3f500000 	.word	0x3f500000

08000bf4 <csp_iflist_print>:
 8000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <csp_iflist_print+0x5c>)
 8000bf8:	b099      	sub	sp, #100	; 0x64
 8000bfa:	4f16      	ldr	r7, [pc, #88]	; (8000c54 <csp_iflist_print+0x60>)
 8000bfc:	681c      	ldr	r4, [r3, #0]
 8000bfe:	ad0a      	add	r5, sp, #40	; 0x28
 8000c00:	b90c      	cbnz	r4, 8000c06 <csp_iflist_print+0x12>
 8000c02:	b019      	add	sp, #100	; 0x64
 8000c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c06:	ae11      	add	r6, sp, #68	; 0x44
 8000c08:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c0a:	2119      	movs	r1, #25
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	f7ff ffbf 	bl	8000b90 <csp_bytesize>
 8000c12:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000c14:	2119      	movs	r1, #25
 8000c16:	4630      	mov	r0, r6
 8000c18:	f7ff ffba 	bl	8000b90 <csp_bytesize>
 8000c1c:	8a23      	ldrh	r3, [r4, #16]
 8000c1e:	4638      	mov	r0, r7
 8000c20:	e9cd 6308 	strd	r6, r3, [sp, #32]
 8000c24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c26:	e9cd 5306 	strd	r5, r3, [sp, #24]
 8000c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c2c:	9305      	str	r3, [sp, #20]
 8000c2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c30:	9304      	str	r3, [sp, #16]
 8000c32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c34:	9303      	str	r3, [sp, #12]
 8000c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c38:	9302      	str	r3, [sp, #8]
 8000c3a:	6a23      	ldr	r3, [r4, #32]
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	69e3      	ldr	r3, [r4, #28]
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	6821      	ldr	r1, [r4, #0]
 8000c44:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8000c48:	f00b fa1a 	bl	800c080 <iprintf>
 8000c4c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8000c4e:	e7d7      	b.n	8000c00 <csp_iflist_print+0xc>
 8000c50:	20000284 	.word	0x20000284
 8000c54:	0800e729 	.word	0x0800e729

08000c58 <csp_get_address>:
 8000c58:	4b01      	ldr	r3, [pc, #4]	; (8000c60 <csp_get_address+0x8>)
 8000c5a:	7818      	ldrb	r0, [r3, #0]
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000288 	.word	0x20000288

08000c64 <csp_init>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	4604      	mov	r4, r0
 8000c68:	f000 fff8 	bl	8001c5c <csp_get_uptime_s>
 8000c6c:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <csp_init+0x68>)
 8000c6e:	4623      	mov	r3, r4
 8000c70:	f104 0620 	add.w	r6, r4, #32
 8000c74:	4615      	mov	r5, r2
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	3308      	adds	r3, #8
 8000c7a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8000c7e:	4614      	mov	r4, r2
 8000c80:	42b3      	cmp	r3, r6
 8000c82:	c403      	stmia	r4!, {r0, r1}
 8000c84:	4622      	mov	r2, r4
 8000c86:	d1f6      	bne.n	8000c76 <csp_init+0x12>
 8000c88:	f7ff fad2 	bl	8000230 <csp_buffer_init>
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	b9d0      	cbnz	r0, 8000cc6 <csp_init+0x62>
 8000c90:	f7ff fc34 	bl	80004fc <csp_conn_init>
 8000c94:	4604      	mov	r4, r0
 8000c96:	b9b0      	cbnz	r0, 8000cc6 <csp_init+0x62>
 8000c98:	f000 faa4 	bl	80011e4 <csp_port_init>
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	b990      	cbnz	r0, 8000cc6 <csp_init+0x62>
 8000ca0:	f000 fb62 	bl	8001368 <csp_qfifo_init>
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	b970      	cbnz	r0, 8000cc6 <csp_init+0x62>
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <csp_init+0x6c>)
 8000caa:	f7ff ff4d 	bl	8000b48 <csp_iflist_add>
 8000cae:	23ff      	movs	r3, #255	; 0xff
 8000cb0:	4a07      	ldr	r2, [pc, #28]	; (8000cd0 <csp_init+0x6c>)
 8000cb2:	2105      	movs	r1, #5
 8000cb4:	7828      	ldrb	r0, [r5, #0]
 8000cb6:	f000 fe25 	bl	8001904 <csp_rtable_set>
 8000cba:	23ff      	movs	r3, #255	; 0xff
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <csp_init+0x6c>)
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	2020      	movs	r0, #32
 8000cc2:	f000 fe1f 	bl	8001904 <csp_rtable_set>
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000288 	.word	0x20000288
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <csp_free_resources>:
 8000cd4:	b508      	push	{r3, lr}
 8000cd6:	f000 ff61 	bl	8001b9c <csp_rtable_free>
 8000cda:	f000 fb5b 	bl	8001394 <csp_qfifo_free_resources>
 8000cde:	f000 fa93 	bl	8001208 <csp_port_free_resources>
 8000ce2:	f7ff fc73 	bl	80005cc <csp_conn_free_resources>
 8000ce6:	f7ff fa93 	bl	8000210 <csp_buffer_free_resources>
 8000cea:	2220      	movs	r2, #32
 8000cec:	2100      	movs	r1, #0
 8000cee:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <csp_free_resources+0x24>)
 8000cf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000cf4:	f00b b927 	b.w	800bf46 <memset>
 8000cf8:	20000288 	.word	0x20000288

08000cfc <csp_get_conf>:
 8000cfc:	4800      	ldr	r0, [pc, #0]	; (8000d00 <csp_get_conf+0x4>)
 8000cfe:	4770      	bx	lr
 8000d00:	20000288 	.word	0x20000288

08000d04 <csp_socket>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	f010 0601 	ands.w	r6, r0, #1
 8000d0a:	4605      	mov	r5, r0
 8000d0c:	d00a      	beq.n	8000d24 <csp_socket+0x20>
 8000d0e:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <csp_socket+0xac>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b913      	cbnz	r3, 8000d1a <csp_socket+0x16>
 8000d14:	2400      	movs	r4, #0
 8000d16:	4620      	mov	r0, r4
 8000d18:	bd70      	pop	{r4, r5, r6, pc}
 8000d1a:	4926      	ldr	r1, [pc, #152]	; (8000db4 <csp_socket+0xb0>)
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff fe71 	bl	8000a04 <do_csp_debug>
 8000d22:	e7f7      	b.n	8000d14 <csp_socket+0x10>
 8000d24:	f010 0410 	ands.w	r4, r0, #16
 8000d28:	d009      	beq.n	8000d3e <csp_socket+0x3a>
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <csp_socket+0xac>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f0      	beq.n	8000d14 <csp_socket+0x10>
 8000d32:	4921      	ldr	r1, [pc, #132]	; (8000db8 <csp_socket+0xb4>)
 8000d34:	4630      	mov	r0, r6
 8000d36:	f7ff fe65 	bl	8000a04 <do_csp_debug>
 8000d3a:	4634      	mov	r4, r6
 8000d3c:	e7eb      	b.n	8000d16 <csp_socket+0x12>
 8000d3e:	f010 0604 	ands.w	r6, r0, #4
 8000d42:	d008      	beq.n	8000d56 <csp_socket+0x52>
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <csp_socket+0xac>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0e3      	beq.n	8000d14 <csp_socket+0x10>
 8000d4c:	491b      	ldr	r1, [pc, #108]	; (8000dbc <csp_socket+0xb8>)
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f7ff fe58 	bl	8000a04 <do_csp_debug>
 8000d54:	e7df      	b.n	8000d16 <csp_socket+0x12>
 8000d56:	f010 0440 	ands.w	r4, r0, #64	; 0x40
 8000d5a:	d005      	beq.n	8000d68 <csp_socket+0x64>
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <csp_socket+0xac>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0d7      	beq.n	8000d14 <csp_socket+0x10>
 8000d64:	4916      	ldr	r1, [pc, #88]	; (8000dc0 <csp_socket+0xbc>)
 8000d66:	e7e5      	b.n	8000d34 <csp_socket+0x30>
 8000d68:	f420 73aa 	bic.w	r3, r0, #340	; 0x154
 8000d6c:	f023 0301 	bic.w	r3, r3, #1
 8000d70:	b12b      	cbz	r3, 8000d7e <csp_socket+0x7a>
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <csp_socket+0xac>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0cc      	beq.n	8000d14 <csp_socket+0x10>
 8000d7a:	4912      	ldr	r1, [pc, #72]	; (8000dc4 <csp_socket+0xc0>)
 8000d7c:	e7e7      	b.n	8000d4e <csp_socket+0x4a>
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f7ff fc60 	bl	8000644 <csp_conn_allocate>
 8000d84:	4606      	mov	r6, r0
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d0c4      	beq.n	8000d14 <csp_socket+0x10>
 8000d8a:	f415 7380 	ands.w	r3, r5, #256	; 0x100
 8000d8e:	d00b      	beq.n	8000da8 <csp_socket+0xa4>
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <csp_socket+0xc4>)
 8000d92:	2104      	movs	r1, #4
 8000d94:	7c58      	ldrb	r0, [r3, #17]
 8000d96:	f000 ff81 	bl	8001c9c <csp_queue_create>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	6130      	str	r0, [r6, #16]
 8000d9e:	b920      	cbnz	r0, 8000daa <csp_socket+0xa6>
 8000da0:	4630      	mov	r0, r6
 8000da2:	f7ff fcf3 	bl	800078c <csp_close>
 8000da6:	e7b6      	b.n	8000d16 <csp_socket+0x12>
 8000da8:	6103      	str	r3, [r0, #16]
 8000daa:	61b5      	str	r5, [r6, #24]
 8000dac:	e7c5      	b.n	8000d3a <csp_socket+0x36>
 8000dae:	bf00      	nop
 8000db0:	20000000 	.word	0x20000000
 8000db4:	0800e7c1 	.word	0x0800e7c1
 8000db8:	0800e816 	.word	0x0800e816
 8000dbc:	0800e86d 	.word	0x0800e86d
 8000dc0:	0800e8c4 	.word	0x0800e8c4
 8000dc4:	0800e91d 	.word	0x0800e91d
 8000dc8:	20000288 	.word	0x20000288

08000dcc <csp_accept>:
 8000dcc:	b507      	push	{r0, r1, r2, lr}
 8000dce:	460a      	mov	r2, r1
 8000dd0:	b918      	cbnz	r0, 8000dda <csp_accept+0xe>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	b003      	add	sp, #12
 8000dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dda:	6900      	ldr	r0, [r0, #16]
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d0f8      	beq.n	8000dd2 <csp_accept+0x6>
 8000de0:	a901      	add	r1, sp, #4
 8000de2:	f000 ff66 	bl	8001cb2 <csp_queue_dequeue>
 8000de6:	2801      	cmp	r0, #1
 8000de8:	d1f3      	bne.n	8000dd2 <csp_accept+0x6>
 8000dea:	9801      	ldr	r0, [sp, #4]
 8000dec:	e7f2      	b.n	8000dd4 <csp_accept+0x8>

08000dee <csp_read>:
 8000dee:	2300      	movs	r3, #0
 8000df0:	b507      	push	{r0, r1, r2, lr}
 8000df2:	460a      	mov	r2, r1
 8000df4:	9301      	str	r3, [sp, #4]
 8000df6:	b918      	cbnz	r0, 8000e00 <csp_read+0x12>
 8000df8:	2000      	movs	r0, #0
 8000dfa:	b003      	add	sp, #12
 8000dfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e00:	7843      	ldrb	r3, [r0, #1]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d1f8      	bne.n	8000df8 <csp_read+0xa>
 8000e06:	a901      	add	r1, sp, #4
 8000e08:	68c0      	ldr	r0, [r0, #12]
 8000e0a:	f000 ff52 	bl	8001cb2 <csp_queue_dequeue>
 8000e0e:	2801      	cmp	r0, #1
 8000e10:	d1f2      	bne.n	8000df8 <csp_read+0xa>
 8000e12:	9801      	ldr	r0, [sp, #4]
 8000e14:	e7f1      	b.n	8000dfa <csp_read+0xc>

08000e16 <csp_send_direct>:
 8000e16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	b08b      	sub	sp, #44	; 0x2c
 8000e1e:	4617      	mov	r7, r2
 8000e20:	460d      	mov	r5, r1
 8000e22:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8000f54 <csp_send_direct+0x13e>
 8000e26:	b949      	cbnz	r1, 8000e3c <csp_send_direct+0x26>
 8000e28:	f898 3000 	ldrb.w	r3, [r8]
 8000e2c:	b11b      	cbz	r3, 8000e36 <csp_send_direct+0x20>
 8000e2e:	4942      	ldr	r1, [pc, #264]	; (8000f38 <csp_send_direct+0x122>)
 8000e30:	4628      	mov	r0, r5
 8000e32:	f7ff fde7 	bl	8000a04 <do_csp_debug>
 8000e36:	f06f 0009 	mvn.w	r0, #9
 8000e3a:	e07a      	b.n	8000f32 <csp_send_direct+0x11c>
 8000e3c:	b95a      	cbnz	r2, 8000e56 <csp_send_direct+0x40>
 8000e3e:	f898 3000 	ldrb.w	r3, [r8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f7      	beq.n	8000e36 <csp_send_direct+0x20>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f3c0 5204 	ubfx	r2, r0, #20, #5
 8000e4c:	493b      	ldr	r1, [pc, #236]	; (8000f3c <csp_send_direct+0x126>)
 8000e4e:	4638      	mov	r0, r7
 8000e50:	f7ff fdd8 	bl	8000a04 <do_csp_debug>
 8000e54:	e7ef      	b.n	8000e36 <csp_send_direct+0x20>
 8000e56:	f898 3004 	ldrb.w	r3, [r8, #4]
 8000e5a:	f3c0 6944 	ubfx	r9, r0, #25, #5
 8000e5e:	6816      	ldr	r6, [r2, #0]
 8000e60:	f3c0 5a04 	ubfx	sl, r0, #20, #5
 8000e64:	b1f3      	cbz	r3, 8000ea4 <csp_send_direct+0x8e>
 8000e66:	f3c0 2305 	ubfx	r3, r0, #8, #6
 8000e6a:	0f82      	lsrs	r2, r0, #30
 8000e6c:	b2c1      	uxtb	r1, r0
 8000e6e:	f3c0 3e85 	ubfx	lr, r0, #14, #6
 8000e72:	6830      	ldr	r0, [r6, #0]
 8000e74:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 8000e78:	9009      	str	r0, [sp, #36]	; 0x24
 8000e7a:	7938      	ldrb	r0, [r7, #4]
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	4653      	mov	r3, sl
 8000e80:	28ff      	cmp	r0, #255	; 0xff
 8000e82:	bf14      	ite	ne
 8000e84:	4683      	movne	fp, r0
 8000e86:	46d3      	moveq	fp, sl
 8000e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e8a:	f8cd e000 	str.w	lr, [sp]
 8000e8e:	f8cd b018 	str.w	fp, [sp, #24]
 8000e92:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8000e96:	e9cd c004 	strd	ip, r0, [sp, #16]
 8000e9a:	464a      	mov	r2, r9
 8000e9c:	4928      	ldr	r1, [pc, #160]	; (8000f40 <csp_send_direct+0x12a>)
 8000e9e:	2004      	movs	r0, #4
 8000ea0:	f7ff fdb0 	bl	8000a04 <do_csp_debug>
 8000ea4:	60ec      	str	r4, [r5, #12]
 8000ea6:	f7ff fed7 	bl	8000c58 <csp_get_address>
 8000eaa:	4582      	cmp	sl, r0
 8000eac:	d007      	beq.n	8000ebe <csp_send_direct+0xa8>
 8000eae:	f7ff fed3 	bl	8000c58 <csp_get_address>
 8000eb2:	4581      	cmp	r9, r0
 8000eb4:	d103      	bne.n	8000ebe <csp_send_direct+0xa8>
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	60ec      	str	r4, [r5, #12]
 8000eba:	f000 fa31 	bl	8001320 <csp_promisc_add>
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <csp_send_direct+0x12e>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	454b      	cmp	r3, r9
 8000ec4:	d124      	bne.n	8000f10 <csp_send_direct+0xfa>
 8000ec6:	0722      	lsls	r2, r4, #28
 8000ec8:	fa5f f984 	uxtb.w	r9, r4
 8000ecc:	d50a      	bpl.n	8000ee4 <csp_send_direct+0xce>
 8000ece:	f898 3001 	ldrb.w	r3, [r8, #1]
 8000ed2:	b11b      	cbz	r3, 8000edc <csp_send_direct+0xc6>
 8000ed4:	491c      	ldr	r1, [pc, #112]	; (8000f48 <csp_send_direct+0x132>)
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fd94 	bl	8000a04 <do_csp_debug>
 8000edc:	69f3      	ldr	r3, [r6, #28]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	61f3      	str	r3, [r6, #28]
 8000ee2:	e7a8      	b.n	8000e36 <csp_send_direct+0x20>
 8000ee4:	f019 0f01 	tst.w	r9, #1
 8000ee8:	d00a      	beq.n	8000f00 <csp_send_direct+0xea>
 8000eea:	f898 3001 	ldrb.w	r3, [r8, #1]
 8000eee:	b11b      	cbz	r3, 8000ef8 <csp_send_direct+0xe2>
 8000ef0:	4916      	ldr	r1, [pc, #88]	; (8000f4c <csp_send_direct+0x136>)
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f7ff fd86 	bl	8000a04 <do_csp_debug>
 8000ef8:	f029 0901 	bic.w	r9, r9, #1
 8000efc:	f369 0407 	bfi	r4, r9, #0, #8
 8000f00:	0763      	lsls	r3, r4, #29
 8000f02:	d505      	bpl.n	8000f10 <csp_send_direct+0xfa>
 8000f04:	f898 3001 	ldrb.w	r3, [r8, #1]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0e7      	beq.n	8000edc <csp_send_direct+0xc6>
 8000f0c:	4910      	ldr	r1, [pc, #64]	; (8000f50 <csp_send_direct+0x13a>)
 8000f0e:	e7e2      	b.n	8000ed6 <csp_send_direct+0xc0>
 8000f10:	8a33      	ldrh	r3, [r6, #16]
 8000f12:	896c      	ldrh	r4, [r5, #10]
 8000f14:	b10b      	cbz	r3, 8000f1a <csp_send_direct+0x104>
 8000f16:	429c      	cmp	r4, r3
 8000f18:	d8e0      	bhi.n	8000edc <csp_send_direct+0xc6>
 8000f1a:	68f3      	ldr	r3, [r6, #12]
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	4638      	mov	r0, r7
 8000f20:	4798      	blx	r3
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d1da      	bne.n	8000edc <csp_send_direct+0xc6>
 8000f26:	6972      	ldr	r2, [r6, #20]
 8000f28:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000f2a:	3201      	adds	r2, #1
 8000f2c:	4423      	add	r3, r4
 8000f2e:	6172      	str	r2, [r6, #20]
 8000f30:	6333      	str	r3, [r6, #48]	; 0x30
 8000f32:	b00b      	add	sp, #44	; 0x2c
 8000f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f38:	0800e933 	.word	0x0800e933
 8000f3c:	0800e95b 	.word	0x0800e95b
 8000f40:	0800e97a 	.word	0x0800e97a
 8000f44:	20000288 	.word	0x20000288
 8000f48:	0800e9be 	.word	0x0800e9be
 8000f4c:	0800ea1d 	.word	0x0800ea1d
 8000f50:	0800ea83 	.word	0x0800ea83
 8000f54:	20000000 	.word	0x20000000

08000f58 <csp_send>:
 8000f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	460d      	mov	r5, r1
 8000f5e:	4604      	mov	r4, r0
 8000f60:	b118      	cbz	r0, 8000f6a <csp_send+0x12>
 8000f62:	b111      	cbz	r1, 8000f6a <csp_send+0x12>
 8000f64:	7842      	ldrb	r2, [r0, #1]
 8000f66:	2a01      	cmp	r2, #1
 8000f68:	d009      	beq.n	8000f7e <csp_send+0x26>
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <csp_send+0x48>)
 8000f6c:	7818      	ldrb	r0, [r3, #0]
 8000f6e:	b120      	cbz	r0, 8000f7a <csp_send+0x22>
 8000f70:	2000      	movs	r0, #0
 8000f72:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <csp_send+0x4c>)
 8000f74:	f7ff fd46 	bl	8000a04 <do_csp_debug>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	b003      	add	sp, #12
 8000f7c:	bd30      	pop	{r4, r5, pc}
 8000f7e:	8940      	ldrh	r0, [r0, #10]
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	f3c0 1004 	ubfx	r0, r0, #4, #5
 8000f86:	f000 fdd1 	bl	8001b2c <csp_rtable_find_route>
 8000f8a:	9b01      	ldr	r3, [sp, #4]
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	4629      	mov	r1, r5
 8000f90:	68a0      	ldr	r0, [r4, #8]
 8000f92:	f7ff ff40 	bl	8000e16 <csp_send_direct>
 8000f96:	fab0 f080 	clz	r0, r0
 8000f9a:	0940      	lsrs	r0, r0, #5
 8000f9c:	e7ed      	b.n	8000f7a <csp_send+0x22>
 8000f9e:	bf00      	nop
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	0800eae7 	.word	0x0800eae7

08000fa8 <csp_send_prio>:
 8000fa8:	b430      	push	{r4, r5}
 8000faa:	460c      	mov	r4, r1
 8000fac:	4611      	mov	r1, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	7ae5      	ldrb	r5, [r4, #11]
 8000fb2:	f360 1587 	bfi	r5, r0, #6, #2
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	72e5      	strb	r5, [r4, #11]
 8000fba:	bc30      	pop	{r4, r5}
 8000fbc:	f7ff bfcc 	b.w	8000f58 <csp_send>

08000fc0 <csp_transaction_persistent>:
 8000fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fc4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000fc6:	4607      	mov	r7, r0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	4688      	mov	r8, r1
 8000fcc:	42b3      	cmp	r3, r6
 8000fce:	4691      	mov	r9, r2
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	bfb8      	it	lt
 8000fd4:	4630      	movlt	r0, r6
 8000fd6:	f7ff f97f 	bl	80002d8 <csp_buffer_get>
 8000fda:	4605      	mov	r5, r0
 8000fdc:	b918      	cbnz	r0, 8000fe6 <csp_transaction_persistent+0x26>
 8000fde:	2400      	movs	r4, #0
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fe6:	2c00      	cmp	r4, #0
 8000fe8:	dd07      	ble.n	8000ffa <csp_transaction_persistent+0x3a>
 8000fea:	f1b9 0f00 	cmp.w	r9, #0
 8000fee:	d004      	beq.n	8000ffa <csp_transaction_persistent+0x3a>
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	4649      	mov	r1, r9
 8000ff4:	3010      	adds	r0, #16
 8000ff6:	f00a ff98 	bl	800bf2a <memcpy>
 8000ffa:	816c      	strh	r4, [r5, #10]
 8000ffc:	4642      	mov	r2, r8
 8000ffe:	4629      	mov	r1, r5
 8001000:	4638      	mov	r0, r7
 8001002:	f7ff ffa9 	bl	8000f58 <csp_send>
 8001006:	4604      	mov	r4, r0
 8001008:	b918      	cbnz	r0, 8001012 <csp_transaction_persistent+0x52>
 800100a:	4628      	mov	r0, r5
 800100c:	f7ff f9ca 	bl	80003a4 <csp_buffer_free>
 8001010:	e7e6      	b.n	8000fe0 <csp_transaction_persistent+0x20>
 8001012:	b1f6      	cbz	r6, 8001052 <csp_transaction_persistent+0x92>
 8001014:	4641      	mov	r1, r8
 8001016:	4638      	mov	r0, r7
 8001018:	f7ff fee9 	bl	8000dee <csp_read>
 800101c:	4605      	mov	r5, r0
 800101e:	2800      	cmp	r0, #0
 8001020:	d0dd      	beq.n	8000fde <csp_transaction_persistent+0x1e>
 8001022:	1c73      	adds	r3, r6, #1
 8001024:	8942      	ldrh	r2, [r0, #10]
 8001026:	d00d      	beq.n	8001044 <csp_transaction_persistent+0x84>
 8001028:	42b2      	cmp	r2, r6
 800102a:	d00b      	beq.n	8001044 <csp_transaction_persistent+0x84>
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <csp_transaction_persistent+0x98>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b123      	cbz	r3, 800103c <csp_transaction_persistent+0x7c>
 8001032:	4633      	mov	r3, r6
 8001034:	4909      	ldr	r1, [pc, #36]	; (800105c <csp_transaction_persistent+0x9c>)
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff fce4 	bl	8000a04 <do_csp_debug>
 800103c:	4628      	mov	r0, r5
 800103e:	f7ff f9b1 	bl	80003a4 <csp_buffer_free>
 8001042:	e7cc      	b.n	8000fde <csp_transaction_persistent+0x1e>
 8001044:	f105 0110 	add.w	r1, r5, #16
 8001048:	9808      	ldr	r0, [sp, #32]
 800104a:	f00a ff6e 	bl	800bf2a <memcpy>
 800104e:	896c      	ldrh	r4, [r5, #10]
 8001050:	e7db      	b.n	800100a <csp_transaction_persistent+0x4a>
 8001052:	2401      	movs	r4, #1
 8001054:	e7c4      	b.n	8000fe0 <csp_transaction_persistent+0x20>
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000
 800105c:	0800eb00 	.word	0x0800eb00

08001060 <csp_transaction_w_opts>:
 8001060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001062:	461d      	mov	r5, r3
 8001064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2300      	movs	r3, #0
 800106a:	f7ff fb92 	bl	8000792 <csp_connect>
 800106e:	4604      	mov	r4, r0
 8001070:	b178      	cbz	r0, 8001092 <csp_transaction_w_opts+0x32>
 8001072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001074:	4629      	mov	r1, r5
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	9b08      	ldr	r3, [sp, #32]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001080:	f7ff ff9e 	bl	8000fc0 <csp_transaction_persistent>
 8001084:	4605      	mov	r5, r0
 8001086:	4620      	mov	r0, r4
 8001088:	f7ff fb80 	bl	800078c <csp_close>
 800108c:	4628      	mov	r0, r5
 800108e:	b003      	add	sp, #12
 8001090:	bd30      	pop	{r4, r5, pc}
 8001092:	4605      	mov	r5, r0
 8001094:	e7fa      	b.n	800108c <csp_transaction_w_opts+0x2c>

08001096 <csp_recvfrom>:
 8001096:	b507      	push	{r0, r1, r2, lr}
 8001098:	460a      	mov	r2, r1
 800109a:	b150      	cbz	r0, 80010b2 <csp_recvfrom+0x1c>
 800109c:	6983      	ldr	r3, [r0, #24]
 800109e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80010a2:	d009      	beq.n	80010b8 <csp_recvfrom+0x22>
 80010a4:	2300      	movs	r3, #0
 80010a6:	a901      	add	r1, sp, #4
 80010a8:	6900      	ldr	r0, [r0, #16]
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	f000 fe01 	bl	8001cb2 <csp_queue_dequeue>
 80010b0:	9801      	ldr	r0, [sp, #4]
 80010b2:	b003      	add	sp, #12
 80010b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80010b8:	4618      	mov	r0, r3
 80010ba:	e7fa      	b.n	80010b2 <csp_recvfrom+0x1c>

080010bc <csp_sendto>:
 80010bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010be:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80010c2:	4606      	mov	r6, r0
 80010c4:	2700      	movs	r7, #0
 80010c6:	f014 0001 	ands.w	r0, r4, #1
 80010ca:	732f      	strb	r7, [r5, #12]
 80010cc:	d009      	beq.n	80010e2 <csp_sendto+0x26>
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <csp_sendto+0xa8>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b11b      	cbz	r3, 80010dc <csp_sendto+0x20>
 80010d4:	4924      	ldr	r1, [pc, #144]	; (8001168 <csp_sendto+0xac>)
 80010d6:	4638      	mov	r0, r7
 80010d8:	f7ff fc94 	bl	8000a04 <do_csp_debug>
 80010dc:	f06f 0001 	mvn.w	r0, #1
 80010e0:	e03e      	b.n	8001160 <csp_sendto+0xa4>
 80010e2:	f014 0704 	ands.w	r7, r4, #4
 80010e6:	d008      	beq.n	80010fa <csp_sendto+0x3e>
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <csp_sendto+0xa8>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b113      	cbz	r3, 80010f4 <csp_sendto+0x38>
 80010ee:	491f      	ldr	r1, [pc, #124]	; (800116c <csp_sendto+0xb0>)
 80010f0:	f7ff fc88 	bl	8000a04 <do_csp_debug>
 80010f4:	f06f 0004 	mvn.w	r0, #4
 80010f8:	e032      	b.n	8001160 <csp_sendto+0xa4>
 80010fa:	f014 0010 	ands.w	r0, r4, #16
 80010fe:	d006      	beq.n	800110e <csp_sendto+0x52>
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <csp_sendto+0xa8>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f5      	beq.n	80010f4 <csp_sendto+0x38>
 8001108:	4919      	ldr	r1, [pc, #100]	; (8001170 <csp_sendto+0xb4>)
 800110a:	4638      	mov	r0, r7
 800110c:	e7f0      	b.n	80010f0 <csp_sendto+0x34>
 800110e:	0664      	lsls	r4, r4, #25
 8001110:	d505      	bpl.n	800111e <csp_sendto+0x62>
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <csp_sendto+0xa8>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0ec      	beq.n	80010f4 <csp_sendto+0x38>
 800111a:	4916      	ldr	r1, [pc, #88]	; (8001174 <csp_sendto+0xb8>)
 800111c:	e7e8      	b.n	80010f0 <csp_sendto+0x34>
 800111e:	f003 043f 	and.w	r4, r3, #63	; 0x3f
 8001122:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001126:	f001 031f 	and.w	r3, r1, #31
 800112a:	7b28      	ldrb	r0, [r5, #12]
 800112c:	0224      	lsls	r4, r4, #8
 800112e:	ea44 3282 	orr.w	r2, r4, r2, lsl #14
 8001132:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <csp_sendto+0xbc>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
 8001142:	ea42 7386 	orr.w	r3, r2, r6, lsl #30
 8001146:	4303      	orrs	r3, r0
 8001148:	4608      	mov	r0, r1
 800114a:	60eb      	str	r3, [r5, #12]
 800114c:	f000 fcee 	bl	8001b2c <csp_rtable_find_route>
 8001150:	9b08      	ldr	r3, [sp, #32]
 8001152:	4602      	mov	r2, r0
 8001154:	4629      	mov	r1, r5
 8001156:	68e8      	ldr	r0, [r5, #12]
 8001158:	f7ff fe5d 	bl	8000e16 <csp_send_direct>
 800115c:	2800      	cmp	r0, #0
 800115e:	d1c9      	bne.n	80010f4 <csp_sendto+0x38>
 8001160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001162:	bf00      	nop
 8001164:	20000000 	.word	0x20000000
 8001168:	0800eb1c 	.word	0x0800eb1c
 800116c:	0800eb53 	.word	0x0800eb53
 8001170:	0800ebaa 	.word	0x0800ebaa
 8001174:	0800ebfd 	.word	0x0800ebfd
 8001178:	20000288 	.word	0x20000288

0800117c <csp_sendto_reply>:
 800117c:	b530      	push	{r4, r5, lr}
 800117e:	b085      	sub	sp, #20
 8001180:	b180      	cbz	r0, 80011a4 <csp_sendto_reply+0x28>
 8001182:	68c5      	ldr	r5, [r0, #12]
 8001184:	7b44      	ldrb	r4, [r0, #13]
 8001186:	7bc0      	ldrb	r0, [r0, #15]
 8001188:	9200      	str	r2, [sp, #0]
 800118a:	f004 023f 	and.w	r2, r4, #63	; 0x3f
 800118e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8001192:	f3c0 0144 	ubfx	r1, r0, #1, #5
 8001196:	f3c5 3385 	ubfx	r3, r5, #14, #6
 800119a:	0980      	lsrs	r0, r0, #6
 800119c:	f7ff ff8e 	bl	80010bc <csp_sendto>
 80011a0:	b005      	add	sp, #20
 80011a2:	bd30      	pop	{r4, r5, pc}
 80011a4:	f06f 0001 	mvn.w	r0, #1
 80011a8:	e7fa      	b.n	80011a0 <csp_sendto_reply+0x24>
 80011aa:	bf00      	nop

080011ac <csp_port_get_socket>:
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <csp_port_get_socket+0x30>)
 80011ae:	7cdb      	ldrb	r3, [r3, #19]
 80011b0:	4283      	cmp	r3, r0
 80011b2:	d310      	bcc.n	80011d6 <csp_port_get_socket+0x2a>
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <csp_port_get_socket+0x34>)
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 80011bc:	f812 0030 	ldrb.w	r0, [r2, r0, lsl #3]
 80011c0:	2801      	cmp	r0, #1
 80011c2:	d101      	bne.n	80011c8 <csp_port_get_socket+0x1c>
 80011c4:	6848      	ldr	r0, [r1, #4]
 80011c6:	4770      	bx	lr
 80011c8:	3301      	adds	r3, #1
 80011ca:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80011ce:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d0f6      	beq.n	80011c4 <csp_port_get_socket+0x18>
 80011d6:	2000      	movs	r0, #0
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000288 	.word	0x20000288
 80011e0:	200002a8 	.word	0x200002a8

080011e4 <csp_port_init>:
 80011e4:	b508      	push	{r3, lr}
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <csp_port_init+0x1c>)
 80011e8:	2108      	movs	r1, #8
 80011ea:	7cd8      	ldrb	r0, [r3, #19]
 80011ec:	3002      	adds	r0, #2
 80011ee:	f000 fd43 	bl	8001c78 <csp_calloc>
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <csp_port_init+0x20>)
 80011f4:	6018      	str	r0, [r3, #0]
 80011f6:	fab0 f080 	clz	r0, r0
 80011fa:	0940      	lsrs	r0, r0, #5
 80011fc:	4240      	negs	r0, r0
 80011fe:	bd08      	pop	{r3, pc}
 8001200:	20000288 	.word	0x20000288
 8001204:	200002a8 	.word	0x200002a8

08001208 <csp_port_free_resources>:
 8001208:	b510      	push	{r4, lr}
 800120a:	4c03      	ldr	r4, [pc, #12]	; (8001218 <csp_port_free_resources+0x10>)
 800120c:	6820      	ldr	r0, [r4, #0]
 800120e:	f000 fd43 	bl	8001c98 <csp_free>
 8001212:	2300      	movs	r3, #0
 8001214:	6023      	str	r3, [r4, #0]
 8001216:	bd10      	pop	{r4, pc}
 8001218:	200002a8 	.word	0x200002a8

0800121c <csp_listen>:
 800121c:	b510      	push	{r4, lr}
 800121e:	4604      	mov	r4, r0
 8001220:	4608      	mov	r0, r1
 8001222:	b154      	cbz	r4, 800123a <csp_listen+0x1e>
 8001224:	2104      	movs	r1, #4
 8001226:	f000 fd39 	bl	8001c9c <csp_queue_create>
 800122a:	6120      	str	r0, [r4, #16]
 800122c:	b140      	cbz	r0, 8001240 <csp_listen+0x24>
 800122e:	69a3      	ldr	r3, [r4, #24]
 8001230:	2000      	movs	r0, #0
 8001232:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001236:	61a3      	str	r3, [r4, #24]
 8001238:	bd10      	pop	{r4, pc}
 800123a:	f06f 0001 	mvn.w	r0, #1
 800123e:	e7fb      	b.n	8001238 <csp_listen+0x1c>
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	e7f8      	b.n	8001238 <csp_listen+0x1c>

08001246 <csp_bind>:
 8001246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001248:	460a      	mov	r2, r1
 800124a:	4604      	mov	r4, r0
 800124c:	b1f0      	cbz	r0, 800128c <csp_bind+0x46>
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <csp_bind+0x6e>)
 8001250:	29ff      	cmp	r1, #255	; 0xff
 8001252:	4919      	ldr	r1, [pc, #100]	; (80012b8 <csp_bind+0x72>)
 8001254:	7cdb      	ldrb	r3, [r3, #19]
 8001256:	d111      	bne.n	800127c <csp_bind+0x36>
 8001258:	3301      	adds	r3, #1
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4e17      	ldr	r6, [pc, #92]	; (80012bc <csp_bind+0x76>)
 800125e:	b217      	sxth	r7, r2
 8001260:	00d5      	lsls	r5, r2, #3
 8001262:	6833      	ldr	r3, [r6, #0]
 8001264:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8001268:	b19b      	cbz	r3, 8001292 <csp_bind+0x4c>
 800126a:	780b      	ldrb	r3, [r1, #0]
 800126c:	b11b      	cbz	r3, 8001276 <csp_bind+0x30>
 800126e:	4914      	ldr	r1, [pc, #80]	; (80012c0 <csp_bind+0x7a>)
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fbc7 	bl	8000a04 <do_csp_debug>
 8001276:	f06f 0003 	mvn.w	r0, #3
 800127a:	e019      	b.n	80012b0 <csp_bind+0x6a>
 800127c:	429a      	cmp	r2, r3
 800127e:	d9ed      	bls.n	800125c <csp_bind+0x16>
 8001280:	7809      	ldrb	r1, [r1, #0]
 8001282:	b119      	cbz	r1, 800128c <csp_bind+0x46>
 8001284:	490f      	ldr	r1, [pc, #60]	; (80012c4 <csp_bind+0x7e>)
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fbbc 	bl	8000a04 <do_csp_debug>
 800128c:	f06f 0001 	mvn.w	r0, #1
 8001290:	e00e      	b.n	80012b0 <csp_bind+0x6a>
 8001292:	788b      	ldrb	r3, [r1, #2]
 8001294:	b12b      	cbz	r3, 80012a2 <csp_bind+0x5c>
 8001296:	4613      	mov	r3, r2
 8001298:	490b      	ldr	r1, [pc, #44]	; (80012c8 <csp_bind+0x82>)
 800129a:	4622      	mov	r2, r4
 800129c:	2002      	movs	r0, #2
 800129e:	f7ff fbb1 	bl	8000a04 <do_csp_debug>
 80012a2:	6833      	ldr	r3, [r6, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	2000      	movs	r0, #0
 80012a8:	441d      	add	r5, r3
 80012aa:	606c      	str	r4, [r5, #4]
 80012ac:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 80012b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000288 	.word	0x20000288
 80012b8:	20000000 	.word	0x20000000
 80012bc:	200002a8 	.word	0x200002a8
 80012c0:	0800ecbb 	.word	0x0800ecbb
 80012c4:	0800ec52 	.word	0x0800ec52
 80012c8:	0800ecd5 	.word	0x0800ecd5

080012cc <csp_promisc_enable>:
 80012cc:	b510      	push	{r4, lr}
 80012ce:	4c08      	ldr	r4, [pc, #32]	; (80012f0 <csp_promisc_enable+0x24>)
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	b11b      	cbz	r3, 80012dc <csp_promisc_enable+0x10>
 80012d4:	2301      	movs	r3, #1
 80012d6:	2000      	movs	r0, #0
 80012d8:	6063      	str	r3, [r4, #4]
 80012da:	bd10      	pop	{r4, pc}
 80012dc:	2104      	movs	r1, #4
 80012de:	f000 fcdd 	bl	8001c9c <csp_queue_create>
 80012e2:	6020      	str	r0, [r4, #0]
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d1f5      	bne.n	80012d4 <csp_promisc_enable+0x8>
 80012e8:	f06f 0001 	mvn.w	r0, #1
 80012ec:	e7f5      	b.n	80012da <csp_promisc_enable+0xe>
 80012ee:	bf00      	nop
 80012f0:	200002ac 	.word	0x200002ac

080012f4 <csp_promisc_disable>:
 80012f4:	4b01      	ldr	r3, [pc, #4]	; (80012fc <csp_promisc_disable+0x8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	4770      	bx	lr
 80012fc:	200002ac 	.word	0x200002ac

08001300 <csp_promisc_read>:
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <csp_promisc_read+0x1c>)
 8001302:	b507      	push	{r0, r1, r2, lr}
 8001304:	4602      	mov	r2, r0
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	b128      	cbz	r0, 8001316 <csp_promisc_read+0x16>
 800130a:	2300      	movs	r3, #0
 800130c:	a901      	add	r1, sp, #4
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	f000 fccf 	bl	8001cb2 <csp_queue_dequeue>
 8001314:	9801      	ldr	r0, [sp, #4]
 8001316:	b003      	add	sp, #12
 8001318:	f85d fb04 	ldr.w	pc, [sp], #4
 800131c:	200002ac 	.word	0x200002ac

08001320 <csp_promisc_add>:
 8001320:	b513      	push	{r0, r1, r4, lr}
 8001322:	4c0e      	ldr	r4, [pc, #56]	; (800135c <csp_promisc_add+0x3c>)
 8001324:	6863      	ldr	r3, [r4, #4]
 8001326:	b1b3      	cbz	r3, 8001356 <csp_promisc_add+0x36>
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	b1a3      	cbz	r3, 8001356 <csp_promisc_add+0x36>
 800132c:	f7ff f886 	bl	800043c <csp_buffer_clone>
 8001330:	9001      	str	r0, [sp, #4]
 8001332:	b180      	cbz	r0, 8001356 <csp_promisc_add+0x36>
 8001334:	2200      	movs	r2, #0
 8001336:	a901      	add	r1, sp, #4
 8001338:	6820      	ldr	r0, [r4, #0]
 800133a:	f000 fcb4 	bl	8001ca6 <csp_queue_enqueue>
 800133e:	2801      	cmp	r0, #1
 8001340:	d009      	beq.n	8001356 <csp_promisc_add+0x36>
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <csp_promisc_add+0x40>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b11b      	cbz	r3, 8001350 <csp_promisc_add+0x30>
 8001348:	4906      	ldr	r1, [pc, #24]	; (8001364 <csp_promisc_add+0x44>)
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fb5a 	bl	8000a04 <do_csp_debug>
 8001350:	9801      	ldr	r0, [sp, #4]
 8001352:	f7ff f827 	bl	80003a4 <csp_buffer_free>
 8001356:	b002      	add	sp, #8
 8001358:	bd10      	pop	{r4, pc}
 800135a:	bf00      	nop
 800135c:	200002ac 	.word	0x200002ac
 8001360:	20000000 	.word	0x20000000
 8001364:	0800ecf2 	.word	0x0800ecf2

08001368 <csp_qfifo_init>:
 8001368:	b510      	push	{r4, lr}
 800136a:	4c08      	ldr	r4, [pc, #32]	; (800138c <csp_qfifo_init+0x24>)
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	b953      	cbnz	r3, 8001386 <csp_qfifo_init+0x1e>
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <csp_qfifo_init+0x28>)
 8001372:	2108      	movs	r1, #8
 8001374:	7c98      	ldrb	r0, [r3, #18]
 8001376:	f000 fc91 	bl	8001c9c <csp_queue_create>
 800137a:	6020      	str	r0, [r4, #0]
 800137c:	fab0 f080 	clz	r0, r0
 8001380:	0940      	lsrs	r0, r0, #5
 8001382:	4240      	negs	r0, r0
 8001384:	bd10      	pop	{r4, pc}
 8001386:	2000      	movs	r0, #0
 8001388:	e7fc      	b.n	8001384 <csp_qfifo_init+0x1c>
 800138a:	bf00      	nop
 800138c:	200002b4 	.word	0x200002b4
 8001390:	20000288 	.word	0x20000288

08001394 <csp_qfifo_free_resources>:
 8001394:	b510      	push	{r4, lr}
 8001396:	4c04      	ldr	r4, [pc, #16]	; (80013a8 <csp_qfifo_free_resources+0x14>)
 8001398:	6820      	ldr	r0, [r4, #0]
 800139a:	b118      	cbz	r0, 80013a4 <csp_qfifo_free_resources+0x10>
 800139c:	f000 fc81 	bl	8001ca2 <csp_queue_remove>
 80013a0:	2300      	movs	r3, #0
 80013a2:	6023      	str	r3, [r4, #0]
 80013a4:	bd10      	pop	{r4, pc}
 80013a6:	bf00      	nop
 80013a8:	200002b4 	.word	0x200002b4

080013ac <csp_qfifo_read>:
 80013ac:	b508      	push	{r3, lr}
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <csp_qfifo_read+0x1c>)
 80013b0:	4601      	mov	r1, r0
 80013b2:	f04f 32ff 	mov.w	r2, #4294967295
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	f000 fc7b 	bl	8001cb2 <csp_queue_dequeue>
 80013bc:	2801      	cmp	r0, #1
 80013be:	bf14      	ite	ne
 80013c0:	f06f 0002 	mvnne.w	r0, #2
 80013c4:	2000      	moveq	r0, #0
 80013c6:	bd08      	pop	{r3, pc}
 80013c8:	200002b4 	.word	0x200002b4

080013cc <csp_qfifo_write>:
 80013cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013ce:	460e      	mov	r6, r1
 80013d0:	4615      	mov	r5, r2
 80013d2:	4604      	mov	r4, r0
 80013d4:	b950      	cbnz	r0, 80013ec <csp_qfifo_write+0x20>
 80013d6:	bb02      	cbnz	r2, 800141a <csp_qfifo_write+0x4e>
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <csp_qfifo_write+0x80>)
 80013da:	785b      	ldrb	r3, [r3, #1]
 80013dc:	b1eb      	cbz	r3, 800141a <csp_qfifo_write+0x4e>
 80013de:	491c      	ldr	r1, [pc, #112]	; (8001450 <csp_qfifo_write+0x84>)
 80013e0:	2001      	movs	r0, #1
 80013e2:	b002      	add	sp, #8
 80013e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80013e8:	f7ff bb0c 	b.w	8000a04 <do_csp_debug>
 80013ec:	b959      	cbnz	r1, 8001406 <csp_qfifo_write+0x3a>
 80013ee:	b9fa      	cbnz	r2, 8001430 <csp_qfifo_write+0x64>
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <csp_qfifo_write+0x80>)
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	b11b      	cbz	r3, 80013fe <csp_qfifo_write+0x32>
 80013f6:	4917      	ldr	r1, [pc, #92]	; (8001454 <csp_qfifo_write+0x88>)
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff fb03 	bl	8000a04 <do_csp_debug>
 80013fe:	4620      	mov	r0, r4
 8001400:	f7fe ffd0 	bl	80003a4 <csp_buffer_free>
 8001404:	e009      	b.n	800141a <csp_qfifo_write+0x4e>
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <csp_qfifo_write+0x8c>)
 8001408:	e9cd 1000 	strd	r1, r0, [sp]
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	4669      	mov	r1, sp
 8001410:	b92a      	cbnz	r2, 800141e <csp_qfifo_write+0x52>
 8001412:	f000 fc48 	bl	8001ca6 <csp_queue_enqueue>
 8001416:	2801      	cmp	r0, #1
 8001418:	d10e      	bne.n	8001438 <csp_qfifo_write+0x6c>
 800141a:	b002      	add	sp, #8
 800141c:	bd70      	pop	{r4, r5, r6, pc}
 800141e:	f000 fc45 	bl	8001cac <csp_queue_enqueue_isr>
 8001422:	2801      	cmp	r0, #1
 8001424:	d0f9      	beq.n	800141a <csp_qfifo_write+0x4e>
 8001426:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001428:	3301      	adds	r3, #1
 800142a:	6273      	str	r3, [r6, #36]	; 0x24
 800142c:	2d00      	cmp	r5, #0
 800142e:	d0e6      	beq.n	80013fe <csp_qfifo_write+0x32>
 8001430:	4620      	mov	r0, r4
 8001432:	f7fe ff99 	bl	8000368 <csp_buffer_free_isr>
 8001436:	e7f0      	b.n	800141a <csp_qfifo_write+0x4e>
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <csp_qfifo_write+0x80>)
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f2      	beq.n	8001426 <csp_qfifo_write+0x5a>
 8001440:	4906      	ldr	r1, [pc, #24]	; (800145c <csp_qfifo_write+0x90>)
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff fade 	bl	8000a04 <do_csp_debug>
 8001448:	e7ed      	b.n	8001426 <csp_qfifo_write+0x5a>
 800144a:	bf00      	nop
 800144c:	20000000 	.word	0x20000000
 8001450:	0800ed14 	.word	0x0800ed14
 8001454:	0800ed3b 	.word	0x0800ed3b
 8001458:	200002b4 	.word	0x200002b4
 800145c:	0800ed65 	.word	0x0800ed65

08001460 <csp_qfifo_wake_up>:
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <csp_qfifo_wake_up+0x18>)
 8001462:	b507      	push	{r0, r1, r2, lr}
 8001464:	2200      	movs	r2, #0
 8001466:	4669      	mov	r1, sp
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	e9cd 2200 	strd	r2, r2, [sp]
 800146e:	f000 fc1a 	bl	8001ca6 <csp_queue_enqueue>
 8001472:	b003      	add	sp, #12
 8001474:	f85d fb04 	ldr.w	pc, [sp], #4
 8001478:	200002b4 	.word	0x200002b4

0800147c <csp_route_security_check>:
 800147c:	b538      	push	{r3, r4, r5, lr}
 800147e:	7b13      	ldrb	r3, [r2, #12]
 8001480:	460d      	mov	r5, r1
 8001482:	f013 0401 	ands.w	r4, r3, #1
 8001486:	d013      	beq.n	80014b0 <csp_route_security_check+0x34>
 8001488:	8953      	ldrh	r3, [r2, #10]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d80c      	bhi.n	80014a8 <csp_route_security_check+0x2c>
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <csp_route_security_check+0x50>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b11b      	cbz	r3, 800149c <csp_route_security_check+0x20>
 8001494:	490e      	ldr	r1, [pc, #56]	; (80014d0 <csp_route_security_check+0x54>)
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff fab4 	bl	8000a04 <do_csp_debug>
 800149c:	6a2b      	ldr	r3, [r5, #32]
 800149e:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80014a2:	3301      	adds	r3, #1
 80014a4:	622b      	str	r3, [r5, #32]
 80014a6:	bd38      	pop	{r3, r4, r5, pc}
 80014a8:	3b04      	subs	r3, #4
 80014aa:	2000      	movs	r0, #0
 80014ac:	8153      	strh	r3, [r2, #10]
 80014ae:	e7fa      	b.n	80014a6 <csp_route_security_check+0x2a>
 80014b0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80014b4:	d0f7      	beq.n	80014a6 <csp_route_security_check+0x2a>
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <csp_route_security_check+0x50>)
 80014b8:	7858      	ldrb	r0, [r3, #1]
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d0f3      	beq.n	80014a6 <csp_route_security_check+0x2a>
 80014be:	2001      	movs	r0, #1
 80014c0:	4904      	ldr	r1, [pc, #16]	; (80014d4 <csp_route_security_check+0x58>)
 80014c2:	f7ff fa9f 	bl	8000a04 <do_csp_debug>
 80014c6:	4620      	mov	r0, r4
 80014c8:	e7ed      	b.n	80014a6 <csp_route_security_check+0x2a>
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000
 80014d0:	0800ed99 	.word	0x0800ed99
 80014d4:	0800edc5 	.word	0x0800edc5

080014d8 <csp_route_work>:
 80014d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014dc:	b08b      	sub	sp, #44	; 0x2c
 80014de:	a808      	add	r0, sp, #32
 80014e0:	f7ff ff64 	bl	80013ac <csp_qfifo_read>
 80014e4:	4607      	mov	r7, r0
 80014e6:	b128      	cbz	r0, 80014f4 <csp_route_work+0x1c>
 80014e8:	f06f 0702 	mvn.w	r7, #2
 80014ec:	4638      	mov	r0, r7
 80014ee:	b00b      	add	sp, #44	; 0x2c
 80014f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80014f6:	9107      	str	r1, [sp, #28]
 80014f8:	2900      	cmp	r1, #0
 80014fa:	d0f5      	beq.n	80014e8 <csp_route_work+0x10>
 80014fc:	4e6e      	ldr	r6, [pc, #440]	; (80016b8 <csp_route_work+0x1e0>)
 80014fe:	7933      	ldrb	r3, [r6, #4]
 8001500:	b1db      	cbz	r3, 800153a <csp_route_work+0x62>
 8001502:	9808      	ldr	r0, [sp, #32]
 8001504:	89cb      	ldrh	r3, [r1, #14]
 8001506:	6800      	ldr	r0, [r0, #0]
 8001508:	7bca      	ldrb	r2, [r1, #15]
 800150a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800150e:	9005      	str	r0, [sp, #20]
 8001510:	8948      	ldrh	r0, [r1, #10]
 8001512:	f3c2 0244 	ubfx	r2, r2, #1, #5
 8001516:	9004      	str	r0, [sp, #16]
 8001518:	7b08      	ldrb	r0, [r1, #12]
 800151a:	9003      	str	r0, [sp, #12]
 800151c:	7bc8      	ldrb	r0, [r1, #15]
 800151e:	0980      	lsrs	r0, r0, #6
 8001520:	9002      	str	r0, [sp, #8]
 8001522:	7b48      	ldrb	r0, [r1, #13]
 8001524:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8001528:	9001      	str	r0, [sp, #4]
 800152a:	2004      	movs	r0, #4
 800152c:	68c9      	ldr	r1, [r1, #12]
 800152e:	f3c1 3185 	ubfx	r1, r1, #14, #6
 8001532:	9100      	str	r1, [sp, #0]
 8001534:	4961      	ldr	r1, [pc, #388]	; (80016bc <csp_route_work+0x1e4>)
 8001536:	f7ff fa65 	bl	8000a04 <do_csp_debug>
 800153a:	9807      	ldr	r0, [sp, #28]
 800153c:	f7ff fef0 	bl	8001320 <csp_promisc_add>
 8001540:	9c08      	ldr	r4, [sp, #32]
 8001542:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80016dc <csp_route_work+0x204>
 8001546:	69a3      	ldr	r3, [r4, #24]
 8001548:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800154a:	3301      	adds	r3, #1
 800154c:	61a3      	str	r3, [r4, #24]
 800154e:	9b07      	ldr	r3, [sp, #28]
 8001550:	8959      	ldrh	r1, [r3, #10]
 8001552:	440a      	add	r2, r1
 8001554:	f898 1000 	ldrb.w	r1, [r8]
 8001558:	6362      	str	r2, [r4, #52]	; 0x34
 800155a:	89da      	ldrh	r2, [r3, #14]
 800155c:	f3c2 1004 	ubfx	r0, r2, #4, #5
 8001560:	4288      	cmp	r0, r1
 8001562:	d01f      	beq.n	80015a4 <csp_route_work+0xcc>
 8001564:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001568:	f5b2 7ff8 	cmp.w	r2, #496	; 0x1f0
 800156c:	d01a      	beq.n	80015a4 <csp_route_work+0xcc>
 800156e:	f000 fadd 	bl	8001b2c <csp_rtable_find_route>
 8001572:	4602      	mov	r2, r0
 8001574:	b128      	cbz	r0, 8001582 <csp_route_work+0xaa>
 8001576:	6803      	ldr	r3, [r0, #0]
 8001578:	9908      	ldr	r1, [sp, #32]
 800157a:	428b      	cmp	r3, r1
 800157c:	d103      	bne.n	8001586 <csp_route_work+0xae>
 800157e:	7c9b      	ldrb	r3, [r3, #18]
 8001580:	b90b      	cbnz	r3, 8001586 <csp_route_work+0xae>
 8001582:	9807      	ldr	r0, [sp, #28]
 8001584:	e043      	b.n	800160e <csp_route_work+0x136>
 8001586:	9907      	ldr	r1, [sp, #28]
 8001588:	2300      	movs	r3, #0
 800158a:	68c8      	ldr	r0, [r1, #12]
 800158c:	f7ff fc43 	bl	8000e16 <csp_send_direct>
 8001590:	2800      	cmp	r0, #0
 8001592:	d0ab      	beq.n	80014ec <csp_route_work+0x14>
 8001594:	7873      	ldrb	r3, [r6, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f3      	beq.n	8001582 <csp_route_work+0xaa>
 800159a:	4949      	ldr	r1, [pc, #292]	; (80016c0 <csp_route_work+0x1e8>)
 800159c:	2001      	movs	r0, #1
 800159e:	f7ff fa31 	bl	8000a04 <do_csp_debug>
 80015a2:	e7ee      	b.n	8001582 <csp_route_work+0xaa>
 80015a4:	7b1a      	ldrb	r2, [r3, #12]
 80015a6:	f012 0504 	ands.w	r5, r2, #4
 80015aa:	d009      	beq.n	80015c0 <csp_route_work+0xe8>
 80015ac:	7833      	ldrb	r3, [r6, #0]
 80015ae:	b11b      	cbz	r3, 80015b8 <csp_route_work+0xe0>
 80015b0:	4944      	ldr	r1, [pc, #272]	; (80016c4 <csp_route_work+0x1ec>)
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fa26 	bl	8000a04 <do_csp_debug>
 80015b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015ba:	3301      	adds	r3, #1
 80015bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80015be:	e7e0      	b.n	8001582 <csp_route_work+0xaa>
 80015c0:	f012 0008 	ands.w	r0, r2, #8
 80015c4:	d005      	beq.n	80015d2 <csp_route_work+0xfa>
 80015c6:	7833      	ldrb	r3, [r6, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f5      	beq.n	80015b8 <csp_route_work+0xe0>
 80015cc:	493e      	ldr	r1, [pc, #248]	; (80016c8 <csp_route_work+0x1f0>)
 80015ce:	4628      	mov	r0, r5
 80015d0:	e7f0      	b.n	80015b4 <csp_route_work+0xdc>
 80015d2:	f012 0902 	ands.w	r9, r2, #2
 80015d6:	d008      	beq.n	80015ea <csp_route_work+0x112>
 80015d8:	7833      	ldrb	r3, [r6, #0]
 80015da:	b113      	cbz	r3, 80015e2 <csp_route_work+0x10a>
 80015dc:	493b      	ldr	r1, [pc, #236]	; (80016cc <csp_route_work+0x1f4>)
 80015de:	f7ff fa11 	bl	8000a04 <do_csp_debug>
 80015e2:	6a23      	ldr	r3, [r4, #32]
 80015e4:	3301      	adds	r3, #1
 80015e6:	6223      	str	r3, [r4, #32]
 80015e8:	e7cb      	b.n	8001582 <csp_route_work+0xaa>
 80015ea:	68d8      	ldr	r0, [r3, #12]
 80015ec:	f3c0 3085 	ubfx	r0, r0, #14, #6
 80015f0:	f7ff fddc 	bl	80011ac <csp_port_get_socket>
 80015f4:	4605      	mov	r5, r0
 80015f6:	b968      	cbnz	r0, 8001614 <csp_route_work+0x13c>
 80015f8:	9b07      	ldr	r3, [sp, #28]
 80015fa:	4935      	ldr	r1, [pc, #212]	; (80016d0 <csp_route_work+0x1f8>)
 80015fc:	68d8      	ldr	r0, [r3, #12]
 80015fe:	f7ff f805 	bl	800060c <csp_conn_find>
 8001602:	9a07      	ldr	r2, [sp, #28]
 8001604:	4604      	mov	r4, r0
 8001606:	2800      	cmp	r0, #0
 8001608:	d14e      	bne.n	80016a8 <csp_route_work+0x1d0>
 800160a:	b9d5      	cbnz	r5, 8001642 <csp_route_work+0x16a>
 800160c:	4610      	mov	r0, r2
 800160e:	f7fe fec9 	bl	80003a4 <csp_buffer_free>
 8001612:	e76b      	b.n	80014ec <csp_route_work+0x14>
 8001614:	6980      	ldr	r0, [r0, #24]
 8001616:	05c3      	lsls	r3, r0, #23
 8001618:	d5ee      	bpl.n	80015f8 <csp_route_work+0x120>
 800161a:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 800161e:	f7ff ff2d 	bl	800147c <csp_route_security_check>
 8001622:	2800      	cmp	r0, #0
 8001624:	dbad      	blt.n	8001582 <csp_route_work+0xaa>
 8001626:	464a      	mov	r2, r9
 8001628:	a907      	add	r1, sp, #28
 800162a:	6928      	ldr	r0, [r5, #16]
 800162c:	f000 fb3b 	bl	8001ca6 <csp_queue_enqueue>
 8001630:	2801      	cmp	r0, #1
 8001632:	f43f af5b 	beq.w	80014ec <csp_route_work+0x14>
 8001636:	7833      	ldrb	r3, [r6, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0a2      	beq.n	8001582 <csp_route_work+0xaa>
 800163c:	4925      	ldr	r1, [pc, #148]	; (80016d4 <csp_route_work+0x1fc>)
 800163e:	4648      	mov	r0, r9
 8001640:	e7ad      	b.n	800159e <csp_route_work+0xc6>
 8001642:	9908      	ldr	r1, [sp, #32]
 8001644:	69a8      	ldr	r0, [r5, #24]
 8001646:	f7ff ff19 	bl	800147c <csp_route_security_check>
 800164a:	2800      	cmp	r0, #0
 800164c:	db99      	blt.n	8001582 <csp_route_work+0xaa>
 800164e:	9a07      	ldr	r2, [sp, #28]
 8001650:	68d0      	ldr	r0, [r2, #12]
 8001652:	7b13      	ldrb	r3, [r2, #12]
 8001654:	f3c0 3185 	ubfx	r1, r0, #14, #6
 8001658:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800165c:	7b51      	ldrb	r1, [r2, #13]
 800165e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001662:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8001666:	7bd1      	ldrb	r1, [r2, #15]
 8001668:	f3c1 0244 	ubfx	r2, r1, #1, #5
 800166c:	0989      	lsrs	r1, r1, #6
 800166e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001672:	f898 2000 	ldrb.w	r2, [r8]
 8001676:	f002 021f 	and.w	r2, r2, #31
 800167a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800167e:	ea43 7181 	orr.w	r1, r3, r1, lsl #30
 8001682:	f7ff f835 	bl	80006f0 <csp_conn_new>
 8001686:	4604      	mov	r4, r0
 8001688:	b928      	cbnz	r0, 8001696 <csp_route_work+0x1be>
 800168a:	7833      	ldrb	r3, [r6, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	f43f af78 	beq.w	8001582 <csp_route_work+0xaa>
 8001692:	4911      	ldr	r1, [pc, #68]	; (80016d8 <csp_route_work+0x200>)
 8001694:	e783      	b.n	800159e <csp_route_work+0xc6>
 8001696:	692b      	ldr	r3, [r5, #16]
 8001698:	6103      	str	r3, [r0, #16]
 800169a:	69ab      	ldr	r3, [r5, #24]
 800169c:	6183      	str	r3, [r0, #24]
 800169e:	9907      	ldr	r1, [sp, #28]
 80016a0:	4620      	mov	r0, r4
 80016a2:	f000 faa9 	bl	8001bf8 <csp_udp_new_packet>
 80016a6:	e721      	b.n	80014ec <csp_route_work+0x14>
 80016a8:	9908      	ldr	r1, [sp, #32]
 80016aa:	6980      	ldr	r0, [r0, #24]
 80016ac:	f7ff fee6 	bl	800147c <csp_route_security_check>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	daf4      	bge.n	800169e <csp_route_work+0x1c6>
 80016b4:	e765      	b.n	8001582 <csp_route_work+0xaa>
 80016b6:	bf00      	nop
 80016b8:	20000000 	.word	0x20000000
 80016bc:	0800ee1e 	.word	0x0800ee1e
 80016c0:	0800ee5e 	.word	0x0800ee5e
 80016c4:	0800ee74 	.word	0x0800ee74
 80016c8:	0800eed1 	.word	0x0800eed1
 80016cc:	0800ef29 	.word	0x0800ef29
 80016d0:	3fffff00 	.word	0x3fffff00
 80016d4:	0800ef7a 	.word	0x0800ef7a
 80016d8:	0800ef96 	.word	0x0800ef96
 80016dc:	20000288 	.word	0x20000288

080016e0 <csp_task_router>:
 80016e0:	b508      	push	{r3, lr}
 80016e2:	f04f 30ff 	mov.w	r0, #4294967295
 80016e6:	f7ff fef7 	bl	80014d8 <csp_route_work>
 80016ea:	e7fa      	b.n	80016e2 <csp_task_router+0x2>

080016ec <csp_route_start_task>:
 80016ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80016ee:	2500      	movs	r5, #0
 80016f0:	4602      	mov	r2, r0
 80016f2:	480a      	ldr	r0, [pc, #40]	; (800171c <csp_route_start_task+0x30>)
 80016f4:	462b      	mov	r3, r5
 80016f6:	e9cd 1500 	strd	r1, r5, [sp]
 80016fa:	4909      	ldr	r1, [pc, #36]	; (8001720 <csp_route_start_task+0x34>)
 80016fc:	f000 fb80 	bl	8001e00 <csp_thread_create>
 8001700:	4604      	mov	r4, r0
 8001702:	b138      	cbz	r0, 8001714 <csp_route_start_task+0x28>
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <csp_route_start_task+0x38>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b123      	cbz	r3, 8001714 <csp_route_start_task+0x28>
 800170a:	4602      	mov	r2, r0
 800170c:	4906      	ldr	r1, [pc, #24]	; (8001728 <csp_route_start_task+0x3c>)
 800170e:	4628      	mov	r0, r5
 8001710:	f7ff f978 	bl	8000a04 <do_csp_debug>
 8001714:	4620      	mov	r0, r4
 8001716:	b003      	add	sp, #12
 8001718:	bd30      	pop	{r4, r5, pc}
 800171a:	bf00      	nop
 800171c:	080016e1 	.word	0x080016e1
 8001720:	0800efb4 	.word	0x0800efb4
 8001724:	20000000 	.word	0x20000000
 8001728:	0800efb8 	.word	0x0800efb8

0800172c <csp_can_pbuf_free>:
 800172c:	b510      	push	{r4, lr}
 800172e:	4604      	mov	r4, r0
 8001730:	68c0      	ldr	r0, [r0, #12]
 8001732:	b110      	cbz	r0, 800173a <csp_can_pbuf_free+0xe>
 8001734:	b949      	cbnz	r1, 800174a <csp_can_pbuf_free+0x1e>
 8001736:	f7fe fe35 	bl	80003a4 <csp_buffer_free>
 800173a:	2000      	movs	r0, #0
 800173c:	60e0      	str	r0, [r4, #12]
 800173e:	8020      	strh	r0, [r4, #0]
 8001740:	60a0      	str	r0, [r4, #8]
 8001742:	6160      	str	r0, [r4, #20]
 8001744:	6060      	str	r0, [r4, #4]
 8001746:	7420      	strb	r0, [r4, #16]
 8001748:	bd10      	pop	{r4, pc}
 800174a:	f7fe fe0d 	bl	8000368 <csp_buffer_free_isr>
 800174e:	e7f4      	b.n	800173a <csp_can_pbuf_free+0xe>

08001750 <csp_can_pbuf_new>:
 8001750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001754:	4680      	mov	r8, r0
 8001756:	460f      	mov	r7, r1
 8001758:	b1f1      	cbz	r1, 8001798 <csp_can_pbuf_new+0x48>
 800175a:	f000 fb6f 	bl	8001e3c <csp_get_ms_isr>
 800175e:	4c13      	ldr	r4, [pc, #76]	; (80017ac <csp_can_pbuf_new+0x5c>)
 8001760:	4605      	mov	r5, r0
 8001762:	2600      	movs	r6, #0
 8001764:	46a1      	mov	r9, r4
 8001766:	7c23      	ldrb	r3, [r4, #16]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d108      	bne.n	800177e <csp_can_pbuf_new+0x2e>
 800176c:	6962      	ldr	r2, [r4, #20]
 800176e:	1aaa      	subs	r2, r5, r2
 8001770:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8001774:	d913      	bls.n	800179e <csp_can_pbuf_new+0x4e>
 8001776:	4639      	mov	r1, r7
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff ffd7 	bl	800172c <csp_can_pbuf_free>
 800177e:	7c22      	ldrb	r2, [r4, #16]
 8001780:	b96a      	cbnz	r2, 800179e <csp_can_pbuf_new+0x4e>
 8001782:	2318      	movs	r3, #24
 8001784:	2101      	movs	r1, #1
 8001786:	fb03 9306 	mla	r3, r3, r6, r9
 800178a:	4618      	mov	r0, r3
 800178c:	7419      	strb	r1, [r3, #16]
 800178e:	615d      	str	r5, [r3, #20]
 8001790:	e9c3 2801 	strd	r2, r8, [r3, #4]
 8001794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001798:	f000 fb4e 	bl	8001e38 <csp_get_ms>
 800179c:	e7df      	b.n	800175e <csp_can_pbuf_new+0xe>
 800179e:	3601      	adds	r6, #1
 80017a0:	3418      	adds	r4, #24
 80017a2:	2e05      	cmp	r6, #5
 80017a4:	d1df      	bne.n	8001766 <csp_can_pbuf_new+0x16>
 80017a6:	2000      	movs	r0, #0
 80017a8:	e7f4      	b.n	8001794 <csp_can_pbuf_new+0x44>
 80017aa:	bf00      	nop
 80017ac:	200002b8 	.word	0x200002b8

080017b0 <csp_can_pbuf_find>:
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	4c0e      	ldr	r4, [pc, #56]	; (80017ec <csp_can_pbuf_find+0x3c>)
 80017b4:	2500      	movs	r5, #0
 80017b6:	4626      	mov	r6, r4
 80017b8:	7c23      	ldrb	r3, [r4, #16]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10f      	bne.n	80017de <csp_can_pbuf_find+0x2e>
 80017be:	68a3      	ldr	r3, [r4, #8]
 80017c0:	4043      	eors	r3, r0
 80017c2:	420b      	tst	r3, r1
 80017c4:	d10b      	bne.n	80017de <csp_can_pbuf_find+0x2e>
 80017c6:	b13a      	cbz	r2, 80017d8 <csp_can_pbuf_find+0x28>
 80017c8:	f000 fb38 	bl	8001e3c <csp_get_ms_isr>
 80017cc:	2318      	movs	r3, #24
 80017ce:	fb03 6305 	mla	r3, r3, r5, r6
 80017d2:	6158      	str	r0, [r3, #20]
 80017d4:	4618      	mov	r0, r3
 80017d6:	bd70      	pop	{r4, r5, r6, pc}
 80017d8:	f000 fb2e 	bl	8001e38 <csp_get_ms>
 80017dc:	e7f6      	b.n	80017cc <csp_can_pbuf_find+0x1c>
 80017de:	3501      	adds	r5, #1
 80017e0:	3418      	adds	r4, #24
 80017e2:	2d05      	cmp	r5, #5
 80017e4:	d1e8      	bne.n	80017b8 <csp_can_pbuf_find+0x8>
 80017e6:	2000      	movs	r0, #0
 80017e8:	e7f5      	b.n	80017d6 <csp_can_pbuf_find+0x26>
 80017ea:	bf00      	nop
 80017ec:	200002b8 	.word	0x200002b8

080017f0 <csp_lo_tx>:
 80017f0:	b508      	push	{r3, lr}
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <csp_lo_tx+0x24>)
 80017f4:	4608      	mov	r0, r1
 80017f6:	89cb      	ldrh	r3, [r1, #14]
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80017fe:	4293      	cmp	r3, r2
 8001800:	d003      	beq.n	800180a <csp_lo_tx+0x1a>
 8001802:	f7fe fdcf 	bl	80003a4 <csp_buffer_free>
 8001806:	2000      	movs	r0, #0
 8001808:	bd08      	pop	{r3, pc}
 800180a:	2200      	movs	r2, #0
 800180c:	4902      	ldr	r1, [pc, #8]	; (8001818 <csp_lo_tx+0x28>)
 800180e:	f7ff fddd 	bl	80013cc <csp_qfifo_write>
 8001812:	e7f8      	b.n	8001806 <csp_lo_tx+0x16>
 8001814:	20000288 	.word	0x20000288
 8001818:	20000008 	.word	0x20000008

0800181c <csp_rtable_save_route>:
 800181c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001820:	461d      	mov	r5, r3
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b08a      	sub	sp, #40	; 0x28
 8001826:	4604      	mov	r4, r0
 8001828:	4688      	mov	r8, r1
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	4924      	ldr	r1, [pc, #144]	; (80018c0 <csp_rtable_save_route+0xa4>)
 800182e:	4616      	mov	r6, r2
 8001830:	f00a fe60 	bl	800c4f4 <strcasecmp>
 8001834:	2800      	cmp	r0, #0
 8001836:	d041      	beq.n	80018bc <csp_rtable_save_route+0xa0>
 8001838:	6862      	ldr	r2, [r4, #4]
 800183a:	f10d 0910 	add.w	r9, sp, #16
 800183e:	4f21      	ldr	r7, [pc, #132]	; (80018c4 <csp_rtable_save_route+0xa8>)
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <csp_rtable_save_route+0xac>)
 8001842:	2a00      	cmp	r2, #0
 8001844:	bf18      	it	ne
 8001846:	461f      	movne	r7, r3
 8001848:	2e05      	cmp	r6, #5
 800184a:	d02c      	beq.n	80018a6 <csp_rtable_save_route+0x8a>
 800184c:	4633      	mov	r3, r6
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <csp_rtable_save_route+0xb0>)
 8001850:	210a      	movs	r1, #10
 8001852:	4648      	mov	r0, r9
 8001854:	f00a fd88 	bl	800c368 <sniprintf>
 8001858:	792b      	ldrb	r3, [r5, #4]
 800185a:	f10d 0a1c 	add.w	sl, sp, #28
 800185e:	2bff      	cmp	r3, #255	; 0xff
 8001860:	d025      	beq.n	80018ae <csp_rtable_save_route+0x92>
 8001862:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <csp_rtable_save_route+0xb4>)
 8001864:	210a      	movs	r1, #10
 8001866:	4650      	mov	r0, sl
 8001868:	f00a fd7e 	bl	800c368 <sniprintf>
 800186c:	f8cd a00c 	str.w	sl, [sp, #12]
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	6825      	ldr	r5, [r4, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <csp_rtable_save_route+0xb8>)
 8001878:	f8cd 8000 	str.w	r8, [sp]
 800187c:	e9d4 0601 	ldrd	r0, r6, [r4, #4]
 8001880:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8001884:	1a36      	subs	r6, r6, r0
 8001886:	463b      	mov	r3, r7
 8001888:	4428      	add	r0, r5
 800188a:	4631      	mov	r1, r6
 800188c:	f00a fd6c 	bl	800c368 <sniprintf>
 8001890:	2800      	cmp	r0, #0
 8001892:	db01      	blt.n	8001898 <csp_rtable_save_route+0x7c>
 8001894:	42b0      	cmp	r0, r6
 8001896:	db0e      	blt.n	80018b6 <csp_rtable_save_route+0x9a>
 8001898:	f04f 33ff 	mov.w	r3, #4294967295
 800189c:	2000      	movs	r0, #0
 800189e:	60e3      	str	r3, [r4, #12]
 80018a0:	b00a      	add	sp, #40	; 0x28
 80018a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018a6:	2300      	movs	r3, #0
 80018a8:	f88d 3010 	strb.w	r3, [sp, #16]
 80018ac:	e7d4      	b.n	8001858 <csp_rtable_save_route+0x3c>
 80018ae:	2300      	movs	r3, #0
 80018b0:	f88d 301c 	strb.w	r3, [sp, #28]
 80018b4:	e7da      	b.n	800186c <csp_rtable_save_route+0x50>
 80018b6:	6863      	ldr	r3, [r4, #4]
 80018b8:	4418      	add	r0, r3
 80018ba:	6060      	str	r0, [r4, #4]
 80018bc:	2001      	movs	r0, #1
 80018be:	e7ef      	b.n	80018a0 <csp_rtable_save_route+0x84>
 80018c0:	0800efdf 	.word	0x0800efdf
 80018c4:	0800e7c0 	.word	0x0800e7c0
 80018c8:	0800efe4 	.word	0x0800efe4
 80018cc:	0800efe6 	.word	0x0800efe6
 80018d0:	0800f050 	.word	0x0800f050
 80018d4:	0800efea 	.word	0x0800efea

080018d8 <csp_rtable_print_route>:
 80018d8:	b507      	push	{r0, r1, r2, lr}
 80018da:	7918      	ldrb	r0, [r3, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	28ff      	cmp	r0, #255	; 0xff
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	d106      	bne.n	80018f2 <csp_rtable_print_route+0x1a>
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <csp_rtable_print_route+0x24>)
 80018e6:	f00a fbcb 	bl	800c080 <iprintf>
 80018ea:	2001      	movs	r0, #1
 80018ec:	b003      	add	sp, #12
 80018ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80018f2:	9000      	str	r0, [sp, #0]
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <csp_rtable_print_route+0x28>)
 80018f6:	f00a fbc3 	bl	800c080 <iprintf>
 80018fa:	e7f6      	b.n	80018ea <csp_rtable_print_route+0x12>
 80018fc:	0800eff6 	.word	0x0800eff6
 8001900:	0800f001 	.word	0x0800f001

08001904 <csp_rtable_set>:
 8001904:	2820      	cmp	r0, #32
 8001906:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001908:	d01f      	beq.n	800194a <csp_rtable_set+0x46>
 800190a:	f1a0 0420 	sub.w	r4, r0, #32
 800190e:	b2e4      	uxtb	r4, r4
 8001910:	2cde      	cmp	r4, #222	; 0xde
 8001912:	d902      	bls.n	800191a <csp_rtable_set+0x16>
 8001914:	b10a      	cbz	r2, 800191a <csp_rtable_set+0x16>
 8001916:	2905      	cmp	r1, #5
 8001918:	d91b      	bls.n	8001952 <csp_rtable_set+0x4e>
 800191a:	4c10      	ldr	r4, [pc, #64]	; (800195c <csp_rtable_set+0x58>)
 800191c:	7824      	ldrb	r4, [r4, #0]
 800191e:	b15c      	cbz	r4, 8001938 <csp_rtable_set+0x34>
 8001920:	b18a      	cbz	r2, 8001946 <csp_rtable_set+0x42>
 8001922:	6814      	ldr	r4, [r2, #0]
 8001924:	e9cd 1200 	strd	r1, r2, [sp]
 8001928:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800192c:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <csp_rtable_set+0x5c>)
 800192e:	4603      	mov	r3, r0
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <csp_rtable_set+0x60>)
 8001932:	2000      	movs	r0, #0
 8001934:	f7ff f866 	bl	8000a04 <do_csp_debug>
 8001938:	f06f 0001 	mvn.w	r0, #1
 800193c:	b004      	add	sp, #16
 800193e:	bd10      	pop	{r4, pc}
 8001940:	4611      	mov	r1, r2
 8001942:	4610      	mov	r0, r2
 8001944:	e7e9      	b.n	800191a <csp_rtable_set+0x16>
 8001946:	4c08      	ldr	r4, [pc, #32]	; (8001968 <csp_rtable_set+0x64>)
 8001948:	e7ec      	b.n	8001924 <csp_rtable_set+0x20>
 800194a:	2a00      	cmp	r2, #0
 800194c:	d0f8      	beq.n	8001940 <csp_rtable_set+0x3c>
 800194e:	2100      	movs	r1, #0
 8001950:	4608      	mov	r0, r1
 8001952:	b004      	add	sp, #16
 8001954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001958:	f000 b8fa 	b.w	8001b50 <csp_rtable_set_internal>
 800195c:	20000000 	.word	0x20000000
 8001960:	0800e29b 	.word	0x0800e29b
 8001964:	0800f00f 	.word	0x0800f00f
 8001968:	0800e7c0 	.word	0x0800e7c0

0800196c <csp_rtable_parse>:
 800196c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001970:	b08b      	sub	sp, #44	; 0x2c
 8001972:	4688      	mov	r8, r1
 8001974:	2164      	movs	r1, #100	; 0x64
 8001976:	4605      	mov	r5, r0
 8001978:	af02      	add	r7, sp, #8
 800197a:	f00a fe25 	bl	800c5c8 <strnlen>
 800197e:	f100 0308 	add.w	r3, r0, #8
 8001982:	4604      	mov	r4, r0
 8001984:	4629      	mov	r1, r5
 8001986:	f023 0307 	bic.w	r3, r3, #7
 800198a:	2500      	movs	r5, #0
 800198c:	4602      	mov	r2, r0
 800198e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8001ac8 <csp_rtable_parse+0x15c>
 8001992:	ebad 0d03 	sub.w	sp, sp, r3
 8001996:	f8df a134 	ldr.w	sl, [pc, #308]	; 8001acc <csp_rtable_parse+0x160>
 800199a:	f8df b134 	ldr.w	fp, [pc, #308]	; 8001ad0 <csp_rtable_parse+0x164>
 800199e:	ab02      	add	r3, sp, #8
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00a fdfe 	bl	800c5a2 <strncpy>
 80019a6:	463a      	mov	r2, r7
 80019a8:	5505      	strb	r5, [r0, r4]
 80019aa:	4941      	ldr	r1, [pc, #260]	; (8001ab0 <csp_rtable_parse+0x144>)
 80019ac:	f00a fe40 	bl	800c630 <strtok_r>
 80019b0:	4604      	mov	r4, r0
 80019b2:	2c00      	cmp	r4, #0
 80019b4:	d06f      	beq.n	8001a96 <csp_rtable_parse+0x12a>
 80019b6:	4620      	mov	r0, r4
 80019b8:	f000 fa52 	bl	8001e60 <strlen>
 80019bc:	2801      	cmp	r0, #1
 80019be:	d96a      	bls.n	8001a96 <csp_rtable_parse+0x12a>
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	f107 060c 	add.w	r6, r7, #12
 80019c8:	1d3a      	adds	r2, r7, #4
 80019ca:	4649      	mov	r1, r9
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4620      	mov	r0, r4
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	9601      	str	r6, [sp, #4]
 80019d6:	f00a fd1b 	bl	800c410 <siscanf>
 80019da:	2804      	cmp	r0, #4
 80019dc:	d01a      	beq.n	8001a14 <csp_rtable_parse+0xa8>
 80019de:	f107 0310 	add.w	r3, r7, #16
 80019e2:	1d3a      	adds	r2, r7, #4
 80019e4:	4651      	mov	r1, sl
 80019e6:	4620      	mov	r0, r4
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	f00a fd0f 	bl	800c410 <siscanf>
 80019f2:	2803      	cmp	r0, #3
 80019f4:	d102      	bne.n	80019fc <csp_rtable_parse+0x90>
 80019f6:	23ff      	movs	r3, #255	; 0xff
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e00b      	b.n	8001a14 <csp_rtable_parse+0xa8>
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	1d3a      	adds	r2, r7, #4
 8001a02:	4659      	mov	r1, fp
 8001a04:	4620      	mov	r0, r4
 8001a06:	9600      	str	r6, [sp, #0]
 8001a08:	f00a fd02 	bl	800c410 <siscanf>
 8001a0c:	2803      	cmp	r0, #3
 8001a0e:	d11e      	bne.n	8001a4e <csp_rtable_parse+0xe2>
 8001a10:	2305      	movs	r3, #5
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	2300      	movs	r3, #0
 8001a16:	f107 0010 	add.w	r0, r7, #16
 8001a1a:	77bb      	strb	r3, [r7, #30]
 8001a1c:	f7ff f882 	bl	8000b24 <csp_iflist_get_by_name>
 8001a20:	4602      	mov	r2, r0
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	281f      	cmp	r0, #31
 8001a26:	d806      	bhi.n	8001a36 <csp_rtable_parse+0xca>
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	2905      	cmp	r1, #5
 8001a2c:	d803      	bhi.n	8001a36 <csp_rtable_parse+0xca>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2bff      	cmp	r3, #255	; 0xff
 8001a32:	d800      	bhi.n	8001a36 <csp_rtable_parse+0xca>
 8001a34:	b9d2      	cbnz	r2, 8001a6c <csp_rtable_parse+0x100>
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <csp_rtable_parse+0x148>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b12b      	cbz	r3, 8001a48 <csp_rtable_parse+0xdc>
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <csp_rtable_parse+0x14c>)
 8001a40:	491e      	ldr	r1, [pc, #120]	; (8001abc <csp_rtable_parse+0x150>)
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7fe ffde 	bl	8000a04 <do_csp_debug>
 8001a48:	f06f 0601 	mvn.w	r6, #1
 8001a4c:	e022      	b.n	8001a94 <csp_rtable_parse+0x128>
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	1d3a      	adds	r2, r7, #4
 8001a54:	491a      	ldr	r1, [pc, #104]	; (8001ac0 <csp_rtable_parse+0x154>)
 8001a56:	4620      	mov	r0, r4
 8001a58:	f00a fcda 	bl	800c410 <siscanf>
 8001a5c:	2802      	cmp	r0, #2
 8001a5e:	d102      	bne.n	8001a66 <csp_rtable_parse+0xfa>
 8001a60:	2305      	movs	r3, #5
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	e7c7      	b.n	80019f6 <csp_rtable_parse+0x8a>
 8001a66:	2300      	movs	r3, #0
 8001a68:	743b      	strb	r3, [r7, #16]
 8001a6a:	e7d3      	b.n	8001a14 <csp_rtable_parse+0xa8>
 8001a6c:	f1b8 0f00 	cmp.w	r8, #0
 8001a70:	d116      	bne.n	8001aa0 <csp_rtable_parse+0x134>
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	b2c9      	uxtb	r1, r1
 8001a76:	b2c0      	uxtb	r0, r0
 8001a78:	f7ff ff44 	bl	8001904 <csp_rtable_set>
 8001a7c:	4606      	mov	r6, r0
 8001a7e:	b178      	cbz	r0, 8001aa0 <csp_rtable_parse+0x134>
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <csp_rtable_parse+0x148>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b133      	cbz	r3, 8001a94 <csp_rtable_parse+0x128>
 8001a86:	9000      	str	r0, [sp, #0]
 8001a88:	4623      	mov	r3, r4
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <csp_rtable_parse+0x14c>)
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <csp_rtable_parse+0x158>)
 8001a90:	f7fe ffb8 	bl	8000a04 <do_csp_debug>
 8001a94:	4635      	mov	r5, r6
 8001a96:	4628      	mov	r0, r5
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aa0:	463a      	mov	r2, r7
 8001aa2:	4903      	ldr	r1, [pc, #12]	; (8001ab0 <csp_rtable_parse+0x144>)
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	3501      	adds	r5, #1
 8001aa8:	f00a fdc2 	bl	800c630 <strtok_r>
 8001aac:	4604      	mov	r4, r0
 8001aae:	e780      	b.n	80019b2 <csp_rtable_parse+0x46>
 8001ab0:	0800efe4 	.word	0x0800efe4
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	0800e2aa 	.word	0x0800e2aa
 8001abc:	0800f06d 	.word	0x0800f06d
 8001ac0:	0800f065 	.word	0x0800f065
 8001ac4:	0800f084 	.word	0x0800f084
 8001ac8:	0800f054 	.word	0x0800f054
 8001acc:	0800f062 	.word	0x0800f062
 8001ad0:	0800f057 	.word	0x0800f057

08001ad4 <csp_rtable_load>:
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	e749      	b.n	800196c <csp_rtable_parse>

08001ad8 <csp_rtable_check>:
 8001ad8:	2101      	movs	r1, #1
 8001ada:	e747      	b.n	800196c <csp_rtable_parse>

08001adc <csp_rtable_save>:
 8001adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9000      	str	r0, [sp, #0]
 8001ae2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001ae6:	7003      	strb	r3, [r0, #0]
 8001ae8:	4669      	mov	r1, sp
 8001aea:	4804      	ldr	r0, [pc, #16]	; (8001afc <csp_rtable_save+0x20>)
 8001aec:	9303      	str	r3, [sp, #12]
 8001aee:	f000 f85d 	bl	8001bac <csp_rtable_iterate>
 8001af2:	9803      	ldr	r0, [sp, #12]
 8001af4:	b005      	add	sp, #20
 8001af6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001afa:	bf00      	nop
 8001afc:	0800181d 	.word	0x0800181d

08001b00 <csp_rtable_clear>:
 8001b00:	b510      	push	{r4, lr}
 8001b02:	f000 f84b 	bl	8001b9c <csp_rtable_free>
 8001b06:	4804      	ldr	r0, [pc, #16]	; (8001b18 <csp_rtable_clear+0x18>)
 8001b08:	23ff      	movs	r3, #255	; 0xff
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <csp_rtable_clear+0x1c>)
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	7800      	ldrb	r0, [r0, #0]
 8001b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b14:	f7ff bef6 	b.w	8001904 <csp_rtable_set>
 8001b18:	20000288 	.word	0x20000288
 8001b1c:	20000008 	.word	0x20000008

08001b20 <csp_rtable_print>:
 8001b20:	2100      	movs	r1, #0
 8001b22:	4801      	ldr	r0, [pc, #4]	; (8001b28 <csp_rtable_print+0x8>)
 8001b24:	f000 b842 	b.w	8001bac <csp_rtable_iterate>
 8001b28:	080018d9 	.word	0x080018d9

08001b2c <csp_rtable_find_route>:
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <csp_rtable_find_route+0x20>)
 8001b2e:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8001b32:	b112      	cbz	r2, 8001b3a <csp_rtable_find_route+0xe>
 8001b34:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001b38:	4770      	bx	lr
 8001b3a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8001b3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b42:	2800      	cmp	r0, #0
 8001b44:	bf18      	it	ne
 8001b46:	4618      	movne	r0, r3
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000330 	.word	0x20000330

08001b50 <csp_rtable_set_internal>:
 8001b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001b52:	b181      	cbz	r1, 8001b76 <csp_rtable_set_internal+0x26>
 8001b54:	2905      	cmp	r1, #5
 8001b56:	d00f      	beq.n	8001b78 <csp_rtable_set_internal+0x28>
 8001b58:	4c0c      	ldr	r4, [pc, #48]	; (8001b8c <csp_rtable_set_internal+0x3c>)
 8001b5a:	7824      	ldrb	r4, [r4, #0]
 8001b5c:	b144      	cbz	r4, 8001b70 <csp_rtable_set_internal+0x20>
 8001b5e:	9100      	str	r1, [sp, #0]
 8001b60:	490b      	ldr	r1, [pc, #44]	; (8001b90 <csp_rtable_set_internal+0x40>)
 8001b62:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <csp_rtable_set_internal+0x44>)
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7fe ff4a 	bl	8000a04 <do_csp_debug>
 8001b70:	f06f 0001 	mvn.w	r0, #1
 8001b74:	e007      	b.n	8001b86 <csp_rtable_set_internal+0x36>
 8001b76:	2020      	movs	r0, #32
 8001b78:	4907      	ldr	r1, [pc, #28]	; (8001b98 <csp_rtable_set_internal+0x48>)
 8001b7a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
 8001b7e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8001b82:	7103      	strb	r3, [r0, #4]
 8001b84:	2000      	movs	r0, #0
 8001b86:	b004      	add	sp, #16
 8001b88:	bd10      	pop	{r4, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	0800f0a6 	.word	0x0800f0a6
 8001b94:	0800e2bb 	.word	0x0800e2bb
 8001b98:	20000330 	.word	0x20000330

08001b9c <csp_rtable_free>:
 8001b9c:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4801      	ldr	r0, [pc, #4]	; (8001ba8 <csp_rtable_free+0xc>)
 8001ba4:	f00a b9cf 	b.w	800bf46 <memset>
 8001ba8:	20000330 	.word	0x20000330

08001bac <csp_rtable_iterate>:
 8001bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb0:	4c0f      	ldr	r4, [pc, #60]	; (8001bf0 <csp_rtable_iterate+0x44>)
 8001bb2:	4605      	mov	r5, r0
 8001bb4:	460e      	mov	r6, r1
 8001bb6:	2700      	movs	r7, #0
 8001bb8:	46a0      	mov	r8, r4
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	b973      	cbnz	r3, 8001bdc <csp_rtable_iterate+0x30>
 8001bbe:	3701      	adds	r7, #1
 8001bc0:	3408      	adds	r4, #8
 8001bc2:	2f20      	cmp	r7, #32
 8001bc4:	d1f9      	bne.n	8001bba <csp_rtable_iterate+0xe>
 8001bc6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
 8001bca:	b173      	cbz	r3, 8001bea <csp_rtable_iterate+0x3e>
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4630      	mov	r0, r6
 8001bd0:	46ac      	mov	ip, r5
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <csp_rtable_iterate+0x48>)
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bda:	4760      	bx	ip
 8001bdc:	4623      	mov	r3, r4
 8001bde:	2205      	movs	r2, #5
 8001be0:	b2f9      	uxtb	r1, r7
 8001be2:	4630      	mov	r0, r6
 8001be4:	47a8      	blx	r5
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d1e9      	bne.n	8001bbe <csp_rtable_iterate+0x12>
 8001bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000330 	.word	0x20000330
 8001bf4:	20000430 	.word	0x20000430

08001bf8 <csp_udp_new_packet>:
 8001bf8:	b513      	push	{r0, r1, r4, lr}
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	9001      	str	r0, [sp, #4]
 8001bfe:	f7fe fc57 	bl	80004b0 <csp_conn_enqueue_packet>
 8001c02:	2800      	cmp	r0, #0
 8001c04:	da0b      	bge.n	8001c1e <csp_udp_new_packet+0x26>
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <csp_udp_new_packet+0x58>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b11b      	cbz	r3, 8001c14 <csp_udp_new_packet+0x1c>
 8001c0c:	4911      	ldr	r1, [pc, #68]	; (8001c54 <csp_udp_new_packet+0x5c>)
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7fe fef8 	bl	8000a04 <do_csp_debug>
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7fe fbc5 	bl	80003a4 <csp_buffer_free>
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd10      	pop	{r4, pc}
 8001c1e:	9b01      	ldr	r3, [sp, #4]
 8001c20:	6918      	ldr	r0, [r3, #16]
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d0f9      	beq.n	8001c1a <csp_udp_new_packet+0x22>
 8001c26:	2200      	movs	r2, #0
 8001c28:	a901      	add	r1, sp, #4
 8001c2a:	f000 f83c 	bl	8001ca6 <csp_queue_enqueue>
 8001c2e:	2801      	cmp	r0, #1
 8001c30:	d00a      	beq.n	8001c48 <csp_udp_new_packet+0x50>
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <csp_udp_new_packet+0x58>)
 8001c34:	785b      	ldrb	r3, [r3, #1]
 8001c36:	b11b      	cbz	r3, 8001c40 <csp_udp_new_packet+0x48>
 8001c38:	4907      	ldr	r1, [pc, #28]	; (8001c58 <csp_udp_new_packet+0x60>)
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f7fe fee2 	bl	8000a04 <do_csp_debug>
 8001c40:	9801      	ldr	r0, [sp, #4]
 8001c42:	f7fe fda3 	bl	800078c <csp_close>
 8001c46:	e7e8      	b.n	8001c1a <csp_udp_new_packet+0x22>
 8001c48:	9b01      	ldr	r3, [sp, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
 8001c4e:	e7e4      	b.n	8001c1a <csp_udp_new_packet+0x22>
 8001c50:	20000000 	.word	0x20000000
 8001c54:	0800f0f1 	.word	0x0800f0f1
 8001c58:	0800f10f 	.word	0x0800f10f

08001c5c <csp_get_uptime_s>:
 8001c5c:	b508      	push	{r3, lr}
 8001c5e:	f000 f8ef 	bl	8001e40 <csp_get_s>
 8001c62:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <csp_get_uptime_s+0x14>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	b902      	cbnz	r2, 8001c6a <csp_get_uptime_s+0xe>
 8001c68:	6018      	str	r0, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	1ac0      	subs	r0, r0, r3
 8001c6e:	bd08      	pop	{r3, pc}
 8001c70:	20000438 	.word	0x20000438

08001c74 <csp_malloc>:
 8001c74:	f009 be46 	b.w	800b904 <pvPortMalloc>

08001c78 <csp_calloc>:
 8001c78:	fb01 f200 	mul.w	r2, r1, r0
 8001c7c:	b513      	push	{r0, r1, r4, lr}
 8001c7e:	4610      	mov	r0, r2
 8001c80:	9201      	str	r2, [sp, #4]
 8001c82:	f009 fe3f 	bl	800b904 <pvPortMalloc>
 8001c86:	4604      	mov	r4, r0
 8001c88:	b118      	cbz	r0, 8001c92 <csp_calloc+0x1a>
 8001c8a:	9a01      	ldr	r2, [sp, #4]
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	f00a f95a 	bl	800bf46 <memset>
 8001c92:	4620      	mov	r0, r4
 8001c94:	b002      	add	sp, #8
 8001c96:	bd10      	pop	{r4, pc}

08001c98 <csp_free>:
 8001c98:	f009 befe 	b.w	800ba98 <vPortFree>

08001c9c <csp_queue_create>:
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f006 bdcd 	b.w	800883c <xQueueGenericCreate>

08001ca2 <csp_queue_remove>:
 8001ca2:	f007 bb5f 	b.w	8009364 <vQueueDelete>

08001ca6 <csp_queue_enqueue>:
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f006 be60 	b.w	800896c <xQueueGenericSend>

08001cac <csp_queue_enqueue_isr>:
 8001cac:	2300      	movs	r3, #0
 8001cae:	f006 bf63 	b.w	8008b78 <xQueueGenericSendFromISR>

08001cb2 <csp_queue_dequeue>:
 8001cb2:	f007 b897 	b.w	8008de4 <xQueueReceive>

08001cb6 <csp_queue_dequeue_isr>:
 8001cb6:	f007 ba8f 	b.w	80091d8 <xQueueReceiveFromISR>

08001cba <csp_queue_size>:
 8001cba:	f007 bb13 	b.w	80092e4 <uxQueueMessagesWaiting>

08001cbe <csp_queue_size_isr>:
 8001cbe:	f007 bb31 	b.w	8009324 <uxQueueMessagesWaitingFromISR>
	...

08001cc4 <csp_mutex_create>:
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f006 fe36 	bl	800893a <xQueueCreateMutex>
 8001cce:	6020      	str	r0, [r4, #0]
 8001cd0:	3800      	subs	r0, #0
 8001cd2:	bf18      	it	ne
 8001cd4:	2001      	movne	r0, #1
 8001cd6:	bd10      	pop	{r4, pc}

08001cd8 <csp_bin_sem_create>:
 8001cd8:	b510      	push	{r4, lr}
 8001cda:	4604      	mov	r4, r0
 8001cdc:	2203      	movs	r2, #3
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f006 fdab 	bl	800883c <xQueueGenericCreate>
 8001ce6:	6020      	str	r0, [r4, #0]
 8001ce8:	b120      	cbz	r0, 8001cf4 <csp_bin_sem_create+0x1c>
 8001cea:	2300      	movs	r3, #0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f006 fe3c 	bl	800896c <xQueueGenericSend>
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	bd10      	pop	{r4, pc}

08001cf8 <csp_bin_sem_remove>:
 8001cf8:	b508      	push	{r3, lr}
 8001cfa:	b118      	cbz	r0, 8001d04 <csp_bin_sem_remove+0xc>
 8001cfc:	6800      	ldr	r0, [r0, #0]
 8001cfe:	b108      	cbz	r0, 8001d04 <csp_bin_sem_remove+0xc>
 8001d00:	f007 fb30 	bl	8009364 <vQueueDelete>
 8001d04:	2001      	movs	r0, #1
 8001d06:	bd08      	pop	{r3, pc}

08001d08 <csp_mutex_remove>:
 8001d08:	f7ff bff6 	b.w	8001cf8 <csp_bin_sem_remove>

08001d0c <csp_bin_sem_wait>:
 8001d0c:	b538      	push	{r3, r4, r5, lr}
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <csp_bin_sem_wait+0x28>)
 8001d10:	4604      	mov	r4, r0
 8001d12:	460d      	mov	r5, r1
 8001d14:	799b      	ldrb	r3, [r3, #6]
 8001d16:	b123      	cbz	r3, 8001d22 <csp_bin_sem_wait+0x16>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4907      	ldr	r1, [pc, #28]	; (8001d38 <csp_bin_sem_wait+0x2c>)
 8001d1c:	2006      	movs	r0, #6
 8001d1e:	f7fe fe71 	bl	8000a04 <do_csp_debug>
 8001d22:	4629      	mov	r1, r5
 8001d24:	6820      	ldr	r0, [r4, #0]
 8001d26:	f007 f943 	bl	8008fb0 <xQueueSemaphoreTake>
 8001d2a:	1e43      	subs	r3, r0, #1
 8001d2c:	4258      	negs	r0, r3
 8001d2e:	4158      	adcs	r0, r3
 8001d30:	bd38      	pop	{r3, r4, r5, pc}
 8001d32:	bf00      	nop
 8001d34:	20000000 	.word	0x20000000
 8001d38:	0800f134 	.word	0x0800f134

08001d3c <csp_mutex_lock>:
 8001d3c:	f7ff bfe6 	b.w	8001d0c <csp_bin_sem_wait>

08001d40 <csp_bin_sem_post>:
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <csp_bin_sem_post+0x28>)
 8001d42:	799b      	ldrb	r3, [r3, #6]
 8001d44:	b510      	push	{r4, lr}
 8001d46:	4604      	mov	r4, r0
 8001d48:	b123      	cbz	r3, 8001d54 <csp_bin_sem_post+0x14>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4907      	ldr	r1, [pc, #28]	; (8001d6c <csp_bin_sem_post+0x2c>)
 8001d4e:	2006      	movs	r0, #6
 8001d50:	f7fe fe58 	bl	8000a04 <do_csp_debug>
 8001d54:	2300      	movs	r3, #0
 8001d56:	6820      	ldr	r0, [r4, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f006 fe06 	bl	800896c <xQueueGenericSend>
 8001d60:	1e43      	subs	r3, r0, #1
 8001d62:	4258      	negs	r0, r3
 8001d64:	4158      	adcs	r0, r3
 8001d66:	bd10      	pop	{r4, pc}
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	0800f13d 	.word	0x0800f13d

08001d70 <csp_mutex_unlock>:
 8001d70:	f7ff bfe6 	b.w	8001d40 <csp_bin_sem_post>

08001d74 <csp_bin_sem_post_isr>:
 8001d74:	b538      	push	{r3, r4, r5, lr}
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <csp_bin_sem_post_isr+0x28>)
 8001d78:	4604      	mov	r4, r0
 8001d7a:	460d      	mov	r5, r1
 8001d7c:	799b      	ldrb	r3, [r3, #6]
 8001d7e:	b123      	cbz	r3, 8001d8a <csp_bin_sem_post_isr+0x16>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4907      	ldr	r1, [pc, #28]	; (8001da0 <csp_bin_sem_post_isr+0x2c>)
 8001d84:	2006      	movs	r0, #6
 8001d86:	f7fe fe3d 	bl	8000a04 <do_csp_debug>
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	6820      	ldr	r0, [r4, #0]
 8001d8e:	f006 ff93 	bl	8008cb8 <xQueueGiveFromISR>
 8001d92:	1e43      	subs	r3, r0, #1
 8001d94:	4258      	negs	r0, r3
 8001d96:	4158      	adcs	r0, r3
 8001d98:	bd38      	pop	{r3, r4, r5, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	0800f13d 	.word	0x0800f13d

08001da4 <csp_sys_tasklist>:
 8001da4:	b508      	push	{r3, lr}
 8001da6:	f008 ff1b 	bl	800abe0 <vTaskList>
 8001daa:	2000      	movs	r0, #0
 8001dac:	bd08      	pop	{r3, pc}

08001dae <csp_sys_tasklist_size>:
 8001dae:	b508      	push	{r3, lr}
 8001db0:	f008 f8c4 	bl	8009f3c <uxTaskGetNumberOfTasks>
 8001db4:	2328      	movs	r3, #40	; 0x28
 8001db6:	4358      	muls	r0, r3
 8001db8:	bd08      	pop	{r3, pc}

08001dba <csp_sys_memfree>:
 8001dba:	f009 becb 	b.w	800bb54 <xPortGetFreeHeapSize>

08001dbe <csp_sys_set_color>:
 8001dbe:	f000 020f 	and.w	r2, r0, #15
 8001dc2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8001dc6:	1e53      	subs	r3, r2, #1
 8001dc8:	2b07      	cmp	r3, #7
 8001dca:	bf94      	ite	ls
 8001dcc:	321d      	addls	r2, #29
 8001dce:	2200      	movhi	r2, #0
 8001dd0:	2830      	cmp	r0, #48	; 0x30
 8001dd2:	d00e      	beq.n	8001df2 <csp_sys_set_color+0x34>
 8001dd4:	d808      	bhi.n	8001de8 <csp_sys_set_color+0x2a>
 8001dd6:	2810      	cmp	r0, #16
 8001dd8:	d00d      	beq.n	8001df6 <csp_sys_set_color+0x38>
 8001dda:	2820      	cmp	r0, #32
 8001ddc:	bf14      	ite	ne
 8001dde:	2100      	movne	r1, #0
 8001de0:	2102      	moveq	r1, #2
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <csp_sys_set_color+0x3e>)
 8001de4:	f00a b94c 	b.w	800c080 <iprintf>
 8001de8:	2840      	cmp	r0, #64	; 0x40
 8001dea:	bf14      	ite	ne
 8001dec:	2100      	movne	r1, #0
 8001dee:	2104      	moveq	r1, #4
 8001df0:	e7f7      	b.n	8001de2 <csp_sys_set_color+0x24>
 8001df2:	2103      	movs	r1, #3
 8001df4:	e7f5      	b.n	8001de2 <csp_sys_set_color+0x24>
 8001df6:	2101      	movs	r1, #1
 8001df8:	e7f3      	b.n	8001de2 <csp_sys_set_color+0x24>
 8001dfa:	bf00      	nop
 8001dfc:	0800f146 	.word	0x0800f146

08001e00 <csp_thread_create>:
 8001e00:	b530      	push	{r4, r5, lr}
 8001e02:	b085      	sub	sp, #20
 8001e04:	b292      	uxth	r2, r2
 8001e06:	ad03      	add	r5, sp, #12
 8001e08:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001e0a:	9501      	str	r5, [sp, #4]
 8001e0c:	9d08      	ldr	r5, [sp, #32]
 8001e0e:	9500      	str	r5, [sp, #0]
 8001e10:	f007 fce1 	bl	80097d6 <xTaskCreate>
 8001e14:	2801      	cmp	r0, #1
 8001e16:	d105      	bne.n	8001e24 <csp_thread_create+0x24>
 8001e18:	b13c      	cbz	r4, 8001e2a <csp_thread_create+0x2a>
 8001e1a:	9b03      	ldr	r3, [sp, #12]
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	6023      	str	r3, [r4, #0]
 8001e20:	b005      	add	sp, #20
 8001e22:	bd30      	pop	{r4, r5, pc}
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	e7fa      	b.n	8001e20 <csp_thread_create+0x20>
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	e7f8      	b.n	8001e20 <csp_thread_create+0x20>

08001e2e <csp_thread_exit>:
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f007 be2e 	b.w	8009a90 <vTaskDelete>

08001e34 <csp_sleep_ms>:
 8001e34:	f007 bea0 	b.w	8009b78 <vTaskDelay>

08001e38 <csp_get_ms>:
 8001e38:	f008 b85e 	b.w	8009ef8 <xTaskGetTickCount>

08001e3c <csp_get_ms_isr>:
 8001e3c:	f008 b86c 	b.w	8009f18 <xTaskGetTickCountFromISR>

08001e40 <csp_get_s>:
 8001e40:	b508      	push	{r3, lr}
 8001e42:	f008 f859 	bl	8009ef8 <xTaskGetTickCount>
 8001e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e4e:	bd08      	pop	{r3, pc}

08001e50 <csp_get_s_isr>:
 8001e50:	b508      	push	{r3, lr}
 8001e52:	f008 f861 	bl	8009f18 <xTaskGetTickCountFromISR>
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e5e:	bd08      	pop	{r3, pc}

08001e60 <strlen>:
 8001e60:	4603      	mov	r3, r0
 8001e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e66:	2a00      	cmp	r2, #0
 8001e68:	d1fb      	bne.n	8001e62 <strlen+0x2>
 8001e6a:	1a18      	subs	r0, r3, r0
 8001e6c:	3801      	subs	r0, #1
 8001e6e:	4770      	bx	lr

08001e70 <memchr>:
 8001e70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001e74:	2a10      	cmp	r2, #16
 8001e76:	db2b      	blt.n	8001ed0 <memchr+0x60>
 8001e78:	f010 0f07 	tst.w	r0, #7
 8001e7c:	d008      	beq.n	8001e90 <memchr+0x20>
 8001e7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001e82:	3a01      	subs	r2, #1
 8001e84:	428b      	cmp	r3, r1
 8001e86:	d02d      	beq.n	8001ee4 <memchr+0x74>
 8001e88:	f010 0f07 	tst.w	r0, #7
 8001e8c:	b342      	cbz	r2, 8001ee0 <memchr+0x70>
 8001e8e:	d1f6      	bne.n	8001e7e <memchr+0xe>
 8001e90:	b4f0      	push	{r4, r5, r6, r7}
 8001e92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001e96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001e9a:	f022 0407 	bic.w	r4, r2, #7
 8001e9e:	f07f 0700 	mvns.w	r7, #0
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001ea8:	3c08      	subs	r4, #8
 8001eaa:	ea85 0501 	eor.w	r5, r5, r1
 8001eae:	ea86 0601 	eor.w	r6, r6, r1
 8001eb2:	fa85 f547 	uadd8	r5, r5, r7
 8001eb6:	faa3 f587 	sel	r5, r3, r7
 8001eba:	fa86 f647 	uadd8	r6, r6, r7
 8001ebe:	faa5 f687 	sel	r6, r5, r7
 8001ec2:	b98e      	cbnz	r6, 8001ee8 <memchr+0x78>
 8001ec4:	d1ee      	bne.n	8001ea4 <memchr+0x34>
 8001ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ec8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001ecc:	f002 0207 	and.w	r2, r2, #7
 8001ed0:	b132      	cbz	r2, 8001ee0 <memchr+0x70>
 8001ed2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	ea83 0301 	eor.w	r3, r3, r1
 8001edc:	b113      	cbz	r3, 8001ee4 <memchr+0x74>
 8001ede:	d1f8      	bne.n	8001ed2 <memchr+0x62>
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	4770      	bx	lr
 8001ee4:	3801      	subs	r0, #1
 8001ee6:	4770      	bx	lr
 8001ee8:	2d00      	cmp	r5, #0
 8001eea:	bf06      	itte	eq
 8001eec:	4635      	moveq	r5, r6
 8001eee:	3803      	subeq	r0, #3
 8001ef0:	3807      	subne	r0, #7
 8001ef2:	f015 0f01 	tst.w	r5, #1
 8001ef6:	d107      	bne.n	8001f08 <memchr+0x98>
 8001ef8:	3001      	adds	r0, #1
 8001efa:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001efe:	bf02      	ittt	eq
 8001f00:	3001      	addeq	r0, #1
 8001f02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001f06:	3001      	addeq	r0, #1
 8001f08:	bcf0      	pop	{r4, r5, r6, r7}
 8001f0a:	3801      	subs	r0, #1
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop

08001f10 <__aeabi_dmul>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001f16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001f1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001f1e:	bf1d      	ittte	ne
 8001f20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001f24:	ea94 0f0c 	teqne	r4, ip
 8001f28:	ea95 0f0c 	teqne	r5, ip
 8001f2c:	f000 f8de 	bleq	80020ec <__aeabi_dmul+0x1dc>
 8001f30:	442c      	add	r4, r5
 8001f32:	ea81 0603 	eor.w	r6, r1, r3
 8001f36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001f3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001f3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8001f42:	bf18      	it	ne
 8001f44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8001f48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f50:	d038      	beq.n	8001fc4 <__aeabi_dmul+0xb4>
 8001f52:	fba0 ce02 	umull	ip, lr, r0, r2
 8001f56:	f04f 0500 	mov.w	r5, #0
 8001f5a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001f5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8001f62:	fbe0 e503 	umlal	lr, r5, r0, r3
 8001f66:	f04f 0600 	mov.w	r6, #0
 8001f6a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8001f6e:	f09c 0f00 	teq	ip, #0
 8001f72:	bf18      	it	ne
 8001f74:	f04e 0e01 	orrne.w	lr, lr, #1
 8001f78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8001f7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001f80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8001f84:	d204      	bcs.n	8001f90 <__aeabi_dmul+0x80>
 8001f86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8001f8a:	416d      	adcs	r5, r5
 8001f8c:	eb46 0606 	adc.w	r6, r6, r6
 8001f90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8001f94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8001f98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001f9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001fa0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8001fa4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001fa8:	bf88      	it	hi
 8001faa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001fae:	d81e      	bhi.n	8001fee <__aeabi_dmul+0xde>
 8001fb0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8001fb4:	bf08      	it	eq
 8001fb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001fba:	f150 0000 	adcs.w	r0, r0, #0
 8001fbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
 8001fc4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001fc8:	ea46 0101 	orr.w	r1, r6, r1
 8001fcc:	ea40 0002 	orr.w	r0, r0, r2
 8001fd0:	ea81 0103 	eor.w	r1, r1, r3
 8001fd4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001fd8:	bfc2      	ittt	gt
 8001fda:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001fde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001fe2:	bd70      	popgt	{r4, r5, r6, pc}
 8001fe4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001fe8:	f04f 0e00 	mov.w	lr, #0
 8001fec:	3c01      	subs	r4, #1
 8001fee:	f300 80ab 	bgt.w	8002148 <__aeabi_dmul+0x238>
 8001ff2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8001ff6:	bfde      	ittt	le
 8001ff8:	2000      	movle	r0, #0
 8001ffa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001ffe:	bd70      	pople	{r4, r5, r6, pc}
 8002000:	f1c4 0400 	rsb	r4, r4, #0
 8002004:	3c20      	subs	r4, #32
 8002006:	da35      	bge.n	8002074 <__aeabi_dmul+0x164>
 8002008:	340c      	adds	r4, #12
 800200a:	dc1b      	bgt.n	8002044 <__aeabi_dmul+0x134>
 800200c:	f104 0414 	add.w	r4, r4, #20
 8002010:	f1c4 0520 	rsb	r5, r4, #32
 8002014:	fa00 f305 	lsl.w	r3, r0, r5
 8002018:	fa20 f004 	lsr.w	r0, r0, r4
 800201c:	fa01 f205 	lsl.w	r2, r1, r5
 8002020:	ea40 0002 	orr.w	r0, r0, r2
 8002024:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002028:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800202c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002030:	fa21 f604 	lsr.w	r6, r1, r4
 8002034:	eb42 0106 	adc.w	r1, r2, r6
 8002038:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800203c:	bf08      	it	eq
 800203e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002042:	bd70      	pop	{r4, r5, r6, pc}
 8002044:	f1c4 040c 	rsb	r4, r4, #12
 8002048:	f1c4 0520 	rsb	r5, r4, #32
 800204c:	fa00 f304 	lsl.w	r3, r0, r4
 8002050:	fa20 f005 	lsr.w	r0, r0, r5
 8002054:	fa01 f204 	lsl.w	r2, r1, r4
 8002058:	ea40 0002 	orr.w	r0, r0, r2
 800205c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002060:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002064:	f141 0100 	adc.w	r1, r1, #0
 8002068:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800206c:	bf08      	it	eq
 800206e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002072:	bd70      	pop	{r4, r5, r6, pc}
 8002074:	f1c4 0520 	rsb	r5, r4, #32
 8002078:	fa00 f205 	lsl.w	r2, r0, r5
 800207c:	ea4e 0e02 	orr.w	lr, lr, r2
 8002080:	fa20 f304 	lsr.w	r3, r0, r4
 8002084:	fa01 f205 	lsl.w	r2, r1, r5
 8002088:	ea43 0302 	orr.w	r3, r3, r2
 800208c:	fa21 f004 	lsr.w	r0, r1, r4
 8002090:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002094:	fa21 f204 	lsr.w	r2, r1, r4
 8002098:	ea20 0002 	bic.w	r0, r0, r2
 800209c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80020a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80020a4:	bf08      	it	eq
 80020a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
 80020ac:	f094 0f00 	teq	r4, #0
 80020b0:	d10f      	bne.n	80020d2 <__aeabi_dmul+0x1c2>
 80020b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80020b6:	0040      	lsls	r0, r0, #1
 80020b8:	eb41 0101 	adc.w	r1, r1, r1
 80020bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80020c0:	bf08      	it	eq
 80020c2:	3c01      	subeq	r4, #1
 80020c4:	d0f7      	beq.n	80020b6 <__aeabi_dmul+0x1a6>
 80020c6:	ea41 0106 	orr.w	r1, r1, r6
 80020ca:	f095 0f00 	teq	r5, #0
 80020ce:	bf18      	it	ne
 80020d0:	4770      	bxne	lr
 80020d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80020d6:	0052      	lsls	r2, r2, #1
 80020d8:	eb43 0303 	adc.w	r3, r3, r3
 80020dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80020e0:	bf08      	it	eq
 80020e2:	3d01      	subeq	r5, #1
 80020e4:	d0f7      	beq.n	80020d6 <__aeabi_dmul+0x1c6>
 80020e6:	ea43 0306 	orr.w	r3, r3, r6
 80020ea:	4770      	bx	lr
 80020ec:	ea94 0f0c 	teq	r4, ip
 80020f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80020f4:	bf18      	it	ne
 80020f6:	ea95 0f0c 	teqne	r5, ip
 80020fa:	d00c      	beq.n	8002116 <__aeabi_dmul+0x206>
 80020fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002100:	bf18      	it	ne
 8002102:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002106:	d1d1      	bne.n	80020ac <__aeabi_dmul+0x19c>
 8002108:	ea81 0103 	eor.w	r1, r1, r3
 800210c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002110:	f04f 0000 	mov.w	r0, #0
 8002114:	bd70      	pop	{r4, r5, r6, pc}
 8002116:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800211a:	bf06      	itte	eq
 800211c:	4610      	moveq	r0, r2
 800211e:	4619      	moveq	r1, r3
 8002120:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002124:	d019      	beq.n	800215a <__aeabi_dmul+0x24a>
 8002126:	ea94 0f0c 	teq	r4, ip
 800212a:	d102      	bne.n	8002132 <__aeabi_dmul+0x222>
 800212c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002130:	d113      	bne.n	800215a <__aeabi_dmul+0x24a>
 8002132:	ea95 0f0c 	teq	r5, ip
 8002136:	d105      	bne.n	8002144 <__aeabi_dmul+0x234>
 8002138:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800213c:	bf1c      	itt	ne
 800213e:	4610      	movne	r0, r2
 8002140:	4619      	movne	r1, r3
 8002142:	d10a      	bne.n	800215a <__aeabi_dmul+0x24a>
 8002144:	ea81 0103 	eor.w	r1, r1, r3
 8002148:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800214c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002150:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002154:	f04f 0000 	mov.w	r0, #0
 8002158:	bd70      	pop	{r4, r5, r6, pc}
 800215a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800215e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002162:	bd70      	pop	{r4, r5, r6, pc}

08002164 <__aeabi_drsub>:
 8002164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002168:	e002      	b.n	8002170 <__adddf3>
 800216a:	bf00      	nop

0800216c <__aeabi_dsub>:
 800216c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002170 <__adddf3>:
 8002170:	b530      	push	{r4, r5, lr}
 8002172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800217a:	ea94 0f05 	teq	r4, r5
 800217e:	bf08      	it	eq
 8002180:	ea90 0f02 	teqeq	r0, r2
 8002184:	bf1f      	itttt	ne
 8002186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800218a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800218e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002196:	f000 80e2 	beq.w	800235e <__adddf3+0x1ee>
 800219a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800219e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80021a2:	bfb8      	it	lt
 80021a4:	426d      	neglt	r5, r5
 80021a6:	dd0c      	ble.n	80021c2 <__adddf3+0x52>
 80021a8:	442c      	add	r4, r5
 80021aa:	ea80 0202 	eor.w	r2, r0, r2
 80021ae:	ea81 0303 	eor.w	r3, r1, r3
 80021b2:	ea82 0000 	eor.w	r0, r2, r0
 80021b6:	ea83 0101 	eor.w	r1, r3, r1
 80021ba:	ea80 0202 	eor.w	r2, r0, r2
 80021be:	ea81 0303 	eor.w	r3, r1, r3
 80021c2:	2d36      	cmp	r5, #54	; 0x36
 80021c4:	bf88      	it	hi
 80021c6:	bd30      	pophi	{r4, r5, pc}
 80021c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80021cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80021d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80021d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80021d8:	d002      	beq.n	80021e0 <__adddf3+0x70>
 80021da:	4240      	negs	r0, r0
 80021dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80021e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80021e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80021e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80021ec:	d002      	beq.n	80021f4 <__adddf3+0x84>
 80021ee:	4252      	negs	r2, r2
 80021f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80021f4:	ea94 0f05 	teq	r4, r5
 80021f8:	f000 80a7 	beq.w	800234a <__adddf3+0x1da>
 80021fc:	f1a4 0401 	sub.w	r4, r4, #1
 8002200:	f1d5 0e20 	rsbs	lr, r5, #32
 8002204:	db0d      	blt.n	8002222 <__adddf3+0xb2>
 8002206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800220a:	fa22 f205 	lsr.w	r2, r2, r5
 800220e:	1880      	adds	r0, r0, r2
 8002210:	f141 0100 	adc.w	r1, r1, #0
 8002214:	fa03 f20e 	lsl.w	r2, r3, lr
 8002218:	1880      	adds	r0, r0, r2
 800221a:	fa43 f305 	asr.w	r3, r3, r5
 800221e:	4159      	adcs	r1, r3
 8002220:	e00e      	b.n	8002240 <__adddf3+0xd0>
 8002222:	f1a5 0520 	sub.w	r5, r5, #32
 8002226:	f10e 0e20 	add.w	lr, lr, #32
 800222a:	2a01      	cmp	r2, #1
 800222c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002230:	bf28      	it	cs
 8002232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002236:	fa43 f305 	asr.w	r3, r3, r5
 800223a:	18c0      	adds	r0, r0, r3
 800223c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002244:	d507      	bpl.n	8002256 <__adddf3+0xe6>
 8002246:	f04f 0e00 	mov.w	lr, #0
 800224a:	f1dc 0c00 	rsbs	ip, ip, #0
 800224e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002252:	eb6e 0101 	sbc.w	r1, lr, r1
 8002256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800225a:	d31b      	bcc.n	8002294 <__adddf3+0x124>
 800225c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002260:	d30c      	bcc.n	800227c <__adddf3+0x10c>
 8002262:	0849      	lsrs	r1, r1, #1
 8002264:	ea5f 0030 	movs.w	r0, r0, rrx
 8002268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800226c:	f104 0401 	add.w	r4, r4, #1
 8002270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002278:	f080 809a 	bcs.w	80023b0 <__adddf3+0x240>
 800227c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002280:	bf08      	it	eq
 8002282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002286:	f150 0000 	adcs.w	r0, r0, #0
 800228a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800228e:	ea41 0105 	orr.w	r1, r1, r5
 8002292:	bd30      	pop	{r4, r5, pc}
 8002294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002298:	4140      	adcs	r0, r0
 800229a:	eb41 0101 	adc.w	r1, r1, r1
 800229e:	3c01      	subs	r4, #1
 80022a0:	bf28      	it	cs
 80022a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80022a6:	d2e9      	bcs.n	800227c <__adddf3+0x10c>
 80022a8:	f091 0f00 	teq	r1, #0
 80022ac:	bf04      	itt	eq
 80022ae:	4601      	moveq	r1, r0
 80022b0:	2000      	moveq	r0, #0
 80022b2:	fab1 f381 	clz	r3, r1
 80022b6:	bf08      	it	eq
 80022b8:	3320      	addeq	r3, #32
 80022ba:	f1a3 030b 	sub.w	r3, r3, #11
 80022be:	f1b3 0220 	subs.w	r2, r3, #32
 80022c2:	da0c      	bge.n	80022de <__adddf3+0x16e>
 80022c4:	320c      	adds	r2, #12
 80022c6:	dd08      	ble.n	80022da <__adddf3+0x16a>
 80022c8:	f102 0c14 	add.w	ip, r2, #20
 80022cc:	f1c2 020c 	rsb	r2, r2, #12
 80022d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80022d4:	fa21 f102 	lsr.w	r1, r1, r2
 80022d8:	e00c      	b.n	80022f4 <__adddf3+0x184>
 80022da:	f102 0214 	add.w	r2, r2, #20
 80022de:	bfd8      	it	le
 80022e0:	f1c2 0c20 	rsble	ip, r2, #32
 80022e4:	fa01 f102 	lsl.w	r1, r1, r2
 80022e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80022ec:	bfdc      	itt	le
 80022ee:	ea41 010c 	orrle.w	r1, r1, ip
 80022f2:	4090      	lslle	r0, r2
 80022f4:	1ae4      	subs	r4, r4, r3
 80022f6:	bfa2      	ittt	ge
 80022f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80022fc:	4329      	orrge	r1, r5
 80022fe:	bd30      	popge	{r4, r5, pc}
 8002300:	ea6f 0404 	mvn.w	r4, r4
 8002304:	3c1f      	subs	r4, #31
 8002306:	da1c      	bge.n	8002342 <__adddf3+0x1d2>
 8002308:	340c      	adds	r4, #12
 800230a:	dc0e      	bgt.n	800232a <__adddf3+0x1ba>
 800230c:	f104 0414 	add.w	r4, r4, #20
 8002310:	f1c4 0220 	rsb	r2, r4, #32
 8002314:	fa20 f004 	lsr.w	r0, r0, r4
 8002318:	fa01 f302 	lsl.w	r3, r1, r2
 800231c:	ea40 0003 	orr.w	r0, r0, r3
 8002320:	fa21 f304 	lsr.w	r3, r1, r4
 8002324:	ea45 0103 	orr.w	r1, r5, r3
 8002328:	bd30      	pop	{r4, r5, pc}
 800232a:	f1c4 040c 	rsb	r4, r4, #12
 800232e:	f1c4 0220 	rsb	r2, r4, #32
 8002332:	fa20 f002 	lsr.w	r0, r0, r2
 8002336:	fa01 f304 	lsl.w	r3, r1, r4
 800233a:	ea40 0003 	orr.w	r0, r0, r3
 800233e:	4629      	mov	r1, r5
 8002340:	bd30      	pop	{r4, r5, pc}
 8002342:	fa21 f004 	lsr.w	r0, r1, r4
 8002346:	4629      	mov	r1, r5
 8002348:	bd30      	pop	{r4, r5, pc}
 800234a:	f094 0f00 	teq	r4, #0
 800234e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002352:	bf06      	itte	eq
 8002354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002358:	3401      	addeq	r4, #1
 800235a:	3d01      	subne	r5, #1
 800235c:	e74e      	b.n	80021fc <__adddf3+0x8c>
 800235e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002362:	bf18      	it	ne
 8002364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002368:	d029      	beq.n	80023be <__adddf3+0x24e>
 800236a:	ea94 0f05 	teq	r4, r5
 800236e:	bf08      	it	eq
 8002370:	ea90 0f02 	teqeq	r0, r2
 8002374:	d005      	beq.n	8002382 <__adddf3+0x212>
 8002376:	ea54 0c00 	orrs.w	ip, r4, r0
 800237a:	bf04      	itt	eq
 800237c:	4619      	moveq	r1, r3
 800237e:	4610      	moveq	r0, r2
 8002380:	bd30      	pop	{r4, r5, pc}
 8002382:	ea91 0f03 	teq	r1, r3
 8002386:	bf1e      	ittt	ne
 8002388:	2100      	movne	r1, #0
 800238a:	2000      	movne	r0, #0
 800238c:	bd30      	popne	{r4, r5, pc}
 800238e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002392:	d105      	bne.n	80023a0 <__adddf3+0x230>
 8002394:	0040      	lsls	r0, r0, #1
 8002396:	4149      	adcs	r1, r1
 8002398:	bf28      	it	cs
 800239a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800239e:	bd30      	pop	{r4, r5, pc}
 80023a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80023a4:	bf3c      	itt	cc
 80023a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80023aa:	bd30      	popcc	{r4, r5, pc}
 80023ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80023b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80023b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80023b8:	f04f 0000 	mov.w	r0, #0
 80023bc:	bd30      	pop	{r4, r5, pc}
 80023be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80023c2:	bf1a      	itte	ne
 80023c4:	4619      	movne	r1, r3
 80023c6:	4610      	movne	r0, r2
 80023c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80023cc:	bf1c      	itt	ne
 80023ce:	460b      	movne	r3, r1
 80023d0:	4602      	movne	r2, r0
 80023d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80023d6:	bf06      	itte	eq
 80023d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80023dc:	ea91 0f03 	teqeq	r1, r3
 80023e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80023e4:	bd30      	pop	{r4, r5, pc}
 80023e6:	bf00      	nop

080023e8 <__aeabi_ui2d>:
 80023e8:	f090 0f00 	teq	r0, #0
 80023ec:	bf04      	itt	eq
 80023ee:	2100      	moveq	r1, #0
 80023f0:	4770      	bxeq	lr
 80023f2:	b530      	push	{r4, r5, lr}
 80023f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80023f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80023fc:	f04f 0500 	mov.w	r5, #0
 8002400:	f04f 0100 	mov.w	r1, #0
 8002404:	e750      	b.n	80022a8 <__adddf3+0x138>
 8002406:	bf00      	nop

08002408 <__aeabi_i2d>:
 8002408:	f090 0f00 	teq	r0, #0
 800240c:	bf04      	itt	eq
 800240e:	2100      	moveq	r1, #0
 8002410:	4770      	bxeq	lr
 8002412:	b530      	push	{r4, r5, lr}
 8002414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800241c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002420:	bf48      	it	mi
 8002422:	4240      	negmi	r0, r0
 8002424:	f04f 0100 	mov.w	r1, #0
 8002428:	e73e      	b.n	80022a8 <__adddf3+0x138>
 800242a:	bf00      	nop

0800242c <__aeabi_f2d>:
 800242c:	0042      	lsls	r2, r0, #1
 800242e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002432:	ea4f 0131 	mov.w	r1, r1, rrx
 8002436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800243a:	bf1f      	itttt	ne
 800243c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002448:	4770      	bxne	lr
 800244a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800244e:	bf08      	it	eq
 8002450:	4770      	bxeq	lr
 8002452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8002456:	bf04      	itt	eq
 8002458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800245c:	4770      	bxeq	lr
 800245e:	b530      	push	{r4, r5, lr}
 8002460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800246c:	e71c      	b.n	80022a8 <__adddf3+0x138>
 800246e:	bf00      	nop

08002470 <__aeabi_ul2d>:
 8002470:	ea50 0201 	orrs.w	r2, r0, r1
 8002474:	bf08      	it	eq
 8002476:	4770      	bxeq	lr
 8002478:	b530      	push	{r4, r5, lr}
 800247a:	f04f 0500 	mov.w	r5, #0
 800247e:	e00a      	b.n	8002496 <__aeabi_l2d+0x16>

08002480 <__aeabi_l2d>:
 8002480:	ea50 0201 	orrs.w	r2, r0, r1
 8002484:	bf08      	it	eq
 8002486:	4770      	bxeq	lr
 8002488:	b530      	push	{r4, r5, lr}
 800248a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800248e:	d502      	bpl.n	8002496 <__aeabi_l2d+0x16>
 8002490:	4240      	negs	r0, r0
 8002492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800249a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800249e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80024a2:	f43f aed8 	beq.w	8002256 <__adddf3+0xe6>
 80024a6:	f04f 0203 	mov.w	r2, #3
 80024aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80024ae:	bf18      	it	ne
 80024b0:	3203      	addne	r2, #3
 80024b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80024b6:	bf18      	it	ne
 80024b8:	3203      	addne	r2, #3
 80024ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80024be:	f1c2 0320 	rsb	r3, r2, #32
 80024c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80024c6:	fa20 f002 	lsr.w	r0, r0, r2
 80024ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80024ce:	ea40 000e 	orr.w	r0, r0, lr
 80024d2:	fa21 f102 	lsr.w	r1, r1, r2
 80024d6:	4414      	add	r4, r2
 80024d8:	e6bd      	b.n	8002256 <__adddf3+0xe6>
 80024da:	bf00      	nop

080024dc <__aeabi_uldivmod>:
 80024dc:	b953      	cbnz	r3, 80024f4 <__aeabi_uldivmod+0x18>
 80024de:	b94a      	cbnz	r2, 80024f4 <__aeabi_uldivmod+0x18>
 80024e0:	2900      	cmp	r1, #0
 80024e2:	bf08      	it	eq
 80024e4:	2800      	cmpeq	r0, #0
 80024e6:	bf1c      	itt	ne
 80024e8:	f04f 31ff 	movne.w	r1, #4294967295
 80024ec:	f04f 30ff 	movne.w	r0, #4294967295
 80024f0:	f000 b974 	b.w	80027dc <__aeabi_idiv0>
 80024f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80024f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80024fc:	f000 f806 	bl	800250c <__udivmoddi4>
 8002500:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002508:	b004      	add	sp, #16
 800250a:	4770      	bx	lr

0800250c <__udivmoddi4>:
 800250c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002510:	9d08      	ldr	r5, [sp, #32]
 8002512:	4604      	mov	r4, r0
 8002514:	468e      	mov	lr, r1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d14d      	bne.n	80025b6 <__udivmoddi4+0xaa>
 800251a:	428a      	cmp	r2, r1
 800251c:	4694      	mov	ip, r2
 800251e:	d969      	bls.n	80025f4 <__udivmoddi4+0xe8>
 8002520:	fab2 f282 	clz	r2, r2
 8002524:	b152      	cbz	r2, 800253c <__udivmoddi4+0x30>
 8002526:	fa01 f302 	lsl.w	r3, r1, r2
 800252a:	f1c2 0120 	rsb	r1, r2, #32
 800252e:	fa20 f101 	lsr.w	r1, r0, r1
 8002532:	fa0c fc02 	lsl.w	ip, ip, r2
 8002536:	ea41 0e03 	orr.w	lr, r1, r3
 800253a:	4094      	lsls	r4, r2
 800253c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8002540:	0c21      	lsrs	r1, r4, #16
 8002542:	fbbe f6f8 	udiv	r6, lr, r8
 8002546:	fa1f f78c 	uxth.w	r7, ip
 800254a:	fb08 e316 	mls	r3, r8, r6, lr
 800254e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002552:	fb06 f107 	mul.w	r1, r6, r7
 8002556:	4299      	cmp	r1, r3
 8002558:	d90a      	bls.n	8002570 <__udivmoddi4+0x64>
 800255a:	eb1c 0303 	adds.w	r3, ip, r3
 800255e:	f106 30ff 	add.w	r0, r6, #4294967295
 8002562:	f080 811f 	bcs.w	80027a4 <__udivmoddi4+0x298>
 8002566:	4299      	cmp	r1, r3
 8002568:	f240 811c 	bls.w	80027a4 <__udivmoddi4+0x298>
 800256c:	3e02      	subs	r6, #2
 800256e:	4463      	add	r3, ip
 8002570:	1a5b      	subs	r3, r3, r1
 8002572:	b2a4      	uxth	r4, r4
 8002574:	fbb3 f0f8 	udiv	r0, r3, r8
 8002578:	fb08 3310 	mls	r3, r8, r0, r3
 800257c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002580:	fb00 f707 	mul.w	r7, r0, r7
 8002584:	42a7      	cmp	r7, r4
 8002586:	d90a      	bls.n	800259e <__udivmoddi4+0x92>
 8002588:	eb1c 0404 	adds.w	r4, ip, r4
 800258c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002590:	f080 810a 	bcs.w	80027a8 <__udivmoddi4+0x29c>
 8002594:	42a7      	cmp	r7, r4
 8002596:	f240 8107 	bls.w	80027a8 <__udivmoddi4+0x29c>
 800259a:	4464      	add	r4, ip
 800259c:	3802      	subs	r0, #2
 800259e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80025a2:	1be4      	subs	r4, r4, r7
 80025a4:	2600      	movs	r6, #0
 80025a6:	b11d      	cbz	r5, 80025b0 <__udivmoddi4+0xa4>
 80025a8:	40d4      	lsrs	r4, r2
 80025aa:	2300      	movs	r3, #0
 80025ac:	e9c5 4300 	strd	r4, r3, [r5]
 80025b0:	4631      	mov	r1, r6
 80025b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025b6:	428b      	cmp	r3, r1
 80025b8:	d909      	bls.n	80025ce <__udivmoddi4+0xc2>
 80025ba:	2d00      	cmp	r5, #0
 80025bc:	f000 80ef 	beq.w	800279e <__udivmoddi4+0x292>
 80025c0:	2600      	movs	r6, #0
 80025c2:	e9c5 0100 	strd	r0, r1, [r5]
 80025c6:	4630      	mov	r0, r6
 80025c8:	4631      	mov	r1, r6
 80025ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ce:	fab3 f683 	clz	r6, r3
 80025d2:	2e00      	cmp	r6, #0
 80025d4:	d14a      	bne.n	800266c <__udivmoddi4+0x160>
 80025d6:	428b      	cmp	r3, r1
 80025d8:	d302      	bcc.n	80025e0 <__udivmoddi4+0xd4>
 80025da:	4282      	cmp	r2, r0
 80025dc:	f200 80f9 	bhi.w	80027d2 <__udivmoddi4+0x2c6>
 80025e0:	1a84      	subs	r4, r0, r2
 80025e2:	eb61 0303 	sbc.w	r3, r1, r3
 80025e6:	2001      	movs	r0, #1
 80025e8:	469e      	mov	lr, r3
 80025ea:	2d00      	cmp	r5, #0
 80025ec:	d0e0      	beq.n	80025b0 <__udivmoddi4+0xa4>
 80025ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80025f2:	e7dd      	b.n	80025b0 <__udivmoddi4+0xa4>
 80025f4:	b902      	cbnz	r2, 80025f8 <__udivmoddi4+0xec>
 80025f6:	deff      	udf	#255	; 0xff
 80025f8:	fab2 f282 	clz	r2, r2
 80025fc:	2a00      	cmp	r2, #0
 80025fe:	f040 8092 	bne.w	8002726 <__udivmoddi4+0x21a>
 8002602:	eba1 010c 	sub.w	r1, r1, ip
 8002606:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800260a:	fa1f fe8c 	uxth.w	lr, ip
 800260e:	2601      	movs	r6, #1
 8002610:	0c20      	lsrs	r0, r4, #16
 8002612:	fbb1 f3f7 	udiv	r3, r1, r7
 8002616:	fb07 1113 	mls	r1, r7, r3, r1
 800261a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800261e:	fb0e f003 	mul.w	r0, lr, r3
 8002622:	4288      	cmp	r0, r1
 8002624:	d908      	bls.n	8002638 <__udivmoddi4+0x12c>
 8002626:	eb1c 0101 	adds.w	r1, ip, r1
 800262a:	f103 38ff 	add.w	r8, r3, #4294967295
 800262e:	d202      	bcs.n	8002636 <__udivmoddi4+0x12a>
 8002630:	4288      	cmp	r0, r1
 8002632:	f200 80cb 	bhi.w	80027cc <__udivmoddi4+0x2c0>
 8002636:	4643      	mov	r3, r8
 8002638:	1a09      	subs	r1, r1, r0
 800263a:	b2a4      	uxth	r4, r4
 800263c:	fbb1 f0f7 	udiv	r0, r1, r7
 8002640:	fb07 1110 	mls	r1, r7, r0, r1
 8002644:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8002648:	fb0e fe00 	mul.w	lr, lr, r0
 800264c:	45a6      	cmp	lr, r4
 800264e:	d908      	bls.n	8002662 <__udivmoddi4+0x156>
 8002650:	eb1c 0404 	adds.w	r4, ip, r4
 8002654:	f100 31ff 	add.w	r1, r0, #4294967295
 8002658:	d202      	bcs.n	8002660 <__udivmoddi4+0x154>
 800265a:	45a6      	cmp	lr, r4
 800265c:	f200 80bb 	bhi.w	80027d6 <__udivmoddi4+0x2ca>
 8002660:	4608      	mov	r0, r1
 8002662:	eba4 040e 	sub.w	r4, r4, lr
 8002666:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800266a:	e79c      	b.n	80025a6 <__udivmoddi4+0x9a>
 800266c:	f1c6 0720 	rsb	r7, r6, #32
 8002670:	40b3      	lsls	r3, r6
 8002672:	fa22 fc07 	lsr.w	ip, r2, r7
 8002676:	ea4c 0c03 	orr.w	ip, ip, r3
 800267a:	fa20 f407 	lsr.w	r4, r0, r7
 800267e:	fa01 f306 	lsl.w	r3, r1, r6
 8002682:	431c      	orrs	r4, r3
 8002684:	40f9      	lsrs	r1, r7
 8002686:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800268a:	fa00 f306 	lsl.w	r3, r0, r6
 800268e:	fbb1 f8f9 	udiv	r8, r1, r9
 8002692:	0c20      	lsrs	r0, r4, #16
 8002694:	fa1f fe8c 	uxth.w	lr, ip
 8002698:	fb09 1118 	mls	r1, r9, r8, r1
 800269c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80026a0:	fb08 f00e 	mul.w	r0, r8, lr
 80026a4:	4288      	cmp	r0, r1
 80026a6:	fa02 f206 	lsl.w	r2, r2, r6
 80026aa:	d90b      	bls.n	80026c4 <__udivmoddi4+0x1b8>
 80026ac:	eb1c 0101 	adds.w	r1, ip, r1
 80026b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80026b4:	f080 8088 	bcs.w	80027c8 <__udivmoddi4+0x2bc>
 80026b8:	4288      	cmp	r0, r1
 80026ba:	f240 8085 	bls.w	80027c8 <__udivmoddi4+0x2bc>
 80026be:	f1a8 0802 	sub.w	r8, r8, #2
 80026c2:	4461      	add	r1, ip
 80026c4:	1a09      	subs	r1, r1, r0
 80026c6:	b2a4      	uxth	r4, r4
 80026c8:	fbb1 f0f9 	udiv	r0, r1, r9
 80026cc:	fb09 1110 	mls	r1, r9, r0, r1
 80026d0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80026d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80026d8:	458e      	cmp	lr, r1
 80026da:	d908      	bls.n	80026ee <__udivmoddi4+0x1e2>
 80026dc:	eb1c 0101 	adds.w	r1, ip, r1
 80026e0:	f100 34ff 	add.w	r4, r0, #4294967295
 80026e4:	d26c      	bcs.n	80027c0 <__udivmoddi4+0x2b4>
 80026e6:	458e      	cmp	lr, r1
 80026e8:	d96a      	bls.n	80027c0 <__udivmoddi4+0x2b4>
 80026ea:	3802      	subs	r0, #2
 80026ec:	4461      	add	r1, ip
 80026ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80026f2:	fba0 9402 	umull	r9, r4, r0, r2
 80026f6:	eba1 010e 	sub.w	r1, r1, lr
 80026fa:	42a1      	cmp	r1, r4
 80026fc:	46c8      	mov	r8, r9
 80026fe:	46a6      	mov	lr, r4
 8002700:	d356      	bcc.n	80027b0 <__udivmoddi4+0x2a4>
 8002702:	d053      	beq.n	80027ac <__udivmoddi4+0x2a0>
 8002704:	b15d      	cbz	r5, 800271e <__udivmoddi4+0x212>
 8002706:	ebb3 0208 	subs.w	r2, r3, r8
 800270a:	eb61 010e 	sbc.w	r1, r1, lr
 800270e:	fa01 f707 	lsl.w	r7, r1, r7
 8002712:	fa22 f306 	lsr.w	r3, r2, r6
 8002716:	40f1      	lsrs	r1, r6
 8002718:	431f      	orrs	r7, r3
 800271a:	e9c5 7100 	strd	r7, r1, [r5]
 800271e:	2600      	movs	r6, #0
 8002720:	4631      	mov	r1, r6
 8002722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002726:	f1c2 0320 	rsb	r3, r2, #32
 800272a:	40d8      	lsrs	r0, r3
 800272c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002730:	fa21 f303 	lsr.w	r3, r1, r3
 8002734:	4091      	lsls	r1, r2
 8002736:	4301      	orrs	r1, r0
 8002738:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800273c:	fa1f fe8c 	uxth.w	lr, ip
 8002740:	fbb3 f0f7 	udiv	r0, r3, r7
 8002744:	fb07 3610 	mls	r6, r7, r0, r3
 8002748:	0c0b      	lsrs	r3, r1, #16
 800274a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800274e:	fb00 f60e 	mul.w	r6, r0, lr
 8002752:	429e      	cmp	r6, r3
 8002754:	fa04 f402 	lsl.w	r4, r4, r2
 8002758:	d908      	bls.n	800276c <__udivmoddi4+0x260>
 800275a:	eb1c 0303 	adds.w	r3, ip, r3
 800275e:	f100 38ff 	add.w	r8, r0, #4294967295
 8002762:	d22f      	bcs.n	80027c4 <__udivmoddi4+0x2b8>
 8002764:	429e      	cmp	r6, r3
 8002766:	d92d      	bls.n	80027c4 <__udivmoddi4+0x2b8>
 8002768:	3802      	subs	r0, #2
 800276a:	4463      	add	r3, ip
 800276c:	1b9b      	subs	r3, r3, r6
 800276e:	b289      	uxth	r1, r1
 8002770:	fbb3 f6f7 	udiv	r6, r3, r7
 8002774:	fb07 3316 	mls	r3, r7, r6, r3
 8002778:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800277c:	fb06 f30e 	mul.w	r3, r6, lr
 8002780:	428b      	cmp	r3, r1
 8002782:	d908      	bls.n	8002796 <__udivmoddi4+0x28a>
 8002784:	eb1c 0101 	adds.w	r1, ip, r1
 8002788:	f106 38ff 	add.w	r8, r6, #4294967295
 800278c:	d216      	bcs.n	80027bc <__udivmoddi4+0x2b0>
 800278e:	428b      	cmp	r3, r1
 8002790:	d914      	bls.n	80027bc <__udivmoddi4+0x2b0>
 8002792:	3e02      	subs	r6, #2
 8002794:	4461      	add	r1, ip
 8002796:	1ac9      	subs	r1, r1, r3
 8002798:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800279c:	e738      	b.n	8002610 <__udivmoddi4+0x104>
 800279e:	462e      	mov	r6, r5
 80027a0:	4628      	mov	r0, r5
 80027a2:	e705      	b.n	80025b0 <__udivmoddi4+0xa4>
 80027a4:	4606      	mov	r6, r0
 80027a6:	e6e3      	b.n	8002570 <__udivmoddi4+0x64>
 80027a8:	4618      	mov	r0, r3
 80027aa:	e6f8      	b.n	800259e <__udivmoddi4+0x92>
 80027ac:	454b      	cmp	r3, r9
 80027ae:	d2a9      	bcs.n	8002704 <__udivmoddi4+0x1f8>
 80027b0:	ebb9 0802 	subs.w	r8, r9, r2
 80027b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80027b8:	3801      	subs	r0, #1
 80027ba:	e7a3      	b.n	8002704 <__udivmoddi4+0x1f8>
 80027bc:	4646      	mov	r6, r8
 80027be:	e7ea      	b.n	8002796 <__udivmoddi4+0x28a>
 80027c0:	4620      	mov	r0, r4
 80027c2:	e794      	b.n	80026ee <__udivmoddi4+0x1e2>
 80027c4:	4640      	mov	r0, r8
 80027c6:	e7d1      	b.n	800276c <__udivmoddi4+0x260>
 80027c8:	46d0      	mov	r8, sl
 80027ca:	e77b      	b.n	80026c4 <__udivmoddi4+0x1b8>
 80027cc:	3b02      	subs	r3, #2
 80027ce:	4461      	add	r1, ip
 80027d0:	e732      	b.n	8002638 <__udivmoddi4+0x12c>
 80027d2:	4630      	mov	r0, r6
 80027d4:	e709      	b.n	80025ea <__udivmoddi4+0xde>
 80027d6:	4464      	add	r4, ip
 80027d8:	3802      	subs	r0, #2
 80027da:	e742      	b.n	8002662 <__udivmoddi4+0x156>

080027dc <__aeabi_idiv0>:
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop

080027e0 <csp_can_tx_frame>:

/* bad definition of can context so that the CAN receive interrupt can use the CAN interface and driver data */
/* not sure how to improve this, but this means that only the last interface added will be used for CAN receive interrupts */
//can_context_t *ctx = calloc(1, sizeof(*ctx));

static int csp_can_tx_frame(void *driver_data, uint32_t id, const uint8_t *data, uint8_t dlc) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	70fb      	strb	r3, [r7, #3]
	if (dlc > 8) {
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d902      	bls.n	80027fa <csp_can_tx_frame+0x1a>
		return CSP_ERR_INVAL;
 80027f4:	f06f 0301 	mvn.w	r3, #1
 80027f8:	e013      	b.n	8002822 <csp_can_tx_frame+0x42>
	}

	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dlc;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.IDE = CAN_ID_EXT;
 80027fe:	2304      	movs	r3, #4
 8002800:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.ExtId = id;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	61fb      	str	r3, [r7, #28]
	txHeader.TransmitGlobalTime = DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


	uint32_t canMailBox;
	HAL_CAN_AddTxMessage((CAN_HandleTypeDef *)driver_data, &txHeader, data, &canMailBox);
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	f107 0118 	add.w	r1, r7, #24
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f001 fe6a 	bl	80044f4 <HAL_CAN_AddTxMessage>

	return CSP_ERR_NONE;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3730      	adds	r7, #48	; 0x30
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* CAN Receive Interrupt*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800282c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800282e:	b095      	sub	sp, #84	; 0x54
 8002830:	af06      	add	r7, sp, #24
 8002832:	6078      	str	r0, [r7, #4]
	csp_log_warn("CAN Interrupt Called");
 8002834:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002836:	785b      	ldrb	r3, [r3, #1]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
 800283c:	492b      	ldr	r1, [pc, #172]	; (80028ec <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 800283e:	2001      	movs	r0, #1
 8002840:	f7fe f8e0 	bl	8000a04 <do_csp_debug>

	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8] = {0,0,0,0,0,0,0,0};
 8002844:	4a2a      	ldr	r2, [pc, #168]	; (80028f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800284e:	e883 0003 	stmia.w	r3, {r0, r1}
	CSP_BASE_TYPE xTaskWoken = pdFALSE;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
	int error;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData);
 8002856:	f107 0310 	add.w	r3, r7, #16
 800285a:	f107 0218 	add.w	r2, r7, #24
 800285e:	2100      	movs	r1, #0
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f001 ff17 	bl	8004694 <HAL_CAN_GetRxMessage>

	csp_log_warn("Header: DLC:%lu ExtId:%lu FilterMatchIndex:%lu IDE:%lu RTR:%lu StdId:%lu Timestamp:%lu",
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d011      	beq.n	8002892 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 800286e:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8002870:	69fe      	ldr	r6, [r7, #28]
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	69b8      	ldr	r0, [r7, #24]
 800287a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800287c:	9404      	str	r4, [sp, #16]
 800287e:	9003      	str	r0, [sp, #12]
 8002880:	9102      	str	r1, [sp, #8]
 8002882:	9201      	str	r2, [sp, #4]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	4633      	mov	r3, r6
 8002888:	462a      	mov	r2, r5
 800288a:	491a      	ldr	r1, [pc, #104]	; (80028f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800288c:	2001      	movs	r0, #1
 800288e:	f7fe f8b9 	bl	8000a04 <do_csp_debug>
			rxHeader.DLC, rxHeader.ExtId, rxHeader.FilterMatchIndex, rxHeader.IDE, rxHeader.RTR, rxHeader.StdId, rxHeader.Timestamp);

	error = csp_can_rx_stm32(&ctx[0].iface, rxHeader.ExtId, rxData, rxHeader.DLC, &xTaskWoken);
 8002892:	69f9      	ldr	r1, [r7, #28]
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	b2d8      	uxtb	r0, r3
 8002898:	f107 0210 	add.w	r2, r7, #16
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4603      	mov	r3, r0
 80028a4:	4814      	ldr	r0, [pc, #80]	; (80028f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80028a6:	f000 f88d 	bl	80029c4 <csp_can_rx_stm32>
 80028aa:	6378      	str	r0, [r7, #52]	; 0x34
	if(error == CSP_ERR_NONE)
 80028ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
		csp_log_warn("Successfully Handled CAN Packet");
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80028b4:	785b      	ldrb	r3, [r3, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
 80028ba:	4910      	ldr	r1, [pc, #64]	; (80028fc <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80028bc:	2001      	movs	r0, #1
 80028be:	f7fe f8a1 	bl	8000a04 <do_csp_debug>

	if(xTaskWoken) {
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
		portYIELD_FROM_ISR(xTaskWoken);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80028d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	f3bf 8f6f 	isb	sy
	}
//	csp_log_warn("RXBytes: %d", (int)ctx[0].iface.rx_error);
}
 80028de:	bf00      	nop
 80028e0:	373c      	adds	r7, #60	; 0x3c
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000000 	.word	0x20000000
 80028ec:	0800df30 	.word	0x0800df30
 80028f0:	0800dfc0 	.word	0x0800dfc0
 80028f4:	0800df48 	.word	0x0800df48
 80028f8:	20000054 	.word	0x20000054
 80028fc:	0800dfa0 	.word	0x0800dfa0
 8002900:	e000ed04 	.word	0xe000ed04

08002904 <csp_can_stm32_open_and_add_interface>:

int csp_can_stm32_open_and_add_interface(const char *ifname, csp_iface_t **return_iface, int id) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
	if (ifname == NULL) {
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <csp_can_stm32_open_and_add_interface+0x16>
		ifname = CSP_IF_CAN_DEFAULT_NAME;
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <csp_can_stm32_open_and_add_interface+0xb4>)
 8002918:	60fb      	str	r3, [r7, #12]
//	if (ctx == NULL) {
//		return CSP_ERR_NOMEM;
//	}

//	strncpy(ctx[id].iface.name, ifname, sizeof(ctx[id].iface.name) - 1);
	ctx[id].iface.name = ifname;
 800291a:	4a28      	ldr	r2, [pc, #160]	; (80029bc <csp_can_stm32_open_and_add_interface+0xb8>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	214c      	movs	r1, #76	; 0x4c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	330c      	adds	r3, #12
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	601a      	str	r2, [r3, #0]
//	ctx[id].iface.name = ctx[id].name;
	ctx[id].iface.interface_data = &ctx[id].ifdata;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	224c      	movs	r2, #76	; 0x4c
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	4a21      	ldr	r2, [pc, #132]	; (80029bc <csp_can_stm32_open_and_add_interface+0xb8>)
 8002936:	4413      	add	r3, r2
 8002938:	1d1a      	adds	r2, r3, #4
 800293a:	4920      	ldr	r1, [pc, #128]	; (80029bc <csp_can_stm32_open_and_add_interface+0xb8>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	204c      	movs	r0, #76	; 0x4c
 8002940:	fb00 f303 	mul.w	r3, r0, r3
 8002944:	440b      	add	r3, r1
 8002946:	3310      	adds	r3, #16
 8002948:	601a      	str	r2, [r3, #0]
	ctx[id].iface.driver_data = (*return_iface)->driver_data;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	491a      	ldr	r1, [pc, #104]	; (80029bc <csp_can_stm32_open_and_add_interface+0xb8>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	204c      	movs	r0, #76	; 0x4c
 8002956:	fb00 f303 	mul.w	r3, r0, r3
 800295a:	440b      	add	r3, r1
 800295c:	3314      	adds	r3, #20
 800295e:	601a      	str	r2, [r3, #0]
	ctx[id].ifdata.tx_func = csp_can_tx_frame;
 8002960:	4a16      	ldr	r2, [pc, #88]	; (80029bc <csp_can_stm32_open_and_add_interface+0xb8>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	214c      	movs	r1, #76	; 0x4c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3308      	adds	r3, #8
 800296e:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <csp_can_stm32_open_and_add_interface+0xbc>)
 8002970:	601a      	str	r2, [r3, #0]



	/* End of new functionality */

	int res = csp_can_add_interface_stm32(&ctx[id].iface);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	224c      	movs	r2, #76	; 0x4c
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	3308      	adds	r3, #8
 800297c:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <csp_can_stm32_open_and_add_interface+0xb8>)
 800297e:	4413      	add	r3, r2
 8002980:	3304      	adds	r3, #4
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fad4 	bl	8002f30 <csp_can_add_interface_stm32>
 8002988:	6178      	str	r0, [r7, #20]
	if (res != CSP_ERR_NONE) {
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <csp_can_stm32_open_and_add_interface+0x90>
		return res;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	e00d      	b.n	80029b0 <csp_can_stm32_open_and_add_interface+0xac>
	}

	if (return_iface) {
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <csp_can_stm32_open_and_add_interface+0xaa>
		*return_iface = &ctx[id].iface;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	224c      	movs	r2, #76	; 0x4c
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	3308      	adds	r3, #8
 80029a4:	4a05      	ldr	r2, [pc, #20]	; (80029bc <csp_can_stm32_open_and_add_interface+0xb8>)
 80029a6:	4413      	add	r3, r2
 80029a8:	1d1a      	adds	r2, r3, #4
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	601a      	str	r2, [r3, #0]
	}

	return CSP_ERR_NONE;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	0800df2c 	.word	0x0800df2c
 80029bc:	20000048 	.word	0x20000048
 80029c0:	080027e1 	.word	0x080027e1

080029c4 <csp_can_rx_stm32>:
	/* Remaining CFP fragment(s) of a CSP packet */
	CFP_MORE = 1
};

int csp_can_rx_stm32(csp_iface_t *iface, uint32_t id, const uint8_t *data, uint8_t dlc, CSP_BASE_TYPE *task_woken)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	70fb      	strb	r3, [r7, #3]
//	}

//	csp_log_warn("CAN Packet Passed to CSP Interface");

	/* Bind incoming frame to a packet buffer */
	csp_can_pbuf_element_t * buf = csp_can_pbuf_find(id, CFP_ID_CONN_MASK, task_woken);
 80029d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d4:	4998      	ldr	r1, [pc, #608]	; (8002c38 <csp_can_rx_stm32+0x274>)
 80029d6:	68b8      	ldr	r0, [r7, #8]
 80029d8:	f7fe feea 	bl	80017b0 <csp_can_pbuf_find>
 80029dc:	6178      	str	r0, [r7, #20]
	if (buf == NULL) {
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d133      	bne.n	8002a4c <csp_can_rx_stm32+0x88>
//		csp_log_warn("csp_can_pbuf_find returned NULL");
		if (CFP_TYPE(id) == CFP_BEGIN) {
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	0c9b      	lsrs	r3, r3, #18
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d117      	bne.n	8002a20 <csp_can_rx_stm32+0x5c>
			buf = csp_can_pbuf_new(id, task_woken);
 80029f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029f2:	68b8      	ldr	r0, [r7, #8]
 80029f4:	f7fe feac 	bl	8001750 <csp_can_pbuf_new>
 80029f8:	6178      	str	r0, [r7, #20]
			if (buf == NULL) {
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d125      	bne.n	8002a4c <csp_can_rx_stm32+0x88>
				csp_log_warn("No available packet buffer for CAN");
 8002a00:	4b8e      	ldr	r3, [pc, #568]	; (8002c3c <csp_can_rx_stm32+0x278>)
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <csp_can_rx_stm32+0x4c>
 8002a08:	498d      	ldr	r1, [pc, #564]	; (8002c40 <csp_can_rx_stm32+0x27c>)
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f7fd fffa 	bl	8000a04 <do_csp_debug>
				iface->rx_error++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	621a      	str	r2, [r3, #32]
				return CSP_ERR_NOMEM;
 8002a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1e:	e17e      	b.n	8002d1e <csp_can_rx_stm32+0x35a>
			}
		} else {
			csp_log_warn("Out of order id 0x%X remain %u", (int)CFP_ID(id), (int)CFP_REMAIN(id));
 8002a20:	4b86      	ldr	r3, [pc, #536]	; (8002c3c <csp_can_rx_stm32+0x278>)
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <csp_can_rx_stm32+0x78>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	0a9b      	lsrs	r3, r3, #10
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4983      	ldr	r1, [pc, #524]	; (8002c44 <csp_can_rx_stm32+0x280>)
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7fd ffe4 	bl	8000a04 <do_csp_debug>
			iface->frame++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
			return CSP_ERR_INVAL;
 8002a46:	f06f 0301 	mvn.w	r3, #1
 8002a4a:	e168      	b.n	8002d1e <csp_can_rx_stm32+0x35a>
		}
	}

	/* Reset frame data offset */
	uint8_t offset = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	74fb      	strb	r3, [r7, #19]

	switch (CFP_TYPE(id)) {
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0c9b      	lsrs	r3, r3, #18
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <csp_can_rx_stm32+0xa0>
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	f000 809b 	beq.w	8002b98 <csp_can_rx_stm32+0x1d4>
 8002a62:	e14d      	b.n	8002d00 <csp_can_rx_stm32+0x33c>

	case CFP_BEGIN:
		csp_log_warn("CFP_BEGIN");
 8002a64:	4b75      	ldr	r3, [pc, #468]	; (8002c3c <csp_can_rx_stm32+0x278>)
 8002a66:	785b      	ldrb	r3, [r3, #1]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <csp_can_rx_stm32+0xb0>
 8002a6c:	4976      	ldr	r1, [pc, #472]	; (8002c48 <csp_can_rx_stm32+0x284>)
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7fd ffc8 	bl	8000a04 <do_csp_debug>

		/* Discard packet if DLC is less than CSP id + CSP length fields */
		if (dlc < (sizeof(csp_id_t) + sizeof(uint16_t))) {
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	2b05      	cmp	r3, #5
 8002a78:	d811      	bhi.n	8002a9e <csp_can_rx_stm32+0xda>
			csp_log_warn("Short BEGIN frame received");
 8002a7a:	4b70      	ldr	r3, [pc, #448]	; (8002c3c <csp_can_rx_stm32+0x278>)
 8002a7c:	785b      	ldrb	r3, [r3, #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <csp_can_rx_stm32+0xc6>
 8002a82:	4972      	ldr	r1, [pc, #456]	; (8002c4c <csp_can_rx_stm32+0x288>)
 8002a84:	2001      	movs	r0, #1
 8002a86:	f7fd ffbd 	bl	8000a04 <do_csp_debug>
			iface->frame++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c
			csp_can_pbuf_free(buf, task_woken);
 8002a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7fe fe48 	bl	800172c <csp_can_pbuf_free>
			break;
 8002a9c:	e13e      	b.n	8002d1c <csp_can_rx_stm32+0x358>
		}

		/* Check for incomplete frame */
		if (buf->packet != NULL) {
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <csp_can_rx_stm32+0xfe>
			/* Reuse the buffer */
			csp_log_warn("Incomplete frame");
 8002aa6:	4b65      	ldr	r3, [pc, #404]	; (8002c3c <csp_can_rx_stm32+0x278>)
 8002aa8:	785b      	ldrb	r3, [r3, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <csp_can_rx_stm32+0xf2>
 8002aae:	4968      	ldr	r1, [pc, #416]	; (8002c50 <csp_can_rx_stm32+0x28c>)
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f7fd ffa7 	bl	8000a04 <do_csp_debug>
			iface->frame++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ac0:	e023      	b.n	8002b0a <csp_can_rx_stm32+0x146>
		} else {
			/* Get free buffer for frame */
//			csp_log_warn("%ld", task_woken);
			buf->packet = task_woken ? csp_buffer_get_isr(0) : csp_buffer_get(0); // CSP only supports one size
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <csp_can_rx_stm32+0x10e>
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fd fbe5 	bl	8000298 <csp_buffer_get_isr>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	e003      	b.n	8002ada <csp_can_rx_stm32+0x116>
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7fd fc00 	bl	80002d8 <csp_buffer_get>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	60d3      	str	r3, [r2, #12]
			if (buf->packet == NULL) {
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d111      	bne.n	8002b0a <csp_can_rx_stm32+0x146>
				csp_log_error("Failed to get buffer for CSP_BEGIN packet");
 8002ae6:	4b55      	ldr	r3, [pc, #340]	; (8002c3c <csp_can_rx_stm32+0x278>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <csp_can_rx_stm32+0x132>
 8002aee:	4959      	ldr	r1, [pc, #356]	; (8002c54 <csp_can_rx_stm32+0x290>)
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fd ff87 	bl	8000a04 <do_csp_debug>
				iface->frame++;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
				csp_can_pbuf_free(buf, task_woken);
 8002b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7fe fe12 	bl	800172c <csp_can_pbuf_free>
				break;
 8002b08:	e108      	b.n	8002d1c <csp_can_rx_stm32+0x358>
		}

//		csp_log_warn("Got free buffer for frame.");

		/* Copy CSP identifier (header) */
		memcpy(&(buf->packet->id), data, sizeof(buf->packet->id));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	601a      	str	r2, [r3, #0]
		buf->packet->id.ext = csp_ntoh32(buf->packet->id.ext);
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	68dc      	ldr	r4, [r3, #12]
 8002b20:	4610      	mov	r0, r2
 8002b22:	f7fd ffc3 	bl	8000aac <csp_ntoh32>
 8002b26:	4603      	mov	r3, r0
 8002b28:	60e3      	str	r3, [r4, #12]

		/* Copy CSP length (of data) */
		memcpy(&(buf->packet->length), data + sizeof(csp_id_t), sizeof(buf->packet->length));
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	330a      	adds	r3, #10
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	3204      	adds	r2, #4
 8002b34:	8812      	ldrh	r2, [r2, #0]
 8002b36:	b292      	uxth	r2, r2
 8002b38:	801a      	strh	r2, [r3, #0]
		buf->packet->length = csp_ntoh16(buf->packet->length);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	895a      	ldrh	r2, [r3, #10]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	68dc      	ldr	r4, [r3, #12]
 8002b44:	4610      	mov	r0, r2
 8002b46:	f7fd ffac 	bl	8000aa2 <csp_ntoh16>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	8163      	strh	r3, [r4, #10]

//		csp_log_warn("Buffer Packet Length: %u", buf->packet->length);

		/* Check length against max */
		if ((buf->packet->length > MAX_CAN_DATA_SIZE) || (buf->packet->length > csp_buffer_data_size())) {
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	895b      	ldrh	r3, [r3, #10]
 8002b54:	f240 72fa 	movw	r2, #2042	; 0x7fa
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d808      	bhi.n	8002b6e <csp_can_rx_stm32+0x1aa>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	895b      	ldrh	r3, [r3, #10]
 8002b62:	461c      	mov	r4, r3
 8002b64:	f7fd fc8a 	bl	800047c <csp_buffer_data_size>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	429c      	cmp	r4, r3
 8002b6c:	d909      	bls.n	8002b82 <csp_can_rx_stm32+0x1be>
			iface->rx_error++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	621a      	str	r2, [r3, #32]
			csp_can_pbuf_free(buf, task_woken);
 8002b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b7a:	6978      	ldr	r0, [r7, #20]
 8002b7c:	f7fe fdd6 	bl	800172c <csp_can_pbuf_free>
			break;
 8002b80:	e0cc      	b.n	8002d1c <csp_can_rx_stm32+0x358>
		}

//		csp_log_warn("Checked length against max.");

		/* Reset RX count */
		buf->rx_count = 0;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2200      	movs	r2, #0
 8002b86:	801a      	strh	r2, [r3, #0]

		/* Set offset to prevent CSP header from being copied to CSP data */
		offset = sizeof(csp_id_t) + sizeof(uint16_t);
 8002b88:	2306      	movs	r3, #6
 8002b8a:	74fb      	strb	r3, [r7, #19]

		/* Set remain field - increment to include begin packet */
		buf->remain = CFP_REMAIN(id) + 1;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	0a9b      	lsrs	r3, r3, #10
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	605a      	str	r2, [r3, #4]

		/* FALLTHROUGH */

	case CFP_MORE:
		csp_log_warn("CFP_MORE");
 8002b98:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <csp_can_rx_stm32+0x278>)
 8002b9a:	785b      	ldrb	r3, [r3, #1]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <csp_can_rx_stm32+0x1e4>
 8002ba0:	492d      	ldr	r1, [pc, #180]	; (8002c58 <csp_can_rx_stm32+0x294>)
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f7fd ff2e 	bl	8000a04 <do_csp_debug>

		/* Check 'remain' field match */
		if (CFP_REMAIN(id) != buf->remain - 1) {
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	0a9b      	lsrs	r3, r3, #10
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d011      	beq.n	8002bdc <csp_can_rx_stm32+0x218>
			csp_log_error("CAN frame lost in CSP packet");
 8002bb8:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <csp_can_rx_stm32+0x278>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <csp_can_rx_stm32+0x204>
 8002bc0:	4926      	ldr	r1, [pc, #152]	; (8002c5c <csp_can_rx_stm32+0x298>)
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fd ff1e 	bl	8000a04 <do_csp_debug>
			csp_can_pbuf_free(buf, task_woken);
 8002bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bca:	6978      	ldr	r0, [r7, #20]
 8002bcc:	f7fe fdae 	bl	800172c <csp_can_pbuf_free>
			iface->frame++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8002bda:	e09f      	b.n	8002d1c <csp_can_rx_stm32+0x358>
		}

		/* Decrement remaining frames */
		buf->remain--;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	1e5a      	subs	r2, r3, #1
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	605a      	str	r2, [r3, #4]
		csp_log_warn("Buf Remain: %lu", buf->remain);
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <csp_can_rx_stm32+0x278>)
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <csp_can_rx_stm32+0x238>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	491a      	ldr	r1, [pc, #104]	; (8002c60 <csp_can_rx_stm32+0x29c>)
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f7fd ff04 	bl	8000a04 <do_csp_debug>

		/* Check for overflow */
		if ((buf->rx_count + dlc - offset) > buf->packet->length) {
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	441a      	add	r2, r3
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	68d2      	ldr	r2, [r2, #12]
 8002c0e:	8952      	ldrh	r2, [r2, #10]
 8002c10:	4293      	cmp	r3, r2
 8002c12:	dd29      	ble.n	8002c68 <csp_can_rx_stm32+0x2a4>
			csp_log_error("RX buffer overflow");
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <csp_can_rx_stm32+0x278>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <csp_can_rx_stm32+0x260>
 8002c1c:	4911      	ldr	r1, [pc, #68]	; (8002c64 <csp_can_rx_stm32+0x2a0>)
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f7fd fef0 	bl	8000a04 <do_csp_debug>
			iface->frame++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c
			csp_can_pbuf_free(buf, task_woken);
 8002c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c30:	6978      	ldr	r0, [r7, #20]
 8002c32:	f7fe fd7b 	bl	800172c <csp_can_pbuf_free>
//			csp_log_warn("Buf Packet Length: %i", buf->packet->length);
			/* This break is where the problem is */
			break;
 8002c36:	e071      	b.n	8002d1c <csp_can_rx_stm32+0x358>
 8002c38:	1ff803ff 	.word	0x1ff803ff
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	0800dfc8 	.word	0x0800dfc8
 8002c44:	0800dfec 	.word	0x0800dfec
 8002c48:	0800e00c 	.word	0x0800e00c
 8002c4c:	0800e018 	.word	0x0800e018
 8002c50:	0800e034 	.word	0x0800e034
 8002c54:	0800e048 	.word	0x0800e048
 8002c58:	0800e074 	.word	0x0800e074
 8002c5c:	0800e080 	.word	0x0800e080
 8002c60:	0800e0a0 	.word	0x0800e0a0
 8002c64:	0800e0b0 	.word	0x0800e0b0
		}

		/* Copy dlc bytes into buffer */
		memcpy(&buf->packet->data[buf->rx_count], data + offset, dlc - offset);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	3310      	adds	r3, #16
 8002c72:	18d0      	adds	r0, r2, r3
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	18d1      	adds	r1, r2, r3
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	f009 f952 	bl	800bf2a <memcpy>
		buf->rx_count += dlc - offset;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	881a      	ldrh	r2, [r3, #0]
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	b299      	uxth	r1, r3
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	1acb      	subs	r3, r1, r3
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	801a      	strh	r2, [r3, #0]

		csp_log_warn("Checking if more data is expected");
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <csp_can_rx_stm32+0x364>)
 8002ca0:	785b      	ldrb	r3, [r3, #1]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <csp_can_rx_stm32+0x2ea>
 8002ca6:	4921      	ldr	r1, [pc, #132]	; (8002d2c <csp_can_rx_stm32+0x368>)
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f7fd feab 	bl	8000a04 <do_csp_debug>

		/* Check if more data is expected */
		if (buf->rx_count != buf->packet->length)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	881a      	ldrh	r2, [r3, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	895b      	ldrh	r3, [r3, #10]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d12e      	bne.n	8002d1a <csp_can_rx_stm32+0x356>
			/* Another problem causing break (even with promiscuous mode on?) */
			break;

		/* Data is available */
		csp_qfifo_write(buf->packet, iface, task_woken);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc2:	68f9      	ldr	r1, [r7, #12]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe fb81 	bl	80013cc <csp_qfifo_write>

		csp_log_warn("Data should be available!");
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <csp_can_rx_stm32+0x364>)
 8002ccc:	785b      	ldrb	r3, [r3, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <csp_can_rx_stm32+0x316>
 8002cd2:	4917      	ldr	r1, [pc, #92]	; (8002d30 <csp_can_rx_stm32+0x36c>)
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f7fd fe95 	bl	8000a04 <do_csp_debug>

		csp_log_warn("Total Packets Received: %lu", iface->rx);
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <csp_can_rx_stm32+0x364>)
 8002cdc:	785b      	ldrb	r3, [r3, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <csp_can_rx_stm32+0x32c>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4912      	ldr	r1, [pc, #72]	; (8002d34 <csp_can_rx_stm32+0x370>)
 8002cea:	2001      	movs	r0, #1
 8002cec:	f7fd fe8a 	bl	8000a04 <do_csp_debug>

		/* Drop packet buffer reference */
		buf->packet = NULL;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]

		/* Free packet buffer */
		csp_can_pbuf_free(buf, task_woken);
 8002cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf8:	6978      	ldr	r0, [r7, #20]
 8002cfa:	f7fe fd17 	bl	800172c <csp_can_pbuf_free>

		break;
 8002cfe:	e00d      	b.n	8002d1c <csp_can_rx_stm32+0x358>

	default:
		csp_log_warn("Received unknown CFP message type");
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <csp_can_rx_stm32+0x364>)
 8002d02:	785b      	ldrb	r3, [r3, #1]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <csp_can_rx_stm32+0x34c>
 8002d08:	490b      	ldr	r1, [pc, #44]	; (8002d38 <csp_can_rx_stm32+0x374>)
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f7fd fe7a 	bl	8000a04 <do_csp_debug>
		csp_can_pbuf_free(buf, task_woken);
 8002d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7fe fd0a 	bl	800172c <csp_can_pbuf_free>
		break;
 8002d18:	e000      	b.n	8002d1c <csp_can_rx_stm32+0x358>
			break;
 8002d1a:	bf00      	nop
	}

	return CSP_ERR_NONE;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd90      	pop	{r4, r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	0800e0c4 	.word	0x0800e0c4
 8002d30:	0800e0e8 	.word	0x0800e0e8
 8002d34:	0800e104 	.word	0x0800e104
 8002d38:	0800e120 	.word	0x0800e120

08002d3c <csp_can_tx_stm32>:

int csp_can_tx_stm32(const csp_route_t * ifroute, csp_packet_t *packet) {
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b08f      	sub	sp, #60	; 0x3c
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	csp_iface_t * iface = ifroute->iface;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30
	csp_can_interface_data_t * ifdata = iface->interface_data;
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Get an unique CFP id - this should be locked to prevent access from multiple tasks */
	const uint32_t ident = ifdata->cfp_frame_id++;
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	1c59      	adds	r1, r3, #1
 8002d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5a:	6011      	str	r1, [r2, #0]
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check protocol's max length - limit is 1 (first) frame + as many frames that can be specified in 'remain' */
	if (packet->length > MAX_CAN_DATA_SIZE) {
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	895b      	ldrh	r3, [r3, #10]
 8002d62:	f240 72fa 	movw	r2, #2042	; 0x7fa
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d902      	bls.n	8002d70 <csp_can_tx_stm32+0x34>
		return CSP_ERR_TX;
 8002d6a:	f06f 0309 	mvn.w	r3, #9
 8002d6e:	e0db      	b.n	8002f28 <csp_can_tx_stm32+0x1ec>
	}

	/* Insert destination node/via address into the CFP destination field */
	const uint8_t dest = (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : packet->id.dst;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	791b      	ldrb	r3, [r3, #4]
 8002d74:	2bff      	cmp	r3, #255	; 0xff
 8002d76:	d002      	beq.n	8002d7e <csp_can_tx_stm32+0x42>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	791b      	ldrb	r3, [r3, #4]
 8002d7c:	e004      	b.n	8002d88 <csp_can_tx_stm32+0x4c>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	89db      	ldrh	r3, [r3, #14]
 8002d82:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Create CAN identifier */
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	7bdb      	ldrb	r3, [r3, #15]
 8002d90:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	061a      	lsls	r2, r3, #24
			CFP_MAKE_DST(dest) |
 8002d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d9c:	04db      	lsls	r3, r3, #19
 8002d9e:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8002da2:	431a      	orrs	r2, r3
			CFP_MAKE_ID(ident) |
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002daa:	431a      	orrs	r2, r3
			CFP_MAKE_TYPE(CFP_BEGIN) |
			CFP_MAKE_REMAIN((packet->length + CFP_OVERHEAD - 1) / MAX_BYTES_IN_CAN_FRAME));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	895b      	ldrh	r3, [r3, #10]
 8002db0:	3305      	adds	r3, #5
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	029b      	lsls	r3, r3, #10
 8002db6:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	623b      	str	r3, [r7, #32]

	/* Calculate first frame data bytes */
	const uint8_t avail = MAX_BYTES_IN_CAN_FRAME - CFP_OVERHEAD;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	77fb      	strb	r3, [r7, #31]
	uint8_t bytes = (packet->length <= avail) ? packet->length : avail;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	895a      	ldrh	r2, [r3, #10]
 8002dc6:	7ffb      	ldrb	r3, [r7, #31]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d803      	bhi.n	8002dd6 <csp_can_tx_stm32+0x9a>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	895b      	ldrh	r3, [r3, #10]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	e000      	b.n	8002dd8 <csp_can_tx_stm32+0x9c>
 8002dd6:	7ffb      	ldrb	r3, [r7, #31]
 8002dd8:	77bb      	strb	r3, [r7, #30]

	/* Copy CSP headers and data */
	const uint32_t csp_id_be = csp_hton32(packet->id.ext);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fe62 	bl	8000aa8 <csp_hton32>
 8002de4:	4603      	mov	r3, r0
 8002de6:	617b      	str	r3, [r7, #20]
	const uint16_t csp_length_be = csp_hton16(packet->length);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	895b      	ldrh	r3, [r3, #10]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fe55 	bl	8000a9c <csp_hton16>
 8002df2:	4603      	mov	r3, r0
 8002df4:	827b      	strh	r3, [r7, #18]
 8002df6:	697b      	ldr	r3, [r7, #20]

	uint8_t frame_buf[MAX_BYTES_IN_CAN_FRAME];
	memcpy(frame_buf, &csp_id_be, sizeof(csp_id_be));
 8002df8:	60bb      	str	r3, [r7, #8]
	memcpy(frame_buf + sizeof(csp_id_be), &csp_length_be, sizeof(csp_length_be));
 8002dfa:	f107 0308 	add.w	r3, r7, #8
 8002dfe:	3304      	adds	r3, #4
 8002e00:	8a7a      	ldrh	r2, [r7, #18]
 8002e02:	801a      	strh	r2, [r3, #0]
	memcpy(frame_buf + CFP_OVERHEAD, packet->data, bytes);
 8002e04:	f107 0308 	add.w	r3, r7, #8
 8002e08:	3306      	adds	r3, #6
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	f102 0110 	add.w	r1, r2, #16
 8002e10:	7fba      	ldrb	r2, [r7, #30]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f009 f889 	bl	800bf2a <memcpy>

	/* Increment tx counter */
	uint16_t tx_count = bytes;
 8002e18:	7fbb      	ldrb	r3, [r7, #30]
 8002e1a:	86fb      	strh	r3, [r7, #54]	; 0x36

	const csp_can_driver_tx_t tx_func = ifdata->tx_func;
 8002e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	61bb      	str	r3, [r7, #24]

	/* Send first frame */
	if ((tx_func)(iface->driver_data, id, frame_buf, CFP_OVERHEAD + bytes) != CSP_ERR_NONE) {
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	6898      	ldr	r0, [r3, #8]
 8002e26:	7fbb      	ldrb	r3, [r7, #30]
 8002e28:	3306      	adds	r3, #6
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f107 0208 	add.w	r2, r7, #8
 8002e30:	69bc      	ldr	r4, [r7, #24]
 8002e32:	6a39      	ldr	r1, [r7, #32]
 8002e34:	47a0      	blx	r4
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d06c      	beq.n	8002f16 <csp_can_tx_stm32+0x1da>
		//csp_log_warn("Failed to send CAN frame in csp_tx_can");
		iface->tx_error++;
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	61da      	str	r2, [r3, #28]
		return CSP_ERR_DRIVER;
 8002e46:	f06f 030a 	mvn.w	r3, #10
 8002e4a:	e06d      	b.n	8002f28 <csp_can_tx_stm32+0x1ec>
	}

	/* Send next frames if not complete */
	while (tx_count < packet->length) {
		while ( ((((CAN_HandleTypeDef *)(iface->driver_data))->Instance->TSR & CAN_TSR_TME0) != CAN_TSR_TME0) &&
 8002e4c:	bf00      	nop
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e5e:	d011      	beq.n	8002e84 <csp_can_tx_stm32+0x148>
				    ((((CAN_HandleTypeDef *)(iface->driver_data))->Instance->TSR & CAN_TSR_TME1) != CAN_TSR_TME1) &&
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
		while ( ((((CAN_HandleTypeDef *)(iface->driver_data))->Instance->TSR & CAN_TSR_TME0) != CAN_TSR_TME0) &&
 8002e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e70:	d008      	beq.n	8002e84 <csp_can_tx_stm32+0x148>
				    ((((CAN_HandleTypeDef *)(iface->driver_data))->Instance->TSR & CAN_TSR_TME2) != CAN_TSR_TME2) ) {
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
				    ((((CAN_HandleTypeDef *)(iface->driver_data))->Instance->TSR & CAN_TSR_TME1) != CAN_TSR_TME1) &&
 8002e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e82:	d1e4      	bne.n	8002e4e <csp_can_tx_stm32+0x112>
			;
		}


		/* Calculate frame data bytes */
		bytes = (packet->length - tx_count >= MAX_BYTES_IN_CAN_FRAME) ? MAX_BYTES_IN_CAN_FRAME : packet->length - tx_count;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	895b      	ldrh	r3, [r3, #10]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	bfa8      	it	ge
 8002e92:	2308      	movge	r3, #8
 8002e94:	77bb      	strb	r3, [r7, #30]

		/* Prepare identifier */
		id = (CFP_MAKE_SRC(packet->id.src) |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	7bdb      	ldrb	r3, [r3, #15]
 8002e9a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	061a      	lsls	r2, r3, #24
				CFP_MAKE_DST(dest) |
 8002ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ea6:	04db      	lsls	r3, r3, #19
 8002ea8:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
		id = (CFP_MAKE_SRC(packet->id.src) |
 8002eac:	431a      	orrs	r2, r3
				CFP_MAKE_ID(ident) |
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
				CFP_MAKE_DST(dest) |
 8002eb4:	431a      	orrs	r2, r3
				CFP_MAKE_TYPE(CFP_MORE) |
				CFP_MAKE_REMAIN((packet->length - tx_count - bytes + MAX_BYTES_IN_CAN_FRAME - 1) / MAX_BYTES_IN_CAN_FRAME));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	895b      	ldrh	r3, [r3, #10]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ebe:	1ac9      	subs	r1, r1, r3
 8002ec0:	7fbb      	ldrb	r3, [r7, #30]
 8002ec2:	1acb      	subs	r3, r1, r3
 8002ec4:	3307      	adds	r3, #7
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	da00      	bge.n	8002ecc <csp_can_tx_stm32+0x190>
 8002eca:	3307      	adds	r3, #7
 8002ecc:	10db      	asrs	r3, r3, #3
 8002ece:	029b      	lsls	r3, r3, #10
 8002ed0:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
				CFP_MAKE_TYPE(CFP_MORE) |
 8002ed4:	4313      	orrs	r3, r2
		id = (CFP_MAKE_SRC(packet->id.src) |
 8002ed6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eda:	623b      	str	r3, [r7, #32]

		/* Increment tx counter */
		tx_count += bytes;
 8002edc:	7fbb      	ldrb	r3, [r7, #30]
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ee2:	4413      	add	r3, r2
 8002ee4:	86fb      	strh	r3, [r7, #54]	; 0x36



		/* Send frame */
		if ((tx_func)(iface->driver_data, id, packet->data + tx_count - bytes, bytes) != CSP_ERR_NONE) {
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	6898      	ldr	r0, [r3, #8]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f103 0210 	add.w	r2, r3, #16
 8002ef0:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8002ef2:	7fbb      	ldrb	r3, [r7, #30]
 8002ef4:	1acb      	subs	r3, r1, r3
 8002ef6:	441a      	add	r2, r3
 8002ef8:	7fbb      	ldrb	r3, [r7, #30]
 8002efa:	69bc      	ldr	r4, [r7, #24]
 8002efc:	6a39      	ldr	r1, [r7, #32]
 8002efe:	47a0      	blx	r4
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <csp_can_tx_stm32+0x1da>
			//csp_log_warn("Failed to send CAN frame in Tx callback");
			iface->tx_error++;
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	61da      	str	r2, [r3, #28]
			return CSP_ERR_DRIVER;
 8002f10:	f06f 030a 	mvn.w	r3, #10
 8002f14:	e008      	b.n	8002f28 <csp_can_tx_stm32+0x1ec>
	while (tx_count < packet->length) {
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	895b      	ldrh	r3, [r3, #10]
 8002f1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d395      	bcc.n	8002e4c <csp_can_tx_stm32+0x110>
		}
	}

	csp_buffer_free(packet);
 8002f20:	6838      	ldr	r0, [r7, #0]
 8002f22:	f7fd fa3f 	bl	80003a4 <csp_buffer_free>

	return CSP_ERR_NONE;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	373c      	adds	r7, #60	; 0x3c
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd90      	pop	{r4, r7, pc}

08002f30 <csp_can_add_interface_stm32>:

int csp_can_add_interface_stm32(csp_iface_t * iface) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <csp_can_add_interface_stm32+0x1e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <csp_can_add_interface_stm32+0x1e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <csp_can_add_interface_stm32+0x24>
		return CSP_ERR_INVAL;
 8002f4e:	f06f 0301 	mvn.w	r3, #1
 8002f52:	e021      	b.n	8002f98 <csp_can_add_interface_stm32+0x68>
	}

	csp_can_interface_data_t * ifdata = iface->interface_data;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <csp_can_add_interface_stm32+0x38>
		return CSP_ERR_INVAL;
 8002f62:	f06f 0301 	mvn.w	r3, #1
 8002f66:	e017      	b.n	8002f98 <csp_can_add_interface_stm32+0x68>
	}

	if ((iface->mtu == 0) || (iface->mtu > MAX_CAN_DATA_SIZE)) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8a1b      	ldrh	r3, [r3, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <csp_can_add_interface_stm32+0x4c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8a1b      	ldrh	r3, [r3, #16]
 8002f74:	f240 72fa 	movw	r2, #2042	; 0x7fa
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d903      	bls.n	8002f84 <csp_can_add_interface_stm32+0x54>
		iface->mtu = MAX_CAN_DATA_SIZE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f240 72fa 	movw	r2, #2042	; 0x7fa
 8002f82:	821a      	strh	r2, [r3, #16]
	}

	ifdata->cfp_frame_id = 0;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

	iface->nexthop = csp_can_tx_stm32;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <csp_can_add_interface_stm32+0x70>)
 8002f8e:	60da      	str	r2, [r3, #12]

	return csp_iflist_add(iface);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7fd fdd9 	bl	8000b48 <csp_iflist_add>
 8002f96:	4603      	mov	r3, r0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	08002d3d 	.word	0x08002d3d

08002fa4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002fac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002fb0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002fbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002fc0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002fc4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002fcc:	e000      	b.n	8002fd0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002fce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002fd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f9      	beq.n	8002fce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002fda:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002fe4:	687b      	ldr	r3, [r7, #4]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <csp_route_set>:
   @param[in] dest_address destination address.
   @param[in] ifc interface.
   @param[in] via assosicated via address.
   @return #CSP_ERR_NONE on success, or an error code.
*/
static inline int csp_route_set(uint8_t dest_address, csp_iface_t *ifc, uint8_t via) {
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	6039      	str	r1, [r7, #0]
 8002ffc:	71fb      	strb	r3, [r7, #7]
 8002ffe:	4613      	mov	r3, r2
 8003000:	71bb      	strb	r3, [r7, #6]
    return csp_rtable_set(dest_address, CSP_ID_HOST_SIZE, ifc, via);
 8003002:	79bb      	ldrb	r3, [r7, #6]
 8003004:	79f8      	ldrb	r0, [r7, #7]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	2105      	movs	r1, #5
 800300a:	f7fe fc7b 	bl	8001904 <csp_rtable_set>
 800300e:	4603      	mov	r3, r0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <csp_conf_get_defaults>:
} csp_conf_t;

/**
   Get default CSP configuration.
*/
static inline void csp_conf_get_defaults(csp_conf_t * conf) {
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	conf->address = 1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
	conf->hostname = "hostname";
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a13      	ldr	r2, [pc, #76]	; (8003078 <csp_conf_get_defaults+0x60>)
 800302a:	605a      	str	r2, [r3, #4]
	conf->model = "model";
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a13      	ldr	r2, [pc, #76]	; (800307c <csp_conf_get_defaults+0x64>)
 8003030:	609a      	str	r2, [r3, #8]
	conf->revision = "resvision";
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a12      	ldr	r2, [pc, #72]	; (8003080 <csp_conf_get_defaults+0x68>)
 8003036:	60da      	str	r2, [r3, #12]
	conf->conn_max = 10;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	220a      	movs	r2, #10
 800303c:	741a      	strb	r2, [r3, #16]
	conf->conn_queue_length = 10;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	220a      	movs	r2, #10
 8003042:	745a      	strb	r2, [r3, #17]
	conf->fifo_length = 25;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2219      	movs	r2, #25
 8003048:	749a      	strb	r2, [r3, #18]
	conf->port_max_bind = 24;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2218      	movs	r2, #24
 800304e:	74da      	strb	r2, [r3, #19]
	conf->rdp_max_window = 20;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2214      	movs	r2, #20
 8003054:	751a      	strb	r2, [r3, #20]
	conf->buffers = 10;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	220a      	movs	r2, #10
 800305a:	82da      	strh	r2, [r3, #22]
	conf->buffer_data_size = 256;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003062:	831a      	strh	r2, [r3, #24]
	conf->conn_dfl_so = CSP_O_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	0800e144 	.word	0x0800e144
 800307c:	0800e150 	.word	0x0800e150
 8003080:	0800e158 	.word	0x0800e158

08003084 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	e009      	b.n	80030aa <_write+0x26>
		ITM_SendChar((*ptr++));
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	60ba      	str	r2, [r7, #8]
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff80 	bl	8002fa4 <ITM_SendChar>
	for(int i=0; i<len; i++)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	3301      	adds	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	dbf1      	blt.n	8003096 <_write+0x12>
	return len;
 80030b2:	687b      	ldr	r3, [r7, #4]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b09c      	sub	sp, #112	; 0x70
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030c2:	f000 ffa6 	bl	8004012 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030c6:	f000 f8d3 	bl	8003270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030ca:	f000 fa51 	bl	8003570 <MX_GPIO_Init>
  MX_ETH_Init();
 80030ce:	f000 f9a3 	bl	8003418 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80030d2:	f000 f9ef 	bl	80034b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80030d6:	f000 fa1d 	bl	8003514 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 80030da:	f000 f931 	bl	8003340 <MX_CAN1_Init>

  /* USER CODE BEGIN 2 */
  /* Setting the debug level. Only debugging statements up to 'debug_level' will be printed to the debug terminal. */
//  csp_debug_level_t debug_level = CSP_INFO;
  csp_debug_level_t debug_level = CSP_PACKET;
 80030de:	2304      	movs	r3, #4
 80030e0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  for (csp_debug_level_t i = 0; i <= CSP_LOCK; ++i) {
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80030ea:	e013      	b.n	8003114 <main+0x58>
	  csp_debug_set_level(i, (i <= debug_level) ? true: false);
 80030ec:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80030f0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80030f4:	429a      	cmp	r2, r3
 80030f6:	bf94      	ite	ls
 80030f8:	2301      	movls	r3, #1
 80030fa:	2300      	movhi	r3, #0
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fcaf 	bl	8000a68 <csp_debug_set_level>
  for (csp_debug_level_t i = 0; i <= CSP_LOCK; ++i) {
 800310a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800310e:	3301      	adds	r3, #1
 8003110:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003114:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003118:	2b06      	cmp	r3, #6
 800311a:	d9e7      	bls.n	80030ec <main+0x30>
  }

  /* Initialising CSP */
  csp_log_info("Initialising CSP");
 800311c:	4b43      	ldr	r3, [pc, #268]	; (800322c <main+0x170>)
 800311e:	789b      	ldrb	r3, [r3, #2]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <main+0x70>
 8003124:	4942      	ldr	r1, [pc, #264]	; (8003230 <main+0x174>)
 8003126:	2002      	movs	r0, #2
 8003128:	f7fd fc6c 	bl	8000a04 <do_csp_debug>
  csp_conf_t csp_conf;
  csp_conf_get_defaults(&csp_conf);
 800312c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff71 	bl	8003018 <csp_conf_get_defaults>
  uint8_t csp_address = 255;
 8003136:	23ff      	movs	r3, #255	; 0xff
 8003138:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
  csp_conf.address = csp_address;
 800313c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8003140:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  int error = csp_init(&csp_conf);
 8003144:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd fd8b 	bl	8000c64 <csp_init>
 800314e:	66b8      	str	r0, [r7, #104]	; 0x68
  if (error != CSP_ERR_NONE) {
 8003150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <main+0xac>
	  csp_log_error("csp_init() failed, error: %d", error);
 8003156:	4b35      	ldr	r3, [pc, #212]	; (800322c <main+0x170>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <main+0xac>
 800315e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003160:	4934      	ldr	r1, [pc, #208]	; (8003234 <main+0x178>)
 8003162:	2000      	movs	r0, #0
 8003164:	f7fd fc4e 	bl	8000a04 <do_csp_debug>
  }
  /* Add interface(s) */
  csp_iface_t CSP_IF_CAN = {
 8003168:	f107 0308 	add.w	r3, r7, #8
 800316c:	2240      	movs	r2, #64	; 0x40
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f008 fee8 	bl	800bf46 <memset>
 8003176:	4b30      	ldr	r3, [pc, #192]	; (8003238 <main+0x17c>)
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	4b30      	ldr	r3, [pc, #192]	; (800323c <main+0x180>)
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	2340      	movs	r3, #64	; 0x40
 8003180:	833b      	strh	r3, [r7, #24]
		  .name = "CSP IF CAN",
		  .driver_data = &hcan1,
//		  .nexthop = csp_can_tx_stm32,
		  .mtu = 64,
  };
  csp_iface_t *can_iface = &CSP_IF_CAN;
 8003182:	f107 0308 	add.w	r3, r7, #8
 8003186:	607b      	str	r3, [r7, #4]
  error = csp_can_stm32_open_and_add_interface(CSP_IF_CAN.name, &can_iface, 0);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	1d39      	adds	r1, r7, #4
 800318c:	2200      	movs	r2, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fbb8 	bl	8002904 <csp_can_stm32_open_and_add_interface>
 8003194:	66b8      	str	r0, [r7, #104]	; 0x68
  if (error != CSP_ERR_NONE) {
 8003196:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <main+0xf2>
	  csp_log_error("csp_can_stm32_open_and_add_interface() failed, error: %d", error);
 800319c:	4b23      	ldr	r3, [pc, #140]	; (800322c <main+0x170>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <main+0xf2>
 80031a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031a6:	4926      	ldr	r1, [pc, #152]	; (8003240 <main+0x184>)
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fd fc2b 	bl	8000a04 <do_csp_debug>
  }
  /* Setting route table */
  if (can_iface) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <main+0x106>
//	  csp_rtable_set(CSP_DEFAULT_ROUTE, 0, can_iface, CSP_NO_VIA_ADDRESS);
	  csp_route_set(CSP_DEFAULT_ROUTE, can_iface, CSP_NO_VIA_ADDRESS);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	22ff      	movs	r2, #255	; 0xff
 80031b8:	4619      	mov	r1, r3
 80031ba:	2020      	movs	r0, #32
 80031bc:	f7ff ff19 	bl	8002ff2 <csp_route_set>
 80031c0:	e007      	b.n	80031d2 <main+0x116>
  } else {
	  csp_log_info("Couldn't set route table");
 80031c2:	4b1a      	ldr	r3, [pc, #104]	; (800322c <main+0x170>)
 80031c4:	789b      	ldrb	r3, [r3, #2]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <main+0x116>
 80031ca:	491e      	ldr	r1, [pc, #120]	; (8003244 <main+0x188>)
 80031cc:	2002      	movs	r0, #2
 80031ce:	f7fd fc19 	bl	8000a04 <do_csp_debug>
//	  server_address = csp_address;
  }
  /* Start router task with 1000 bytes of stack (priority is only supported on FreeRTOS) */
  if(csp_route_start_task(1000, 1) != CSP_ERR_NONE){
 80031d2:	2101      	movs	r1, #1
 80031d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031d8:	f7fe fa88 	bl	80016ec <csp_route_start_task>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <main+0x136>
	  csp_log_warn("Failed to start router!");
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <main+0x170>)
 80031e4:	785b      	ldrb	r3, [r3, #1]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <main+0x136>
 80031ea:	4917      	ldr	r1, [pc, #92]	; (8003248 <main+0x18c>)
 80031ec:	2001      	movs	r0, #1
 80031ee:	f7fd fc09 	bl	8000a04 <do_csp_debug>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80031f2:	f005 f811 	bl	8008218 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80031f6:	4a15      	ldr	r2, [pc, #84]	; (800324c <main+0x190>)
 80031f8:	2100      	movs	r1, #0
 80031fa:	4815      	ldr	r0, [pc, #84]	; (8003250 <main+0x194>)
 80031fc:	f005 f876 	bl	80082ec <osThreadNew>
 8003200:	4603      	mov	r3, r0
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <main+0x198>)
 8003204:	6013      	str	r3, [r2, #0]

  /* creation of cspSend */
  cspSendHandle = osThreadNew(CSPSend, NULL, &cspSend_attributes);
 8003206:	4a14      	ldr	r2, [pc, #80]	; (8003258 <main+0x19c>)
 8003208:	2100      	movs	r1, #0
 800320a:	4814      	ldr	r0, [pc, #80]	; (800325c <main+0x1a0>)
 800320c:	f005 f86e 	bl	80082ec <osThreadNew>
 8003210:	4603      	mov	r3, r0
 8003212:	4a13      	ldr	r2, [pc, #76]	; (8003260 <main+0x1a4>)
 8003214:	6013      	str	r3, [r2, #0]

  /* creation of cspReceive */
  cspReceiveHandle = osThreadNew(CSPReceive, NULL, &cspReceive_attributes);
 8003216:	4a13      	ldr	r2, [pc, #76]	; (8003264 <main+0x1a8>)
 8003218:	2100      	movs	r1, #0
 800321a:	4813      	ldr	r0, [pc, #76]	; (8003268 <main+0x1ac>)
 800321c:	f005 f866 	bl	80082ec <osThreadNew>
 8003220:	4603      	mov	r3, r0
 8003222:	4a12      	ldr	r2, [pc, #72]	; (800326c <main+0x1b0>)
 8003224:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003226:	f005 f82b 	bl	8008280 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800322a:	e7fe      	b.n	800322a <main+0x16e>
 800322c:	20000000 	.word	0x20000000
 8003230:	0800e184 	.word	0x0800e184
 8003234:	0800e198 	.word	0x0800e198
 8003238:	0800e1b8 	.word	0x0800e1b8
 800323c:	20000474 	.word	0x20000474
 8003240:	0800e1c4 	.word	0x0800e1c4
 8003244:	0800e200 	.word	0x0800e200
 8003248:	0800e21c 	.word	0x0800e21c
 800324c:	0800e2e0 	.word	0x0800e2e0
 8003250:	0800373d 	.word	0x0800373d
 8003254:	20000adc 	.word	0x20000adc
 8003258:	0800e304 	.word	0x0800e304
 800325c:	08003759 	.word	0x08003759
 8003260:	20000ae0 	.word	0x20000ae0
 8003264:	0800e328 	.word	0x0800e328
 8003268:	08003779 	.word	0x08003779
 800326c:	20000ae4 	.word	0x20000ae4

08003270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b094      	sub	sp, #80	; 0x50
 8003274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003276:	f107 0320 	add.w	r3, r7, #32
 800327a:	2230      	movs	r2, #48	; 0x30
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f008 fe61 	bl	800bf46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003294:	f002 fc96 	bl	8005bc4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003298:	4b27      	ldr	r3, [pc, #156]	; (8003338 <SystemClock_Config+0xc8>)
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4a26      	ldr	r2, [pc, #152]	; (8003338 <SystemClock_Config+0xc8>)
 800329e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a2:	6413      	str	r3, [r2, #64]	; 0x40
 80032a4:	4b24      	ldr	r3, [pc, #144]	; (8003338 <SystemClock_Config+0xc8>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <SystemClock_Config+0xcc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80032b8:	4a20      	ldr	r2, [pc, #128]	; (800333c <SystemClock_Config+0xcc>)
 80032ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b1e      	ldr	r3, [pc, #120]	; (800333c <SystemClock_Config+0xcc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032cc:	2301      	movs	r3, #1
 80032ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80032d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032d6:	2302      	movs	r3, #2
 80032d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80032e0:	2304      	movs	r3, #4
 80032e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80032e4:	2348      	movs	r3, #72	; 0x48
 80032e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032e8:	2302      	movs	r3, #2
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80032ec:	2303      	movs	r3, #3
 80032ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032f0:	f107 0320 	add.w	r3, r7, #32
 80032f4:	4618      	mov	r0, r3
 80032f6:	f002 fc75 	bl	8005be4 <HAL_RCC_OscConfig>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003300:	f000 fae0 	bl	80038c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003304:	230f      	movs	r3, #15
 8003306:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003308:	2302      	movs	r3, #2
 800330a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003314:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800331a:	f107 030c 	add.w	r3, r7, #12
 800331e:	2102      	movs	r1, #2
 8003320:	4618      	mov	r0, r3
 8003322:	f002 ff03 	bl	800612c <HAL_RCC_ClockConfig>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800332c:	f000 faca 	bl	80038c4 <Error_Handler>
  }
}
 8003330:	bf00      	nop
 8003332:	3750      	adds	r7, #80	; 0x50
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	40007000 	.word	0x40007000

08003340 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003344:	4b31      	ldr	r3, [pc, #196]	; (800340c <MX_CAN1_Init+0xcc>)
 8003346:	4a32      	ldr	r2, [pc, #200]	; (8003410 <MX_CAN1_Init+0xd0>)
 8003348:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800334a:	4b30      	ldr	r3, [pc, #192]	; (800340c <MX_CAN1_Init+0xcc>)
 800334c:	2204      	movs	r2, #4
 800334e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003350:	4b2e      	ldr	r3, [pc, #184]	; (800340c <MX_CAN1_Init+0xcc>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003356:	4b2d      	ldr	r3, [pc, #180]	; (800340c <MX_CAN1_Init+0xcc>)
 8003358:	2200      	movs	r2, #0
 800335a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800335c:	4b2b      	ldr	r3, [pc, #172]	; (800340c <MX_CAN1_Init+0xcc>)
 800335e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003362:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8003364:	4b29      	ldr	r3, [pc, #164]	; (800340c <MX_CAN1_Init+0xcc>)
 8003366:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800336a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <MX_CAN1_Init+0xcc>)
 800336e:	2200      	movs	r2, #0
 8003370:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003372:	4b26      	ldr	r3, [pc, #152]	; (800340c <MX_CAN1_Init+0xcc>)
 8003374:	2200      	movs	r2, #0
 8003376:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <MX_CAN1_Init+0xcc>)
 800337a:	2200      	movs	r2, #0
 800337c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800337e:	4b23      	ldr	r3, [pc, #140]	; (800340c <MX_CAN1_Init+0xcc>)
 8003380:	2200      	movs	r2, #0
 8003382:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <MX_CAN1_Init+0xcc>)
 8003386:	2200      	movs	r2, #0
 8003388:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <MX_CAN1_Init+0xcc>)
 800338c:	2200      	movs	r2, #0
 800338e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003390:	481e      	ldr	r0, [pc, #120]	; (800340c <MX_CAN1_Init+0xcc>)
 8003392:	f000 fe8f 	bl	80040b4 <HAL_CAN_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800339c:	f000 fa92 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  canfil.FilterBank = 0;
 80033a0:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <MX_CAN1_Init+0xd4>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80033a6:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <MX_CAN1_Init+0xd4>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <MX_CAN1_Init+0xd4>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 80033b2:	4b18      	ldr	r3, [pc, #96]	; (8003414 <MX_CAN1_Init+0xd4>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 80033b8:	4b16      	ldr	r3, [pc, #88]	; (8003414 <MX_CAN1_Init+0xd4>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <MX_CAN1_Init+0xd4>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <MX_CAN1_Init+0xd4>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 80033ca:	4b12      	ldr	r3, [pc, #72]	; (8003414 <MX_CAN1_Init+0xd4>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <MX_CAN1_Init+0xd4>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 80033d6:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <MX_CAN1_Init+0xd4>)
 80033d8:	220e      	movs	r2, #14
 80033da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialise CAN Filter */
  if (HAL_CAN_ConfigFilter(&hcan1, &canfil) != HAL_OK) {
 80033dc:	490d      	ldr	r1, [pc, #52]	; (8003414 <MX_CAN1_Init+0xd4>)
 80033de:	480b      	ldr	r0, [pc, #44]	; (800340c <MX_CAN1_Init+0xcc>)
 80033e0:	f000 ff64 	bl	80042ac <HAL_CAN_ConfigFilter>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_CAN1_Init+0xae>
	  Error_Handler();
 80033ea:	f000 fa6b 	bl	80038c4 <Error_Handler>
  }

  /* Activate CAN Interrupts */
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80033ee:	2102      	movs	r1, #2
 80033f0:	4806      	ldr	r0, [pc, #24]	; (800340c <MX_CAN1_Init+0xcc>)
 80033f2:	f001 fa61 	bl	80048b8 <HAL_CAN_ActivateNotification>

  /* Start the CAN Peripheral */
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80033f6:	4805      	ldr	r0, [pc, #20]	; (800340c <MX_CAN1_Init+0xcc>)
 80033f8:	f001 f838 	bl	800446c <HAL_CAN_Start>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_CAN1_Init+0xc6>
  Error_Handler();
 8003402:	f000 fa5f 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000474 	.word	0x20000474
 8003410:	40006400 	.word	0x40006400
 8003414:	20000ae8 	.word	0x20000ae8

08003418 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800341c:	4b1f      	ldr	r3, [pc, #124]	; (800349c <MX_ETH_Init+0x84>)
 800341e:	4a20      	ldr	r2, [pc, #128]	; (80034a0 <MX_ETH_Init+0x88>)
 8003420:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003422:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <MX_ETH_Init+0x8c>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003428:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <MX_ETH_Init+0x8c>)
 800342a:	2280      	movs	r2, #128	; 0x80
 800342c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <MX_ETH_Init+0x8c>)
 8003430:	22e1      	movs	r2, #225	; 0xe1
 8003432:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <MX_ETH_Init+0x8c>)
 8003436:	2200      	movs	r2, #0
 8003438:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800343a:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <MX_ETH_Init+0x8c>)
 800343c:	2200      	movs	r2, #0
 800343e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003440:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <MX_ETH_Init+0x8c>)
 8003442:	2200      	movs	r2, #0
 8003444:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <MX_ETH_Init+0x84>)
 8003448:	4a16      	ldr	r2, [pc, #88]	; (80034a4 <MX_ETH_Init+0x8c>)
 800344a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <MX_ETH_Init+0x84>)
 800344e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003452:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <MX_ETH_Init+0x84>)
 8003456:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <MX_ETH_Init+0x90>)
 8003458:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <MX_ETH_Init+0x84>)
 800345c:	4a13      	ldr	r2, [pc, #76]	; (80034ac <MX_ETH_Init+0x94>)
 800345e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <MX_ETH_Init+0x84>)
 8003462:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003466:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003468:	480c      	ldr	r0, [pc, #48]	; (800349c <MX_ETH_Init+0x84>)
 800346a:	f001 fd5d 	bl	8004f28 <HAL_ETH_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8003474:	f000 fa26 	bl	80038c4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003478:	2238      	movs	r2, #56	; 0x38
 800347a:	2100      	movs	r1, #0
 800347c:	480c      	ldr	r0, [pc, #48]	; (80034b0 <MX_ETH_Init+0x98>)
 800347e:	f008 fd62 	bl	800bf46 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <MX_ETH_Init+0x98>)
 8003484:	2221      	movs	r2, #33	; 0x21
 8003486:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <MX_ETH_Init+0x98>)
 800348a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800348e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <MX_ETH_Init+0x98>)
 8003492:	2200      	movs	r2, #0
 8003494:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000049c 	.word	0x2000049c
 80034a0:	40028000 	.word	0x40028000
 80034a4:	20000b10 	.word	0x20000b10
 80034a8:	200001a8 	.word	0x200001a8
 80034ac:	20000108 	.word	0x20000108
 80034b0:	2000043c 	.word	0x2000043c

080034b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <MX_USART3_UART_Init+0x58>)
 80034ba:	4a15      	ldr	r2, [pc, #84]	; (8003510 <MX_USART3_UART_Init+0x5c>)
 80034bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <MX_USART3_UART_Init+0x58>)
 80034c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <MX_USART3_UART_Init+0x58>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <MX_USART3_UART_Init+0x58>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <MX_USART3_UART_Init+0x58>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <MX_USART3_UART_Init+0x58>)
 80034da:	220c      	movs	r2, #12
 80034dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <MX_USART3_UART_Init+0x58>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <MX_USART3_UART_Init+0x58>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <MX_USART3_UART_Init+0x58>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <MX_USART3_UART_Init+0x58>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034f6:	4805      	ldr	r0, [pc, #20]	; (800350c <MX_USART3_UART_Init+0x58>)
 80034f8:	f003 ff40 	bl	800737c <HAL_UART_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003502:	f000 f9df 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	2000054c 	.word	0x2000054c
 8003510:	40004800 	.word	0x40004800

08003514 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003518:	4b14      	ldr	r3, [pc, #80]	; (800356c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800351a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800351e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003522:	2206      	movs	r2, #6
 8003524:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003528:	2202      	movs	r2, #2
 800352a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003532:	4b0e      	ldr	r3, [pc, #56]	; (800356c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003534:	2202      	movs	r2, #2
 8003536:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800353a:	2201      	movs	r2, #1
 800353c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003540:	2200      	movs	r2, #0
 8003542:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003544:	4b09      	ldr	r3, [pc, #36]	; (800356c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003546:	2200      	movs	r2, #0
 8003548:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800354c:	2201      	movs	r2, #1
 800354e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003552:	2200      	movs	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003556:	4805      	ldr	r0, [pc, #20]	; (800356c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003558:	f002 f9eb 	bl	8005932 <HAL_PCD_Init>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003562:	f000 f9af 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	200005d4 	.word	0x200005d4

08003570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08c      	sub	sp, #48	; 0x30
 8003574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003576:	f107 031c 	add.w	r3, r7, #28
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003586:	4b47      	ldr	r3, [pc, #284]	; (80036a4 <MX_GPIO_Init+0x134>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a46      	ldr	r2, [pc, #280]	; (80036a4 <MX_GPIO_Init+0x134>)
 800358c:	f043 0304 	orr.w	r3, r3, #4
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b44      	ldr	r3, [pc, #272]	; (80036a4 <MX_GPIO_Init+0x134>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800359e:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4a40      	ldr	r2, [pc, #256]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30
 80035aa:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b6:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a3a      	ldr	r2, [pc, #232]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ce:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a34      	ldr	r2, [pc, #208]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035e6:	4b2f      	ldr	r3, [pc, #188]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a2e      	ldr	r2, [pc, #184]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035ec:	f043 0308 	orr.w	r3, r3, #8
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <MX_GPIO_Init+0x134>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80035fe:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <MX_GPIO_Init+0x134>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <MX_GPIO_Init+0x134>)
 8003604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <MX_GPIO_Init+0x134>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003616:	2200      	movs	r2, #0
 8003618:	f244 0181 	movw	r1, #16513	; 0x4081
 800361c:	4822      	ldr	r0, [pc, #136]	; (80036a8 <MX_GPIO_Init+0x138>)
 800361e:	f002 f955 	bl	80058cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003622:	2200      	movs	r2, #0
 8003624:	2140      	movs	r1, #64	; 0x40
 8003626:	4821      	ldr	r0, [pc, #132]	; (80036ac <MX_GPIO_Init+0x13c>)
 8003628:	f002 f950 	bl	80058cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800362c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003632:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800363c:	f107 031c 	add.w	r3, r7, #28
 8003640:	4619      	mov	r1, r3
 8003642:	481b      	ldr	r0, [pc, #108]	; (80036b0 <MX_GPIO_Init+0x140>)
 8003644:	f001 ff96 	bl	8005574 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003648:	f244 0381 	movw	r3, #16513	; 0x4081
 800364c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800364e:	2301      	movs	r3, #1
 8003650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	2300      	movs	r3, #0
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365a:	f107 031c 	add.w	r3, r7, #28
 800365e:	4619      	mov	r1, r3
 8003660:	4811      	ldr	r0, [pc, #68]	; (80036a8 <MX_GPIO_Init+0x138>)
 8003662:	f001 ff87 	bl	8005574 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003666:	2340      	movs	r3, #64	; 0x40
 8003668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800366a:	2301      	movs	r3, #1
 800366c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003672:	2300      	movs	r3, #0
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003676:	f107 031c 	add.w	r3, r7, #28
 800367a:	4619      	mov	r1, r3
 800367c:	480b      	ldr	r0, [pc, #44]	; (80036ac <MX_GPIO_Init+0x13c>)
 800367e:	f001 ff79 	bl	8005574 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003686:	2300      	movs	r3, #0
 8003688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800368e:	f107 031c 	add.w	r3, r7, #28
 8003692:	4619      	mov	r1, r3
 8003694:	4805      	ldr	r0, [pc, #20]	; (80036ac <MX_GPIO_Init+0x13c>)
 8003696:	f001 ff6d 	bl	8005574 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800369a:	bf00      	nop
 800369c:	3730      	adds	r7, #48	; 0x30
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020400 	.word	0x40020400
 80036ac:	40021800 	.word	0x40021800
 80036b0:	40020800 	.word	0x40020800

080036b4 <SendSimpleCSPPacket>:

/* USER CODE BEGIN 4 */
void SendSimpleCSPPacket(unsigned int size)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	6078      	str	r0, [r7, #4]
	unsigned int i;
	uint32_t timeout;

	timeout = 1000;
 80036bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036c0:	613b      	str	r3, [r7, #16]

	/* Open connection */
	csp_conn_t * conn = csp_connect(CSP_PRIO_NORM, SERVER_ADDRESS, 10, timeout, CSP_SO_NONE);
 80036c2:	2300      	movs	r3, #0
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	220a      	movs	r2, #10
 80036ca:	21ff      	movs	r1, #255	; 0xff
 80036cc:	2002      	movs	r0, #2
 80036ce:	f7fd f860 	bl	8000792 <csp_connect>
 80036d2:	60f8      	str	r0, [r7, #12]
	if (conn == NULL)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d02c      	beq.n	8003734 <SendSimpleCSPPacket+0x80>
		return;

	/* Prepare data */
	csp_packet_t * packet = csp_buffer_get(size);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fc fdfc 	bl	80002d8 <csp_buffer_get>
 80036e0:	60b8      	str	r0, [r7, #8]
	if (packet == NULL)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01d      	beq.n	8003724 <SendSimpleCSPPacket+0x70>
		goto out;

	/* Set data to increasing numbers */
	packet->length = size;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	815a      	strh	r2, [r3, #10]
	for (i = 0; i < size; i++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	e00a      	b.n	800370c <SendSimpleCSPPacket+0x58>
		packet->data[i] = i;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	b2d9      	uxtb	r1, r3
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	4413      	add	r3, r2
 8003700:	3310      	adds	r3, #16
 8003702:	460a      	mov	r2, r1
 8003704:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < size; i++)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3301      	adds	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	d3f0      	bcc.n	80036f6 <SendSimpleCSPPacket+0x42>

	/* Try to send frame */
	if (!csp_send(conn, packet, 0))
 8003714:	2200      	movs	r2, #0
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7fd fc1d 	bl	8000f58 <csp_send>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
		goto out;

	out:
 8003722:	e000      	b.n	8003726 <SendSimpleCSPPacket+0x72>
		goto out;
 8003724:	bf00      	nop
		/* Clean up */
		csp_buffer_free(packet);
 8003726:	68b8      	ldr	r0, [r7, #8]
 8003728:	f7fc fe3c 	bl	80003a4 <csp_buffer_free>
		csp_close(conn);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7fd f82d 	bl	800078c <csp_close>
 8003732:	e000      	b.n	8003736 <SendSimpleCSPPacket+0x82>
		return;
 8003734:	bf00      	nop
}
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003744:	2101      	movs	r1, #1
 8003746:	4803      	ldr	r0, [pc, #12]	; (8003754 <StartDefaultTask+0x18>)
 8003748:	f002 f8d9 	bl	80058fe <HAL_GPIO_TogglePin>
	  osDelay(200);
 800374c:	20c8      	movs	r0, #200	; 0xc8
 800374e:	f004 fe73 	bl	8008438 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003752:	e7f7      	b.n	8003744 <StartDefaultTask+0x8>
 8003754:	40020400 	.word	0x40020400

08003758 <CSPSend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CSPSend */
void CSPSend(void *argument)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CSPSend */
  /* Infinite loop */
//  int ping_response = -1;
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003764:	4803      	ldr	r0, [pc, #12]	; (8003774 <CSPSend+0x1c>)
 8003766:	f002 f8ca 	bl	80058fe <HAL_GPIO_TogglePin>
//	  ping_response = csp_ping(6, 3000, 2, 0);
//	  if(ping_response >= 0) {
//		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  }

	  osDelay(5000);
 800376a:	f241 3088 	movw	r0, #5000	; 0x1388
 800376e:	f004 fe63 	bl	8008438 <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003772:	e7f5      	b.n	8003760 <CSPSend+0x8>
 8003774:	40020400 	.word	0x40020400

08003778 <CSPReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CSPReceive */
void CSPReceive(void *argument)
{
 8003778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800377c:	b089      	sub	sp, #36	; 0x24
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
//  if ((conn = csp_accept(&sock, 10000)) == NULL) {
//	  /* timeout */
//	  csp_log_warn("connection timeout");
//  }

  if(csp_promisc_enable(100) != CSP_ERR_NONE) {
 8003782:	2064      	movs	r0, #100	; 0x64
 8003784:	f7fd fda2 	bl	80012cc <csp_promisc_enable>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <CSPReceive+0x26>
	  csp_log_warn("Couldn't enable promiscuous mode.");
 800378e:	4b3f      	ldr	r3, [pc, #252]	; (800388c <CSPReceive+0x114>)
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <CSPReceive+0x26>
 8003796:	493e      	ldr	r1, [pc, #248]	; (8003890 <CSPReceive+0x118>)
 8003798:	2001      	movs	r0, #1
 800379a:	f7fd f933 	bl	8000a04 <do_csp_debug>
//		  if(conn != NULL) {
//			  csp_close(conn);
//		  }
//	  }

	  packet = csp_promisc_read(2000);
 800379e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80037a2:	f7fd fdad 	bl	8001300 <csp_promisc_read>
 80037a6:	61b8      	str	r0, [r7, #24]

	  if(packet != NULL) {
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d068      	beq.n	8003880 <CSPReceive+0x108>
 80037ae:	466b      	mov	r3, sp
 80037b0:	461e      	mov	r6, r3
//		  csp_log_warn("Packet Data: %d\nPacket Data 16: %d\n Packet Data 32: %d Packet Length: %d", (int)*packet->data, (int)*packet->data16, (int)*packet->data32, (int)packet->length);
//		  csp_log_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %"PRIu16" VIA: %s",
//		  			packet->id.src, packet->id.dst, packet->id.dport,
//		  			packet->id.sport, packet->id.pri, packet->id.flags, packet->length, input.iface->name);
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80037b2:	2180      	movs	r1, #128	; 0x80
 80037b4:	4837      	ldr	r0, [pc, #220]	; (8003894 <CSPReceive+0x11c>)
 80037b6:	f002 f8a2 	bl	80058fe <HAL_GPIO_TogglePin>

		  int full_packet_buffer_size = packet->length*2+1;
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	895b      	ldrh	r3, [r3, #10]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	3301      	adds	r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
		  char full_packet[full_packet_buffer_size];
 80037c4:	6979      	ldr	r1, [r7, #20]
 80037c6:	1e4b      	subs	r3, r1, #1
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	460a      	mov	r2, r1
 80037cc:	2300      	movs	r3, #0
 80037ce:	4614      	mov	r4, r2
 80037d0:	461d      	mov	r5, r3
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	00eb      	lsls	r3, r5, #3
 80037dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037e0:	00e2      	lsls	r2, r4, #3
 80037e2:	460a      	mov	r2, r1
 80037e4:	2300      	movs	r3, #0
 80037e6:	4690      	mov	r8, r2
 80037e8:	4699      	mov	r9, r3
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037fe:	460b      	mov	r3, r1
 8003800:	3307      	adds	r3, #7
 8003802:	08db      	lsrs	r3, r3, #3
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	ebad 0d03 	sub.w	sp, sp, r3
 800380a:	466b      	mov	r3, sp
 800380c:	3300      	adds	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
		  full_packet[full_packet_buffer_size-1] = '\0';
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3b01      	subs	r3, #1
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	2100      	movs	r1, #0
 8003818:	54d1      	strb	r1, [r2, r3]
		  for(int i=0; i<packet->length; i++) {
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	e018      	b.n	8003852 <CSPReceive+0xda>
			  char str_buff[3];
			  snprintf(str_buff, 3, "%x", packet->data[i]);
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	3310      	adds	r3, #16
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	f107 0008 	add.w	r0, r7, #8
 800382e:	4a1a      	ldr	r2, [pc, #104]	; (8003898 <CSPReceive+0x120>)
 8003830:	2103      	movs	r1, #3
 8003832:	f008 fd99 	bl	800c368 <sniprintf>
			  strncpy(full_packet+(i*2), str_buff, 2);
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	f107 0108 	add.w	r1, r7, #8
 8003844:	2202      	movs	r2, #2
 8003846:	4618      	mov	r0, r3
 8003848:	f008 feab 	bl	800c5a2 <strncpy>
		  for(int i=0; i<packet->length; i++) {
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	3301      	adds	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	895b      	ldrh	r3, [r3, #10]
 8003856:	461a      	mov	r2, r3
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4293      	cmp	r3, r2
 800385c:	dbe0      	blt.n	8003820 <CSPReceive+0xa8>
		  }
//		  csp_log_info("Packet Data: 0x%x", packet->data[0]);
		  csp_log_info("Packet Data: 0x%s", full_packet);
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <CSPReceive+0x114>)
 8003860:	789b      	ldrb	r3, [r3, #2]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d004      	beq.n	8003870 <CSPReceive+0xf8>
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	490c      	ldr	r1, [pc, #48]	; (800389c <CSPReceive+0x124>)
 800386a:	2002      	movs	r0, #2
 800386c:	f7fd f8ca 	bl	8000a04 <do_csp_debug>
		  csp_buffer_free(packet);
 8003870:	69b8      	ldr	r0, [r7, #24]
 8003872:	f7fc fd97 	bl	80003a4 <csp_buffer_free>
		  SendSimpleCSPPacket(4);
 8003876:	2004      	movs	r0, #4
 8003878:	f7ff ff1c 	bl	80036b4 <SendSimpleCSPPacket>
 800387c:	46b5      	mov	sp, r6
 800387e:	e000      	b.n	8003882 <CSPReceive+0x10a>


	  /* Close current connection, and handle next */
//	  csp_close(conn);

	  delay:
 8003880:	bf00      	nop
	  	  osDelay(10);
 8003882:	200a      	movs	r0, #10
 8003884:	f004 fdd8 	bl	8008438 <osDelay>
	  packet = csp_promisc_read(2000);
 8003888:	e789      	b.n	800379e <CSPReceive+0x26>
 800388a:	bf00      	nop
 800388c:	20000000 	.word	0x20000000
 8003890:	0800e234 	.word	0x0800e234
 8003894:	40020400 	.word	0x40020400
 8003898:	0800e258 	.word	0x0800e258
 800389c:	0800e25c 	.word	0x0800e25c

080038a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80038b2:	f000 fbbb 	bl	800402c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40001000 	.word	0x40001000

080038c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038c8:	b672      	cpsid	i
}
 80038ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038cc:	e7fe      	b.n	80038cc <Error_Handler+0x8>
	...

080038d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_MspInit+0x4c>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	4a10      	ldr	r2, [pc, #64]	; (800391c <HAL_MspInit+0x4c>)
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6413      	str	r3, [r2, #64]	; 0x40
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <HAL_MspInit+0x4c>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_MspInit+0x4c>)
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	4a0a      	ldr	r2, [pc, #40]	; (800391c <HAL_MspInit+0x4c>)
 80038f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038f8:	6453      	str	r3, [r2, #68]	; 0x44
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <HAL_MspInit+0x4c>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	210f      	movs	r1, #15
 800390a:	f06f 0001 	mvn.w	r0, #1
 800390e:	f001 fae1 	bl	8004ed4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800

08003920 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003928:	f107 0314 	add.w	r3, r7, #20
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a24      	ldr	r2, [pc, #144]	; (80039d0 <HAL_CAN_MspInit+0xb0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d141      	bne.n	80039c6 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_CAN_MspInit+0xb4>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <HAL_CAN_MspInit+0xb4>)
 8003948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <HAL_CAN_MspInit+0xb4>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_CAN_MspInit+0xb4>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <HAL_CAN_MspInit+0xb4>)
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_CAN_MspInit+0xb4>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800397c:	2301      	movs	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003984:	2309      	movs	r3, #9
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4619      	mov	r1, r3
 800398e:	4812      	ldr	r0, [pc, #72]	; (80039d8 <HAL_CAN_MspInit+0xb8>)
 8003990:	f001 fdf0 	bl	8005574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399a:	2302      	movs	r3, #2
 800399c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a2:	2303      	movs	r3, #3
 80039a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80039a6:	2309      	movs	r3, #9
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039aa:	f107 0314 	add.w	r3, r7, #20
 80039ae:	4619      	mov	r1, r3
 80039b0:	4809      	ldr	r0, [pc, #36]	; (80039d8 <HAL_CAN_MspInit+0xb8>)
 80039b2:	f001 fddf 	bl	8005574 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80039b6:	2200      	movs	r2, #0
 80039b8:	2105      	movs	r1, #5
 80039ba:	2014      	movs	r0, #20
 80039bc:	f001 fa8a 	bl	8004ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80039c0:	2014      	movs	r0, #20
 80039c2:	f001 faa3 	bl	8004f0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80039c6:	bf00      	nop
 80039c8:	3728      	adds	r7, #40	; 0x28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40006400 	.word	0x40006400
 80039d4:	40023800 	.word	0x40023800
 80039d8:	40020400 	.word	0x40020400

080039dc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	; 0x38
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a4e      	ldr	r2, [pc, #312]	; (8003b34 <HAL_ETH_MspInit+0x158>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	f040 8096 	bne.w	8003b2c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003a00:	4b4d      	ldr	r3, [pc, #308]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	4a4c      	ldr	r2, [pc, #304]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0c:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	4a46      	ldr	r2, [pc, #280]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a22:	6313      	str	r3, [r2, #48]	; 0x30
 8003a24:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	4a40      	ldr	r2, [pc, #256]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3c:	4b3e      	ldr	r3, [pc, #248]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a48:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	4a3a      	ldr	r2, [pc, #232]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a4e:	f043 0304 	orr.w	r3, r3, #4
 8003a52:	6313      	str	r3, [r2, #48]	; 0x30
 8003a54:	4b38      	ldr	r3, [pc, #224]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a60:	4b35      	ldr	r3, [pc, #212]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6c:	4b32      	ldr	r3, [pc, #200]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a78:	4b2f      	ldr	r3, [pc, #188]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	4a2e      	ldr	r2, [pc, #184]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	6313      	str	r3, [r2, #48]	; 0x30
 8003a84:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a90:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	4a28      	ldr	r2, [pc, #160]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9c:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <HAL_ETH_MspInit+0x15c>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003aa8:	2332      	movs	r3, #50	; 0x32
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ab8:	230b      	movs	r3, #11
 8003aba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	481e      	ldr	r0, [pc, #120]	; (8003b3c <HAL_ETH_MspInit+0x160>)
 8003ac4:	f001 fd56 	bl	8005574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ac8:	2386      	movs	r3, #134	; 0x86
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003acc:	2302      	movs	r3, #2
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ad8:	230b      	movs	r3, #11
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4817      	ldr	r0, [pc, #92]	; (8003b40 <HAL_ETH_MspInit+0x164>)
 8003ae4:	f001 fd46 	bl	8005574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aee:	2302      	movs	r3, #2
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af6:	2303      	movs	r3, #3
 8003af8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003afa:	230b      	movs	r3, #11
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b02:	4619      	mov	r1, r3
 8003b04:	480f      	ldr	r0, [pc, #60]	; (8003b44 <HAL_ETH_MspInit+0x168>)
 8003b06:	f001 fd35 	bl	8005574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003b0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b1c:	230b      	movs	r3, #11
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b24:	4619      	mov	r1, r3
 8003b26:	4808      	ldr	r0, [pc, #32]	; (8003b48 <HAL_ETH_MspInit+0x16c>)
 8003b28:	f001 fd24 	bl	8005574 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003b2c:	bf00      	nop
 8003b2e:	3738      	adds	r7, #56	; 0x38
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40028000 	.word	0x40028000
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40020800 	.word	0x40020800
 8003b40:	40020000 	.word	0x40020000
 8003b44:	40020400 	.word	0x40020400
 8003b48:	40021800 	.word	0x40021800

08003b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b0aa      	sub	sp, #168	; 0xa8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b64:	f107 0310 	add.w	r3, r7, #16
 8003b68:	2284      	movs	r2, #132	; 0x84
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f008 f9ea 	bl	800bf46 <memset>
  if(huart->Instance==USART3)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a22      	ldr	r2, [pc, #136]	; (8003c00 <HAL_UART_MspInit+0xb4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d13c      	bne.n	8003bf6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003b82:	2300      	movs	r3, #0
 8003b84:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b86:	f107 0310 	add.w	r3, r7, #16
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f002 fd26 	bl	80065dc <HAL_RCCEx_PeriphCLKConfig>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003b96:	f7ff fe95 	bl	80038c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b9a:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <HAL_UART_MspInit+0xb8>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	4a19      	ldr	r2, [pc, #100]	; (8003c04 <HAL_UART_MspInit+0xb8>)
 8003ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba6:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <HAL_UART_MspInit+0xb8>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bb2:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <HAL_UART_MspInit+0xb8>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <HAL_UART_MspInit+0xb8>)
 8003bb8:	f043 0308 	orr.w	r3, r3, #8
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_UART_MspInit+0xb8>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003bca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bde:	2303      	movs	r3, #3
 8003be0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003be4:	2307      	movs	r3, #7
 8003be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4805      	ldr	r0, [pc, #20]	; (8003c08 <HAL_UART_MspInit+0xbc>)
 8003bf2:	f001 fcbf 	bl	8005574 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003bf6:	bf00      	nop
 8003bf8:	37a8      	adds	r7, #168	; 0xa8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40004800 	.word	0x40004800
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40020c00 	.word	0x40020c00

08003c0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b0ac      	sub	sp, #176	; 0xb0
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c24:	f107 0318 	add.w	r3, r7, #24
 8003c28:	2284      	movs	r2, #132	; 0x84
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f008 f98a 	bl	800bf46 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c3a:	d159      	bne.n	8003cf0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003c3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c40:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c48:	f107 0318 	add.w	r3, r7, #24
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f002 fcc5 	bl	80065dc <HAL_RCCEx_PeriphCLKConfig>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003c58:	f7ff fe34 	bl	80038c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5c:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <HAL_PCD_MspInit+0xec>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	4a25      	ldr	r2, [pc, #148]	; (8003cf8 <HAL_PCD_MspInit+0xec>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6313      	str	r3, [r2, #48]	; 0x30
 8003c68:	4b23      	ldr	r3, [pc, #140]	; (8003cf8 <HAL_PCD_MspInit+0xec>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003c74:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003c8e:	230a      	movs	r3, #10
 8003c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4818      	ldr	r0, [pc, #96]	; (8003cfc <HAL_PCD_MspInit+0xf0>)
 8003c9c:	f001 fc6a 	bl	8005574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003cb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4810      	ldr	r0, [pc, #64]	; (8003cfc <HAL_PCD_MspInit+0xf0>)
 8003cbc:	f001 fc5a 	bl	8005574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <HAL_PCD_MspInit+0xec>)
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	4a0c      	ldr	r2, [pc, #48]	; (8003cf8 <HAL_PCD_MspInit+0xec>)
 8003cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cca:	6353      	str	r3, [r2, #52]	; 0x34
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <HAL_PCD_MspInit+0xec>)
 8003cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <HAL_PCD_MspInit+0xec>)
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	4a06      	ldr	r2, [pc, #24]	; (8003cf8 <HAL_PCD_MspInit+0xec>)
 8003cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ce2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <HAL_PCD_MspInit+0xec>)
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003cf0:	bf00      	nop
 8003cf2:	37b0      	adds	r7, #176	; 0xb0
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40020000 	.word	0x40020000

08003d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08e      	sub	sp, #56	; 0x38
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d10:	4b33      	ldr	r3, [pc, #204]	; (8003de0 <HAL_InitTick+0xe0>)
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	4a32      	ldr	r2, [pc, #200]	; (8003de0 <HAL_InitTick+0xe0>)
 8003d16:	f043 0310 	orr.w	r3, r3, #16
 8003d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1c:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <HAL_InitTick+0xe0>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d28:	f107 0210 	add.w	r2, r7, #16
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	4611      	mov	r1, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f002 fc20 	bl	8006578 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d42:	f002 fbf1 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8003d46:	6378      	str	r0, [r7, #52]	; 0x34
 8003d48:	e004      	b.n	8003d54 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d4a:	f002 fbed 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d56:	4a23      	ldr	r2, [pc, #140]	; (8003de4 <HAL_InitTick+0xe4>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	0c9b      	lsrs	r3, r3, #18
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003d62:	4b21      	ldr	r3, [pc, #132]	; (8003de8 <HAL_InitTick+0xe8>)
 8003d64:	4a21      	ldr	r2, [pc, #132]	; (8003dec <HAL_InitTick+0xec>)
 8003d66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003d68:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <HAL_InitTick+0xe8>)
 8003d6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003d70:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_InitTick+0xe8>)
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003d76:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <HAL_InitTick+0xe8>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <HAL_InitTick+0xe8>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d82:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_InitTick+0xe8>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003d88:	4817      	ldr	r0, [pc, #92]	; (8003de8 <HAL_InitTick+0xe8>)
 8003d8a:	f003 f817 	bl	8006dbc <HAL_TIM_Base_Init>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003d94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003d9c:	4812      	ldr	r0, [pc, #72]	; (8003de8 <HAL_InitTick+0xe8>)
 8003d9e:	f003 f86f 	bl	8006e80 <HAL_TIM_Base_Start_IT>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003da8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d111      	bne.n	8003dd4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003db0:	2036      	movs	r0, #54	; 0x36
 8003db2:	f001 f8ab 	bl	8004f0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b0f      	cmp	r3, #15
 8003dba:	d808      	bhi.n	8003dce <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	2036      	movs	r0, #54	; 0x36
 8003dc2:	f001 f887 	bl	8004ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <HAL_InitTick+0xf0>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	e002      	b.n	8003dd4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3738      	adds	r7, #56	; 0x38
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40023800 	.word	0x40023800
 8003de4:	431bde83 	.word	0x431bde83
 8003de8:	20000b18 	.word	0x20000b18
 8003dec:	40001000 	.word	0x40001000
 8003df0:	20000098 	.word	0x20000098

08003df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003df8:	e7fe      	b.n	8003df8 <NMI_Handler+0x4>

08003dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dfe:	e7fe      	b.n	8003dfe <HardFault_Handler+0x4>

08003e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e04:	e7fe      	b.n	8003e04 <MemManage_Handler+0x4>

08003e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e0a:	e7fe      	b.n	8003e0a <BusFault_Handler+0x4>

08003e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e10:	e7fe      	b.n	8003e10 <UsageFault_Handler+0x4>

08003e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e24:	4802      	ldr	r0, [pc, #8]	; (8003e30 <CAN1_RX0_IRQHandler+0x10>)
 8003e26:	f000 fd6d 	bl	8004904 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000474 	.word	0x20000474

08003e34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e38:	4802      	ldr	r0, [pc, #8]	; (8003e44 <TIM6_DAC_IRQHandler+0x10>)
 8003e3a:	f003 f899 	bl	8006f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000b18 	.word	0x20000b18

08003e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return 1;
 8003e4c:	2301      	movs	r3, #1
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <_kill>:

int _kill(int pid, int sig)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e62:	f007 ff3f 	bl	800bce4 <__errno>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2216      	movs	r2, #22
 8003e6a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_exit>:

void _exit (int status)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e80:	f04f 31ff 	mov.w	r1, #4294967295
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ffe7 	bl	8003e58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e8a:	e7fe      	b.n	8003e8a <_exit+0x12>

08003e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e00a      	b.n	8003eb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e9e:	f3af 8000 	nop.w
 8003ea2:	4601      	mov	r1, r0
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	60ba      	str	r2, [r7, #8]
 8003eaa:	b2ca      	uxtb	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	dbf0      	blt.n	8003e9e <_read+0x12>
  }

  return len;
 8003ebc:	687b      	ldr	r3, [r7, #4]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eee:	605a      	str	r2, [r3, #4]
  return 0;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <_isatty>:

int _isatty(int file)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f06:	2301      	movs	r3, #1
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f38:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <_sbrk+0x5c>)
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <_sbrk+0x60>)
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f44:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <_sbrk+0x64>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d102      	bne.n	8003f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <_sbrk+0x64>)
 8003f4e:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <_sbrk+0x68>)
 8003f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <_sbrk+0x64>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d207      	bcs.n	8003f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f60:	f007 fec0 	bl	800bce4 <__errno>
 8003f64:	4603      	mov	r3, r0
 8003f66:	220c      	movs	r2, #12
 8003f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6e:	e009      	b.n	8003f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f70:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <_sbrk+0x64>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f76:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <_sbrk+0x64>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <_sbrk+0x64>)
 8003f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f82:	68fb      	ldr	r3, [r7, #12]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20050000 	.word	0x20050000
 8003f90:	00000400 	.word	0x00000400
 8003f94:	20000b64 	.word	0x20000b64
 8003f98:	20005588 	.word	0x20005588

08003f9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <SystemInit+0x20>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	4a05      	ldr	r2, [pc, #20]	; (8003fbc <SystemInit+0x20>)
 8003fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fb0:	bf00      	nop
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ff8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fc4:	480d      	ldr	r0, [pc, #52]	; (8003ffc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fc6:	490e      	ldr	r1, [pc, #56]	; (8004000 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fc8:	4a0e      	ldr	r2, [pc, #56]	; (8004004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fcc:	e002      	b.n	8003fd4 <LoopCopyDataInit>

08003fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fd2:	3304      	adds	r3, #4

08003fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fd8:	d3f9      	bcc.n	8003fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fda:	4a0b      	ldr	r2, [pc, #44]	; (8004008 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fdc:	4c0b      	ldr	r4, [pc, #44]	; (800400c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fe0:	e001      	b.n	8003fe6 <LoopFillZerobss>

08003fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fe4:	3204      	adds	r2, #4

08003fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fe8:	d3fb      	bcc.n	8003fe2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003fea:	f7ff ffd7 	bl	8003f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fee:	f007 ff75 	bl	800bedc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ff2:	f7ff f863 	bl	80030bc <main>
  bx  lr    
 8003ff6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ff8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004000:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8004004:	0800f3c4 	.word	0x0800f3c4
  ldr r2, =_sbss
 8004008:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 800400c:	20005584 	.word	0x20005584

08004010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004010:	e7fe      	b.n	8004010 <ADC_IRQHandler>

08004012 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004016:	2003      	movs	r0, #3
 8004018:	f000 ff51 	bl	8004ebe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800401c:	200f      	movs	r0, #15
 800401e:	f7ff fe6f 	bl	8003d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004022:	f7ff fc55 	bl	80038d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_IncTick+0x20>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_IncTick+0x24>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4413      	add	r3, r2
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <HAL_IncTick+0x24>)
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	2000009c 	.word	0x2000009c
 8004050:	20000b68 	.word	0x20000b68

08004054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return uwTick;
 8004058:	4b03      	ldr	r3, [pc, #12]	; (8004068 <HAL_GetTick+0x14>)
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000b68 	.word	0x20000b68

0800406c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004074:	f7ff ffee 	bl	8004054 <HAL_GetTick>
 8004078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d005      	beq.n	8004092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <HAL_Delay+0x44>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004092:	bf00      	nop
 8004094:	f7ff ffde 	bl	8004054 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d8f7      	bhi.n	8004094 <HAL_Delay+0x28>
  {
  }
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	2000009c 	.word	0x2000009c

080040b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e0ed      	b.n	80042a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fc24 	bl	8003920 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040e8:	f7ff ffb4 	bl	8004054 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040ee:	e012      	b.n	8004116 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040f0:	f7ff ffb0 	bl	8004054 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b0a      	cmp	r3, #10
 80040fc:	d90b      	bls.n	8004116 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2205      	movs	r2, #5
 800410e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0c5      	b.n	80042a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0e5      	beq.n	80040f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0202 	bic.w	r2, r2, #2
 8004132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004134:	f7ff ff8e 	bl	8004054 <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800413a:	e012      	b.n	8004162 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800413c:	f7ff ff8a 	bl	8004054 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b0a      	cmp	r3, #10
 8004148:	d90b      	bls.n	8004162 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2205      	movs	r2, #5
 800415a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e09f      	b.n	80042a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7e1b      	ldrb	r3, [r3, #24]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d108      	bne.n	800418a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	e007      	b.n	800419a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004198:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	7e5b      	ldrb	r3, [r3, #25]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d108      	bne.n	80041b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e007      	b.n	80041c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7e9b      	ldrb	r3, [r3, #26]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d108      	bne.n	80041de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0220 	orr.w	r2, r2, #32
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e007      	b.n	80041ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0220 	bic.w	r2, r2, #32
 80041ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	7edb      	ldrb	r3, [r3, #27]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d108      	bne.n	8004208 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0210 	bic.w	r2, r2, #16
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e007      	b.n	8004218 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0210 	orr.w	r2, r2, #16
 8004216:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	7f1b      	ldrb	r3, [r3, #28]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d108      	bne.n	8004232 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0208 	orr.w	r2, r2, #8
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e007      	b.n	8004242 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0208 	bic.w	r2, r2, #8
 8004240:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	7f5b      	ldrb	r3, [r3, #29]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d108      	bne.n	800425c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0204 	orr.w	r2, r2, #4
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e007      	b.n	800426c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0204 	bic.w	r2, r2, #4
 800426a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	ea42 0103 	orr.w	r1, r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	1e5a      	subs	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80042c4:	7cfb      	ldrb	r3, [r7, #19]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d003      	beq.n	80042d2 <HAL_CAN_ConfigFilter+0x26>
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	f040 80be 	bne.w	800444e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80042d2:	4b65      	ldr	r3, [pc, #404]	; (8004468 <HAL_CAN_ConfigFilter+0x1bc>)
 80042d4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042dc:	f043 0201 	orr.w	r2, r3, #1
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	431a      	orrs	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2201      	movs	r2, #1
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	43db      	mvns	r3, r3
 8004324:	401a      	ands	r2, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d123      	bne.n	800437c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	43db      	mvns	r3, r3
 800433e:	401a      	ands	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004356:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3248      	adds	r2, #72	; 0x48
 800435c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004370:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004372:	6979      	ldr	r1, [r7, #20]
 8004374:	3348      	adds	r3, #72	; 0x48
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	440b      	add	r3, r1
 800437a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d122      	bne.n	80043ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	431a      	orrs	r2, r3
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80043a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	3248      	adds	r2, #72	; 0x48
 80043aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043c0:	6979      	ldr	r1, [r7, #20]
 80043c2:	3348      	adds	r3, #72	; 0x48
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	440b      	add	r3, r1
 80043c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	43db      	mvns	r3, r3
 80043dc:	401a      	ands	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80043e4:	e007      	b.n	80043f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	43db      	mvns	r3, r3
 8004408:	401a      	ands	r2, r3
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004410:	e007      	b.n	8004422 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	431a      	orrs	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d107      	bne.n	800443a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	431a      	orrs	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004440:	f023 0201 	bic.w	r2, r3, #1
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e006      	b.n	800445c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40006400 	.word	0x40006400

0800446c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d12e      	bne.n	80044de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004498:	f7ff fddc 	bl	8004054 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800449e:	e012      	b.n	80044c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044a0:	f7ff fdd8 	bl	8004054 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b0a      	cmp	r3, #10
 80044ac:	d90b      	bls.n	80044c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2205      	movs	r2, #5
 80044be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e012      	b.n	80044ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e5      	bne.n	80044a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e006      	b.n	80044ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004508:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004512:	7ffb      	ldrb	r3, [r7, #31]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d003      	beq.n	8004520 <HAL_CAN_AddTxMessage+0x2c>
 8004518:	7ffb      	ldrb	r3, [r7, #31]
 800451a:	2b02      	cmp	r3, #2
 800451c:	f040 80ad 	bne.w	800467a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 8095 	beq.w	800466a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	0e1b      	lsrs	r3, r3, #24
 8004544:	f003 0303 	and.w	r3, r3, #3
 8004548:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800454a:	2201      	movs	r2, #1
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	409a      	lsls	r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10d      	bne.n	8004578 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	6809      	ldr	r1, [r1, #0]
 800456a:	431a      	orrs	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3318      	adds	r3, #24
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	440b      	add	r3, r1
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e00f      	b.n	8004598 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004582:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800458c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	3318      	adds	r3, #24
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	440b      	add	r3, r1
 8004596:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6819      	ldr	r1, [r3, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3318      	adds	r3, #24
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	440b      	add	r3, r1
 80045a8:	3304      	adds	r3, #4
 80045aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	7d1b      	ldrb	r3, [r3, #20]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d111      	bne.n	80045d8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	3318      	adds	r3, #24
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	4413      	add	r3, r2
 80045c0:	3304      	adds	r3, #4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	6811      	ldr	r1, [r2, #0]
 80045c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	3318      	adds	r3, #24
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	440b      	add	r3, r1
 80045d4:	3304      	adds	r3, #4
 80045d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3307      	adds	r3, #7
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	061a      	lsls	r2, r3, #24
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3306      	adds	r3, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	041b      	lsls	r3, r3, #16
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3305      	adds	r3, #5
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	4313      	orrs	r3, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	3204      	adds	r2, #4
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	4610      	mov	r0, r2
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	6811      	ldr	r1, [r2, #0]
 8004600:	ea43 0200 	orr.w	r2, r3, r0
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	440b      	add	r3, r1
 800460a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800460e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3303      	adds	r3, #3
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	061a      	lsls	r2, r3, #24
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3302      	adds	r3, #2
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	041b      	lsls	r3, r3, #16
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3301      	adds	r3, #1
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	021b      	lsls	r3, r3, #8
 800462a:	4313      	orrs	r3, r2
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	7812      	ldrb	r2, [r2, #0]
 8004630:	4610      	mov	r0, r2
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	6811      	ldr	r1, [r2, #0]
 8004636:	ea43 0200 	orr.w	r2, r3, r0
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	440b      	add	r3, r1
 8004640:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004644:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	3318      	adds	r3, #24
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	4413      	add	r3, r2
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	6811      	ldr	r1, [r2, #0]
 8004658:	f043 0201 	orr.w	r2, r3, #1
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	3318      	adds	r3, #24
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	440b      	add	r3, r1
 8004664:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e00e      	b.n	8004688 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e006      	b.n	8004688 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
  }
}
 8004688:	4618      	mov	r0, r3
 800468a:	3724      	adds	r7, #36	; 0x24
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d003      	beq.n	80046b8 <HAL_CAN_GetRxMessage+0x24>
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	f040 80f3 	bne.w	800489e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10e      	bne.n	80046dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d116      	bne.n	80046fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0e7      	b.n	80048ac <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d107      	bne.n	80046fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0d8      	b.n	80048ac <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	331b      	adds	r3, #27
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	4413      	add	r3, r2
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0204 	and.w	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10c      	bne.n	8004732 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	331b      	adds	r3, #27
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	4413      	add	r3, r2
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	0d5b      	lsrs	r3, r3, #21
 8004728:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	e00b      	b.n	800474a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	331b      	adds	r3, #27
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	4413      	add	r3, r2
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	08db      	lsrs	r3, r3, #3
 8004742:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	331b      	adds	r3, #27
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	4413      	add	r3, r2
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0202 	and.w	r2, r3, #2
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	331b      	adds	r3, #27
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	4413      	add	r3, r2
 800476c:	3304      	adds	r3, #4
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	331b      	adds	r3, #27
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	4413      	add	r3, r2
 8004784:	3304      	adds	r3, #4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	b2da      	uxtb	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	331b      	adds	r3, #27
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	4413      	add	r3, r2
 800479c:	3304      	adds	r3, #4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	0a1a      	lsrs	r2, r3, #8
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	3301      	adds	r3, #1
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	0c1a      	lsrs	r2, r3, #16
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	3302      	adds	r3, #2
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	0e1a      	lsrs	r2, r3, #24
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	3303      	adds	r3, #3
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	4413      	add	r3, r2
 8004816:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	3304      	adds	r3, #4
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	4413      	add	r3, r2
 800482e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0a1a      	lsrs	r2, r3, #8
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	3305      	adds	r3, #5
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	4413      	add	r3, r2
 8004848:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	0c1a      	lsrs	r2, r3, #16
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	3306      	adds	r3, #6
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	4413      	add	r3, r2
 8004862:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0e1a      	lsrs	r2, r3, #24
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	3307      	adds	r3, #7
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d108      	bne.n	800488a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0220 	orr.w	r2, r2, #32
 8004886:	60da      	str	r2, [r3, #12]
 8004888:	e007      	b.n	800489a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0220 	orr.w	r2, r2, #32
 8004898:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e006      	b.n	80048ac <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
  }
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048c8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d002      	beq.n	80048d6 <HAL_CAN_ActivateNotification+0x1e>
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d109      	bne.n	80048ea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6959      	ldr	r1, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e006      	b.n	80048f8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08a      	sub	sp, #40	; 0x28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800490c:	2300      	movs	r3, #0
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d07c      	beq.n	8004a44 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d023      	beq.n	800499c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2201      	movs	r2, #1
 800495a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f983 	bl	8004c72 <HAL_CAN_TxMailbox0CompleteCallback>
 800496c:	e016      	b.n	800499c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d004      	beq.n	8004982 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
 8004980:	e00c      	b.n	800499c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
 8004994:	e002      	b.n	800499c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f989 	bl	8004cae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d024      	beq.n	80049f0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f963 	bl	8004c86 <HAL_CAN_TxMailbox1CompleteCallback>
 80049c0:	e016      	b.n	80049f0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
 80049d4:	e00c      	b.n	80049f0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d004      	beq.n	80049ea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
 80049e8:	e002      	b.n	80049f0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f969 	bl	8004cc2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d024      	beq.n	8004a44 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f943 	bl	8004c9a <HAL_CAN_TxMailbox2CompleteCallback>
 8004a14:	e016      	b.n	8004a44 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
 8004a28:	e00c      	b.n	8004a44 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d004      	beq.n	8004a3e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3c:	e002      	b.n	8004a44 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f949 	bl	8004cd6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2210      	movs	r2, #16
 8004a66:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d006      	beq.n	8004a8a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2208      	movs	r2, #8
 8004a82:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f930 	bl	8004cea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d009      	beq.n	8004aa8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fd fec2 	bl	800282c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2210      	movs	r2, #16
 8004aca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d006      	beq.n	8004aee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f912 	bl	8004d12 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f8f9 	bl	8004cfe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d006      	beq.n	8004b2e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2210      	movs	r2, #16
 8004b26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f8fc 	bl	8004d26 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00b      	beq.n	8004b50 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d006      	beq.n	8004b50 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2208      	movs	r2, #8
 8004b48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8f5 	bl	8004d3a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d07b      	beq.n	8004c52 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d072      	beq.n	8004c4a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	f043 0302 	orr.w	r3, r3, #2
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d043      	beq.n	8004c4a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d03e      	beq.n	8004c4a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bd2:	2b60      	cmp	r3, #96	; 0x60
 8004bd4:	d02b      	beq.n	8004c2e <HAL_CAN_IRQHandler+0x32a>
 8004bd6:	2b60      	cmp	r3, #96	; 0x60
 8004bd8:	d82e      	bhi.n	8004c38 <HAL_CAN_IRQHandler+0x334>
 8004bda:	2b50      	cmp	r3, #80	; 0x50
 8004bdc:	d022      	beq.n	8004c24 <HAL_CAN_IRQHandler+0x320>
 8004bde:	2b50      	cmp	r3, #80	; 0x50
 8004be0:	d82a      	bhi.n	8004c38 <HAL_CAN_IRQHandler+0x334>
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d019      	beq.n	8004c1a <HAL_CAN_IRQHandler+0x316>
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d826      	bhi.n	8004c38 <HAL_CAN_IRQHandler+0x334>
 8004bea:	2b30      	cmp	r3, #48	; 0x30
 8004bec:	d010      	beq.n	8004c10 <HAL_CAN_IRQHandler+0x30c>
 8004bee:	2b30      	cmp	r3, #48	; 0x30
 8004bf0:	d822      	bhi.n	8004c38 <HAL_CAN_IRQHandler+0x334>
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d002      	beq.n	8004bfc <HAL_CAN_IRQHandler+0x2f8>
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d005      	beq.n	8004c06 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004bfa:	e01d      	b.n	8004c38 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	f043 0308 	orr.w	r3, r3, #8
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c04:	e019      	b.n	8004c3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	f043 0310 	orr.w	r3, r3, #16
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c0e:	e014      	b.n	8004c3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	f043 0320 	orr.w	r3, r3, #32
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c18:	e00f      	b.n	8004c3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c22:	e00a      	b.n	8004c3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c2c:	e005      	b.n	8004c3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c36:	e000      	b.n	8004c3a <HAL_CAN_IRQHandler+0x336>
            break;
 8004c38:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004c48:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f872 	bl	8004d4e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004c6a:	bf00      	nop
 8004c6c:	3728      	adds	r7, #40	; 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <__NVIC_SetPriorityGrouping>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <__NVIC_SetPriorityGrouping+0x40>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d80:	4013      	ands	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <__NVIC_SetPriorityGrouping+0x44>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d92:	4a04      	ldr	r2, [pc, #16]	; (8004da4 <__NVIC_SetPriorityGrouping+0x40>)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	60d3      	str	r3, [r2, #12]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	e000ed00 	.word	0xe000ed00
 8004da8:	05fa0000 	.word	0x05fa0000

08004dac <__NVIC_GetPriorityGrouping>:
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004db0:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	f003 0307 	and.w	r3, r3, #7
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000ed00 	.word	0xe000ed00

08004dc8 <__NVIC_EnableIRQ>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	db0b      	blt.n	8004df2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	f003 021f 	and.w	r2, r3, #31
 8004de0:	4907      	ldr	r1, [pc, #28]	; (8004e00 <__NVIC_EnableIRQ+0x38>)
 8004de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	2001      	movs	r0, #1
 8004dea:	fa00 f202 	lsl.w	r2, r0, r2
 8004dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000e100 	.word	0xe000e100

08004e04 <__NVIC_SetPriority>:
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	6039      	str	r1, [r7, #0]
 8004e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	db0a      	blt.n	8004e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	490c      	ldr	r1, [pc, #48]	; (8004e50 <__NVIC_SetPriority+0x4c>)
 8004e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	440b      	add	r3, r1
 8004e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e2c:	e00a      	b.n	8004e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	4908      	ldr	r1, [pc, #32]	; (8004e54 <__NVIC_SetPriority+0x50>)
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	3b04      	subs	r3, #4
 8004e3c:	0112      	lsls	r2, r2, #4
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	440b      	add	r3, r1
 8004e42:	761a      	strb	r2, [r3, #24]
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	e000e100 	.word	0xe000e100
 8004e54:	e000ed00 	.word	0xe000ed00

08004e58 <NVIC_EncodePriority>:
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b089      	sub	sp, #36	; 0x24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f1c3 0307 	rsb	r3, r3, #7
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	bf28      	it	cs
 8004e76:	2304      	movcs	r3, #4
 8004e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	2b06      	cmp	r3, #6
 8004e80:	d902      	bls.n	8004e88 <NVIC_EncodePriority+0x30>
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3b03      	subs	r3, #3
 8004e86:	e000      	b.n	8004e8a <NVIC_EncodePriority+0x32>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43da      	mvns	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eaa:	43d9      	mvns	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb0:	4313      	orrs	r3, r2
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3724      	adds	r7, #36	; 0x24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff ff4c 	bl	8004d64 <__NVIC_SetPriorityGrouping>
}
 8004ecc:	bf00      	nop
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ee6:	f7ff ff61 	bl	8004dac <__NVIC_GetPriorityGrouping>
 8004eea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	6978      	ldr	r0, [r7, #20]
 8004ef2:	f7ff ffb1 	bl	8004e58 <NVIC_EncodePriority>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff ff80 	bl	8004e04 <__NVIC_SetPriority>
}
 8004f04:	bf00      	nop
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff ff54 	bl	8004dc8 <__NVIC_EnableIRQ>
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e06a      	b.n	8005010 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2223      	movs	r2, #35	; 0x23
 8004f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fe fd45 	bl	80039dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f52:	4b31      	ldr	r3, [pc, #196]	; (8005018 <HAL_ETH_Init+0xf0>)
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	4a30      	ldr	r2, [pc, #192]	; (8005018 <HAL_ETH_Init+0xf0>)
 8004f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f5e:	4b2e      	ldr	r3, [pc, #184]	; (8005018 <HAL_ETH_Init+0xf0>)
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f66:	60bb      	str	r3, [r7, #8]
 8004f68:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004f6a:	4b2c      	ldr	r3, [pc, #176]	; (800501c <HAL_ETH_Init+0xf4>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4a2b      	ldr	r2, [pc, #172]	; (800501c <HAL_ETH_Init+0xf4>)
 8004f70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f74:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004f76:	4b29      	ldr	r3, [pc, #164]	; (800501c <HAL_ETH_Init+0xf4>)
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	4927      	ldr	r1, [pc, #156]	; (800501c <HAL_ETH_Init+0xf4>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004f84:	4b25      	ldr	r3, [pc, #148]	; (800501c <HAL_ETH_Init+0xf4>)
 8004f86:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fa0:	f7ff f858 	bl	8004054 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004fa6:	e011      	b.n	8004fcc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004fa8:	f7ff f854 	bl	8004054 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fb6:	d909      	bls.n	8004fcc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2204      	movs	r2, #4
 8004fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	22e0      	movs	r2, #224	; 0xe0
 8004fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e021      	b.n	8005010 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e4      	bne.n	8004fa8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f958 	bl	8005294 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f9ff 	bl	80053e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fa55 	bl	800549a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f9bd 	bl	8005378 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2210      	movs	r2, #16
 800500a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40023800 	.word	0x40023800
 800501c:	40013800 	.word	0x40013800

08005020 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4b51      	ldr	r3, [pc, #324]	; (800517c <ETH_SetMACConfig+0x15c>)
 8005036:	4013      	ands	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	7c1b      	ldrb	r3, [r3, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <ETH_SetMACConfig+0x28>
 8005042:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005046:	e000      	b.n	800504a <ETH_SetMACConfig+0x2a>
 8005048:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	7c5b      	ldrb	r3, [r3, #17]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <ETH_SetMACConfig+0x38>
 8005052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005056:	e000      	b.n	800505a <ETH_SetMACConfig+0x3a>
 8005058:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800505a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005060:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	7fdb      	ldrb	r3, [r3, #31]
 8005066:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005068:	431a      	orrs	r2, r3
                        macconf->Speed |
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800506e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	7f92      	ldrb	r2, [r2, #30]
 8005074:	2a00      	cmp	r2, #0
 8005076:	d102      	bne.n	800507e <ETH_SetMACConfig+0x5e>
 8005078:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800507c:	e000      	b.n	8005080 <ETH_SetMACConfig+0x60>
 800507e:	2200      	movs	r2, #0
                        macconf->Speed |
 8005080:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	7f1b      	ldrb	r3, [r3, #28]
 8005086:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005088:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800508e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	791b      	ldrb	r3, [r3, #4]
 8005094:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005096:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800509e:	2a00      	cmp	r2, #0
 80050a0:	d102      	bne.n	80050a8 <ETH_SetMACConfig+0x88>
 80050a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a6:	e000      	b.n	80050aa <ETH_SetMACConfig+0x8a>
 80050a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80050aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	7bdb      	ldrb	r3, [r3, #15]
 80050b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80050b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80050b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80050c2:	4313      	orrs	r3, r2
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050da:	2001      	movs	r0, #1
 80050dc:	f7fe ffc6 	bl	800406c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80050f6:	4013      	ands	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005106:	2a00      	cmp	r2, #0
 8005108:	d101      	bne.n	800510e <ETH_SetMACConfig+0xee>
 800510a:	2280      	movs	r2, #128	; 0x80
 800510c:	e000      	b.n	8005110 <ETH_SetMACConfig+0xf0>
 800510e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005110:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005116:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800511e:	2a01      	cmp	r2, #1
 8005120:	d101      	bne.n	8005126 <ETH_SetMACConfig+0x106>
 8005122:	2208      	movs	r2, #8
 8005124:	e000      	b.n	8005128 <ETH_SetMACConfig+0x108>
 8005126:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005128:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005130:	2a01      	cmp	r2, #1
 8005132:	d101      	bne.n	8005138 <ETH_SetMACConfig+0x118>
 8005134:	2204      	movs	r2, #4
 8005136:	e000      	b.n	800513a <ETH_SetMACConfig+0x11a>
 8005138:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800513a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8005142:	2a01      	cmp	r2, #1
 8005144:	d101      	bne.n	800514a <ETH_SetMACConfig+0x12a>
 8005146:	2202      	movs	r2, #2
 8005148:	e000      	b.n	800514c <ETH_SetMACConfig+0x12c>
 800514a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800514c:	4313      	orrs	r3, r2
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005164:	2001      	movs	r0, #1
 8005166:	f7fe ff81 	bl	800406c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	619a      	str	r2, [r3, #24]
}
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	ff20810f 	.word	0xff20810f

08005180 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4b3d      	ldr	r3, [pc, #244]	; (8005290 <ETH_SetDMAConfig+0x110>)
 800519a:	4013      	ands	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	7b1b      	ldrb	r3, [r3, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <ETH_SetDMAConfig+0x2c>
 80051a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80051aa:	e000      	b.n	80051ae <ETH_SetDMAConfig+0x2e>
 80051ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	7b5b      	ldrb	r3, [r3, #13]
 80051b2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80051b4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	7f52      	ldrb	r2, [r2, #29]
 80051ba:	2a00      	cmp	r2, #0
 80051bc:	d102      	bne.n	80051c4 <ETH_SetDMAConfig+0x44>
 80051be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051c2:	e000      	b.n	80051c6 <ETH_SetDMAConfig+0x46>
 80051c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80051c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	7b9b      	ldrb	r3, [r3, #14]
 80051cc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80051ce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80051d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	7f1b      	ldrb	r3, [r3, #28]
 80051da:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80051dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	7f9b      	ldrb	r3, [r3, #30]
 80051e2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80051e4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80051ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051f2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80051f4:	4313      	orrs	r3, r2
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005204:	461a      	mov	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005216:	2001      	movs	r0, #1
 8005218:	f7fe ff28 	bl	800406c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005224:	461a      	mov	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	791b      	ldrb	r3, [r3, #4]
 800522e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005234:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800523a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005240:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005248:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800524a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005252:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005258:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005262:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005266:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005274:	2001      	movs	r0, #1
 8005276:	f7fe fef9 	bl	800406c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005282:	461a      	mov	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	f8de3f23 	.word	0xf8de3f23

08005294 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b0a6      	sub	sp, #152	; 0x98
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80052a2:	2301      	movs	r3, #1
 80052a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80052a8:	2300      	movs	r3, #0
 80052aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80052ca:	2300      	movs	r3, #0
 80052cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80052d0:	2300      	movs	r3, #0
 80052d2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80052de:	2300      	movs	r3, #0
 80052e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80052e4:	2300      	movs	r3, #0
 80052e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80052f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052fa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80052fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005300:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005302:	2300      	movs	r3, #0
 8005304:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005308:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800530c:	4619      	mov	r1, r3
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff fe86 	bl	8005020 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005314:	2301      	movs	r3, #1
 8005316:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005318:	2301      	movs	r3, #1
 800531a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005322:	2301      	movs	r3, #1
 8005324:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800532a:	2300      	movs	r3, #0
 800532c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005336:	2300      	movs	r3, #0
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005340:	2301      	movs	r3, #1
 8005342:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005348:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800534a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800534e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005354:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800535c:	2300      	movs	r3, #0
 800535e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005360:	2300      	movs	r3, #0
 8005362:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005364:	f107 0308 	add.w	r3, r7, #8
 8005368:	4619      	mov	r1, r3
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff ff08 	bl	8005180 <ETH_SetDMAConfig>
}
 8005370:	bf00      	nop
 8005372:	3798      	adds	r7, #152	; 0x98
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3305      	adds	r3, #5
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	3204      	adds	r2, #4
 8005390:	7812      	ldrb	r2, [r2, #0]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <ETH_MACAddressConfig+0x68>)
 800539a:	4413      	add	r3, r2
 800539c:	461a      	mov	r2, r3
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3303      	adds	r3, #3
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	061a      	lsls	r2, r3, #24
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3302      	adds	r3, #2
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3301      	adds	r3, #1
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	4313      	orrs	r3, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <ETH_MACAddressConfig+0x6c>)
 80053ca:	4413      	add	r3, r2
 80053cc:	461a      	mov	r2, r3
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	6013      	str	r3, [r2, #0]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40028040 	.word	0x40028040
 80053e4:	40028044 	.word	0x40028044

080053e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e03e      	b.n	8005474 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68d9      	ldr	r1, [r3, #12]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	440b      	add	r3, r1
 8005406:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2200      	movs	r2, #0
 8005412:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2200      	movs	r2, #0
 800541e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	3206      	adds	r2, #6
 8005428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d80c      	bhi.n	8005458 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68d9      	ldr	r1, [r3, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	440b      	add	r3, r1
 8005450:	461a      	mov	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	60da      	str	r2, [r3, #12]
 8005456:	e004      	b.n	8005462 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	461a      	mov	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3301      	adds	r3, #1
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b03      	cmp	r3, #3
 8005478:	d9bd      	bls.n	80053f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800548c:	611a      	str	r2, [r3, #16]
}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e046      	b.n	8005536 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6919      	ldr	r1, [r3, #16]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2200      	movs	r2, #0
 80054c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2200      	movs	r2, #0
 80054ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2200      	movs	r2, #0
 80054d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2200      	movs	r2, #0
 80054dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80054ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	3212      	adds	r2, #18
 8005502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d80c      	bhi.n	8005526 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6919      	ldr	r1, [r3, #16]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	440b      	add	r3, r1
 800551e:	461a      	mov	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	e004      	b.n	8005530 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	461a      	mov	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d9b5      	bls.n	80054a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005566:	60da      	str	r2, [r3, #12]
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005574:	b480      	push	{r7}
 8005576:	b089      	sub	sp, #36	; 0x24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005586:	2300      	movs	r3, #0
 8005588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800558a:	2300      	movs	r3, #0
 800558c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e175      	b.n	8005880 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005594:	2201      	movs	r2, #1
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4013      	ands	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	f040 8164 	bne.w	800587a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d005      	beq.n	80055ca <HAL_GPIO_Init+0x56>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d130      	bne.n	800562c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	2203      	movs	r2, #3
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4013      	ands	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005600:	2201      	movs	r2, #1
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	091b      	lsrs	r3, r3, #4
 8005616:	f003 0201 	and.w	r2, r3, #1
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4313      	orrs	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	2b03      	cmp	r3, #3
 8005636:	d017      	beq.n	8005668 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	2203      	movs	r2, #3
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43db      	mvns	r3, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4013      	ands	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4313      	orrs	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d123      	bne.n	80056bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	08da      	lsrs	r2, r3, #3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3208      	adds	r2, #8
 800567c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	220f      	movs	r2, #15
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	08da      	lsrs	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3208      	adds	r2, #8
 80056b6:	69b9      	ldr	r1, [r7, #24]
 80056b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	2203      	movs	r2, #3
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 0203 	and.w	r2, r3, #3
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80be 	beq.w	800587a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fe:	4b66      	ldr	r3, [pc, #408]	; (8005898 <HAL_GPIO_Init+0x324>)
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	4a65      	ldr	r2, [pc, #404]	; (8005898 <HAL_GPIO_Init+0x324>)
 8005704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005708:	6453      	str	r3, [r2, #68]	; 0x44
 800570a:	4b63      	ldr	r3, [pc, #396]	; (8005898 <HAL_GPIO_Init+0x324>)
 800570c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005716:	4a61      	ldr	r2, [pc, #388]	; (800589c <HAL_GPIO_Init+0x328>)
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	089b      	lsrs	r3, r3, #2
 800571c:	3302      	adds	r3, #2
 800571e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005722:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	220f      	movs	r2, #15
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	43db      	mvns	r3, r3
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	4013      	ands	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a58      	ldr	r2, [pc, #352]	; (80058a0 <HAL_GPIO_Init+0x32c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d037      	beq.n	80057b2 <HAL_GPIO_Init+0x23e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a57      	ldr	r2, [pc, #348]	; (80058a4 <HAL_GPIO_Init+0x330>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d031      	beq.n	80057ae <HAL_GPIO_Init+0x23a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a56      	ldr	r2, [pc, #344]	; (80058a8 <HAL_GPIO_Init+0x334>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d02b      	beq.n	80057aa <HAL_GPIO_Init+0x236>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a55      	ldr	r2, [pc, #340]	; (80058ac <HAL_GPIO_Init+0x338>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d025      	beq.n	80057a6 <HAL_GPIO_Init+0x232>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a54      	ldr	r2, [pc, #336]	; (80058b0 <HAL_GPIO_Init+0x33c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d01f      	beq.n	80057a2 <HAL_GPIO_Init+0x22e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a53      	ldr	r2, [pc, #332]	; (80058b4 <HAL_GPIO_Init+0x340>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d019      	beq.n	800579e <HAL_GPIO_Init+0x22a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a52      	ldr	r2, [pc, #328]	; (80058b8 <HAL_GPIO_Init+0x344>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <HAL_GPIO_Init+0x226>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a51      	ldr	r2, [pc, #324]	; (80058bc <HAL_GPIO_Init+0x348>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00d      	beq.n	8005796 <HAL_GPIO_Init+0x222>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a50      	ldr	r2, [pc, #320]	; (80058c0 <HAL_GPIO_Init+0x34c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <HAL_GPIO_Init+0x21e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a4f      	ldr	r2, [pc, #316]	; (80058c4 <HAL_GPIO_Init+0x350>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d101      	bne.n	800578e <HAL_GPIO_Init+0x21a>
 800578a:	2309      	movs	r3, #9
 800578c:	e012      	b.n	80057b4 <HAL_GPIO_Init+0x240>
 800578e:	230a      	movs	r3, #10
 8005790:	e010      	b.n	80057b4 <HAL_GPIO_Init+0x240>
 8005792:	2308      	movs	r3, #8
 8005794:	e00e      	b.n	80057b4 <HAL_GPIO_Init+0x240>
 8005796:	2307      	movs	r3, #7
 8005798:	e00c      	b.n	80057b4 <HAL_GPIO_Init+0x240>
 800579a:	2306      	movs	r3, #6
 800579c:	e00a      	b.n	80057b4 <HAL_GPIO_Init+0x240>
 800579e:	2305      	movs	r3, #5
 80057a0:	e008      	b.n	80057b4 <HAL_GPIO_Init+0x240>
 80057a2:	2304      	movs	r3, #4
 80057a4:	e006      	b.n	80057b4 <HAL_GPIO_Init+0x240>
 80057a6:	2303      	movs	r3, #3
 80057a8:	e004      	b.n	80057b4 <HAL_GPIO_Init+0x240>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e002      	b.n	80057b4 <HAL_GPIO_Init+0x240>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <HAL_GPIO_Init+0x240>
 80057b2:	2300      	movs	r3, #0
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	f002 0203 	and.w	r2, r2, #3
 80057ba:	0092      	lsls	r2, r2, #2
 80057bc:	4093      	lsls	r3, r2
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80057c4:	4935      	ldr	r1, [pc, #212]	; (800589c <HAL_GPIO_Init+0x328>)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	3302      	adds	r3, #2
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057d2:	4b3d      	ldr	r3, [pc, #244]	; (80058c8 <HAL_GPIO_Init+0x354>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	43db      	mvns	r3, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4013      	ands	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057f6:	4a34      	ldr	r2, [pc, #208]	; (80058c8 <HAL_GPIO_Init+0x354>)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057fc:	4b32      	ldr	r3, [pc, #200]	; (80058c8 <HAL_GPIO_Init+0x354>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	43db      	mvns	r3, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005820:	4a29      	ldr	r2, [pc, #164]	; (80058c8 <HAL_GPIO_Init+0x354>)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005826:	4b28      	ldr	r3, [pc, #160]	; (80058c8 <HAL_GPIO_Init+0x354>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	43db      	mvns	r3, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4013      	ands	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800584a:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <HAL_GPIO_Init+0x354>)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005850:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <HAL_GPIO_Init+0x354>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	43db      	mvns	r3, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4013      	ands	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005874:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <HAL_GPIO_Init+0x354>)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	3301      	adds	r3, #1
 800587e:	61fb      	str	r3, [r7, #28]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b0f      	cmp	r3, #15
 8005884:	f67f ae86 	bls.w	8005594 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	3724      	adds	r7, #36	; 0x24
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40023800 	.word	0x40023800
 800589c:	40013800 	.word	0x40013800
 80058a0:	40020000 	.word	0x40020000
 80058a4:	40020400 	.word	0x40020400
 80058a8:	40020800 	.word	0x40020800
 80058ac:	40020c00 	.word	0x40020c00
 80058b0:	40021000 	.word	0x40021000
 80058b4:	40021400 	.word	0x40021400
 80058b8:	40021800 	.word	0x40021800
 80058bc:	40021c00 	.word	0x40021c00
 80058c0:	40022000 	.word	0x40022000
 80058c4:	40022400 	.word	0x40022400
 80058c8:	40013c00 	.word	0x40013c00

080058cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	807b      	strh	r3, [r7, #2]
 80058d8:	4613      	mov	r3, r2
 80058da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058dc:	787b      	ldrb	r3, [r7, #1]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058e2:	887a      	ldrh	r2, [r7, #2]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80058e8:	e003      	b.n	80058f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80058ea:	887b      	ldrh	r3, [r7, #2]
 80058ec:	041a      	lsls	r2, r3, #16
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	619a      	str	r2, [r3, #24]
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058fe:	b480      	push	{r7}
 8005900:	b085      	sub	sp, #20
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005910:	887a      	ldrh	r2, [r7, #2]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4013      	ands	r3, r2
 8005916:	041a      	lsls	r2, r3, #16
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	43d9      	mvns	r1, r3
 800591c:	887b      	ldrh	r3, [r7, #2]
 800591e:	400b      	ands	r3, r1
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	619a      	str	r2, [r3, #24]
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005934:	b08f      	sub	sp, #60	; 0x3c
 8005936:	af0a      	add	r7, sp, #40	; 0x28
 8005938:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e116      	b.n	8005b72 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fe f954 	bl	8003c0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2203      	movs	r2, #3
 8005968:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f002 f9a4 	bl	8007cd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	687e      	ldr	r6, [r7, #4]
 8005990:	466d      	mov	r5, sp
 8005992:	f106 0410 	add.w	r4, r6, #16
 8005996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800599a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800599c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800599e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80059a6:	1d33      	adds	r3, r6, #4
 80059a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059aa:	6838      	ldr	r0, [r7, #0]
 80059ac:	f002 f938 	bl	8007c20 <USB_CoreInit>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e0d7      	b.n	8005b72 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2100      	movs	r1, #0
 80059c8:	4618      	mov	r0, r3
 80059ca:	f002 f992 	bl	8007cf2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
 80059d2:	e04a      	b.n	8005a6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059d4:	7bfa      	ldrb	r2, [r7, #15]
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	333d      	adds	r3, #61	; 0x3d
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059e8:	7bfa      	ldrb	r2, [r7, #15]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	333c      	adds	r3, #60	; 0x3c
 80059f8:	7bfa      	ldrb	r2, [r7, #15]
 80059fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059fc:	7bfa      	ldrb	r2, [r7, #15]
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	b298      	uxth	r0, r3
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3344      	adds	r3, #68	; 0x44
 8005a10:	4602      	mov	r2, r0
 8005a12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a14:	7bfa      	ldrb	r2, [r7, #15]
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	3340      	adds	r3, #64	; 0x40
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a28:	7bfa      	ldrb	r2, [r7, #15]
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	3348      	adds	r3, #72	; 0x48
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a3c:	7bfa      	ldrb	r2, [r7, #15]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	334c      	adds	r3, #76	; 0x4c
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a50:	7bfa      	ldrb	r2, [r7, #15]
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	4613      	mov	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3354      	adds	r3, #84	; 0x54
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	3301      	adds	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
 8005a6a:	7bfa      	ldrb	r2, [r7, #15]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d3af      	bcc.n	80059d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]
 8005a78:	e044      	b.n	8005b04 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a7a:	7bfa      	ldrb	r2, [r7, #15]
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a90:	7bfa      	ldrb	r2, [r7, #15]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005aa2:	7bfa      	ldrb	r2, [r7, #15]
 8005aa4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005aa6:	7bfa      	ldrb	r2, [r7, #15]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005abc:	7bfa      	ldrb	r2, [r7, #15]
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ad2:	7bfa      	ldrb	r2, [r7, #15]
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ae8:	7bfa      	ldrb	r2, [r7, #15]
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	3301      	adds	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
 8005b04:	7bfa      	ldrb	r2, [r7, #15]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3b5      	bcc.n	8005a7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	687e      	ldr	r6, [r7, #4]
 8005b16:	466d      	mov	r5, sp
 8005b18:	f106 0410 	add.w	r4, r6, #16
 8005b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b28:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b2c:	1d33      	adds	r3, r6, #4
 8005b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b30:	6838      	ldr	r0, [r7, #0]
 8005b32:	f002 f92b 	bl	8007d8c <USB_DevInit>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e014      	b.n	8005b72 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d102      	bne.n	8005b66 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f80b 	bl	8005b7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f002 fae9 	bl	8008142 <USB_DevDisconnect>

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005b7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <HAL_PCDEx_ActivateLPM+0x44>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	10000003 	.word	0x10000003

08005bc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bc8:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a04      	ldr	r2, [pc, #16]	; (8005be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd2:	6013      	str	r3, [r2, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40007000 	.word	0x40007000

08005be4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005bec:	2300      	movs	r3, #0
 8005bee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e291      	b.n	800611e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8087 	beq.w	8005d16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c08:	4b96      	ldr	r3, [pc, #600]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 030c 	and.w	r3, r3, #12
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d00c      	beq.n	8005c2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c14:	4b93      	ldr	r3, [pc, #588]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 030c 	and.w	r3, r3, #12
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d112      	bne.n	8005c46 <HAL_RCC_OscConfig+0x62>
 8005c20:	4b90      	ldr	r3, [pc, #576]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c2c:	d10b      	bne.n	8005c46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c2e:	4b8d      	ldr	r3, [pc, #564]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d06c      	beq.n	8005d14 <HAL_RCC_OscConfig+0x130>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d168      	bne.n	8005d14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e26b      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCC_OscConfig+0x7a>
 8005c50:	4b84      	ldr	r3, [pc, #528]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a83      	ldr	r2, [pc, #524]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	e02e      	b.n	8005cbc <HAL_RCC_OscConfig+0xd8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10c      	bne.n	8005c80 <HAL_RCC_OscConfig+0x9c>
 8005c66:	4b7f      	ldr	r3, [pc, #508]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a7e      	ldr	r2, [pc, #504]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	4b7c      	ldr	r3, [pc, #496]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a7b      	ldr	r2, [pc, #492]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e01d      	b.n	8005cbc <HAL_RCC_OscConfig+0xd8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c88:	d10c      	bne.n	8005ca4 <HAL_RCC_OscConfig+0xc0>
 8005c8a:	4b76      	ldr	r3, [pc, #472]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a75      	ldr	r2, [pc, #468]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	4b73      	ldr	r3, [pc, #460]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a72      	ldr	r2, [pc, #456]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e00b      	b.n	8005cbc <HAL_RCC_OscConfig+0xd8>
 8005ca4:	4b6f      	ldr	r3, [pc, #444]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a6e      	ldr	r2, [pc, #440]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b6c      	ldr	r3, [pc, #432]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a6b      	ldr	r2, [pc, #428]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d013      	beq.n	8005cec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fe f9c6 	bl	8004054 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ccc:	f7fe f9c2 	bl	8004054 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b64      	cmp	r3, #100	; 0x64
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e21f      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cde:	4b61      	ldr	r3, [pc, #388]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0xe8>
 8005cea:	e014      	b.n	8005d16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fe f9b2 	bl	8004054 <HAL_GetTick>
 8005cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf4:	f7fe f9ae 	bl	8004054 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b64      	cmp	r3, #100	; 0x64
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e20b      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d06:	4b57      	ldr	r3, [pc, #348]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x110>
 8005d12:	e000      	b.n	8005d16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d069      	beq.n	8005df6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d22:	4b50      	ldr	r3, [pc, #320]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00b      	beq.n	8005d46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d2e:	4b4d      	ldr	r3, [pc, #308]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 030c 	and.w	r3, r3, #12
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d11c      	bne.n	8005d74 <HAL_RCC_OscConfig+0x190>
 8005d3a:	4b4a      	ldr	r3, [pc, #296]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d116      	bne.n	8005d74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d46:	4b47      	ldr	r3, [pc, #284]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <HAL_RCC_OscConfig+0x17a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d001      	beq.n	8005d5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e1df      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d5e:	4b41      	ldr	r3, [pc, #260]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	493d      	ldr	r1, [pc, #244]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d72:	e040      	b.n	8005df6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d023      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d7c:	4b39      	ldr	r3, [pc, #228]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a38      	ldr	r2, [pc, #224]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fe f964 	bl	8004054 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d90:	f7fe f960 	bl	8004054 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e1bd      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da2:	4b30      	ldr	r3, [pc, #192]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dae:	4b2d      	ldr	r3, [pc, #180]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4929      	ldr	r1, [pc, #164]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]
 8005dc2:	e018      	b.n	8005df6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dc4:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a26      	ldr	r2, [pc, #152]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005dca:	f023 0301 	bic.w	r3, r3, #1
 8005dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd0:	f7fe f940 	bl	8004054 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dd8:	f7fe f93c 	bl	8004054 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e199      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dea:	4b1e      	ldr	r3, [pc, #120]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f0      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d038      	beq.n	8005e74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d019      	beq.n	8005e3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e0a:	4b16      	ldr	r3, [pc, #88]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0e:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e16:	f7fe f91d 	bl	8004054 <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e1e:	f7fe f919 	bl	8004054 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e176      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f0      	beq.n	8005e1e <HAL_RCC_OscConfig+0x23a>
 8005e3c:	e01a      	b.n	8005e74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e3e:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e42:	4a08      	ldr	r2, [pc, #32]	; (8005e64 <HAL_RCC_OscConfig+0x280>)
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e4a:	f7fe f903 	bl	8004054 <HAL_GetTick>
 8005e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e50:	e00a      	b.n	8005e68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e52:	f7fe f8ff 	bl	8004054 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d903      	bls.n	8005e68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e15c      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
 8005e64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e68:	4b91      	ldr	r3, [pc, #580]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1ee      	bne.n	8005e52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80a4 	beq.w	8005fca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e82:	4b8b      	ldr	r3, [pc, #556]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10d      	bne.n	8005eaa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e8e:	4b88      	ldr	r3, [pc, #544]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	4a87      	ldr	r2, [pc, #540]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e98:	6413      	str	r3, [r2, #64]	; 0x40
 8005e9a:	4b85      	ldr	r3, [pc, #532]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	60bb      	str	r3, [r7, #8]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eaa:	4b82      	ldr	r3, [pc, #520]	; (80060b4 <HAL_RCC_OscConfig+0x4d0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d118      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005eb6:	4b7f      	ldr	r3, [pc, #508]	; (80060b4 <HAL_RCC_OscConfig+0x4d0>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a7e      	ldr	r2, [pc, #504]	; (80060b4 <HAL_RCC_OscConfig+0x4d0>)
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ec2:	f7fe f8c7 	bl	8004054 <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ec8:	e008      	b.n	8005edc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eca:	f7fe f8c3 	bl	8004054 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b64      	cmp	r3, #100	; 0x64
 8005ed6:	d901      	bls.n	8005edc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e120      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005edc:	4b75      	ldr	r3, [pc, #468]	; (80060b4 <HAL_RCC_OscConfig+0x4d0>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0f0      	beq.n	8005eca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d106      	bne.n	8005efe <HAL_RCC_OscConfig+0x31a>
 8005ef0:	4b6f      	ldr	r3, [pc, #444]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	4a6e      	ldr	r2, [pc, #440]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	6713      	str	r3, [r2, #112]	; 0x70
 8005efc:	e02d      	b.n	8005f5a <HAL_RCC_OscConfig+0x376>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10c      	bne.n	8005f20 <HAL_RCC_OscConfig+0x33c>
 8005f06:	4b6a      	ldr	r3, [pc, #424]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	4a69      	ldr	r2, [pc, #420]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	6713      	str	r3, [r2, #112]	; 0x70
 8005f12:	4b67      	ldr	r3, [pc, #412]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	4a66      	ldr	r2, [pc, #408]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f18:	f023 0304 	bic.w	r3, r3, #4
 8005f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1e:	e01c      	b.n	8005f5a <HAL_RCC_OscConfig+0x376>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b05      	cmp	r3, #5
 8005f26:	d10c      	bne.n	8005f42 <HAL_RCC_OscConfig+0x35e>
 8005f28:	4b61      	ldr	r3, [pc, #388]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	4a60      	ldr	r2, [pc, #384]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f2e:	f043 0304 	orr.w	r3, r3, #4
 8005f32:	6713      	str	r3, [r2, #112]	; 0x70
 8005f34:	4b5e      	ldr	r3, [pc, #376]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f38:	4a5d      	ldr	r2, [pc, #372]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f3a:	f043 0301 	orr.w	r3, r3, #1
 8005f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f40:	e00b      	b.n	8005f5a <HAL_RCC_OscConfig+0x376>
 8005f42:	4b5b      	ldr	r3, [pc, #364]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	4a5a      	ldr	r2, [pc, #360]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4e:	4b58      	ldr	r3, [pc, #352]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f52:	4a57      	ldr	r2, [pc, #348]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f54:	f023 0304 	bic.w	r3, r3, #4
 8005f58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d015      	beq.n	8005f8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f62:	f7fe f877 	bl	8004054 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f68:	e00a      	b.n	8005f80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6a:	f7fe f873 	bl	8004054 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e0ce      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f80:	4b4b      	ldr	r3, [pc, #300]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0ee      	beq.n	8005f6a <HAL_RCC_OscConfig+0x386>
 8005f8c:	e014      	b.n	8005fb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8e:	f7fe f861 	bl	8004054 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f94:	e00a      	b.n	8005fac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f96:	f7fe f85d 	bl	8004054 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e0b8      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fac:	4b40      	ldr	r3, [pc, #256]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1ee      	bne.n	8005f96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d105      	bne.n	8005fca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fbe:	4b3c      	ldr	r3, [pc, #240]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	4a3b      	ldr	r2, [pc, #236]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80a4 	beq.w	800611c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fd4:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 030c 	and.w	r3, r3, #12
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d06b      	beq.n	80060b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d149      	bne.n	800607c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe8:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a30      	ldr	r2, [pc, #192]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8005fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff4:	f7fe f82e 	bl	8004054 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ffc:	f7fe f82a 	bl	8004054 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e087      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600e:	4b28      	ldr	r3, [pc, #160]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f0      	bne.n	8005ffc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69da      	ldr	r2, [r3, #28]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	019b      	lsls	r3, r3, #6
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	085b      	lsrs	r3, r3, #1
 8006032:	3b01      	subs	r3, #1
 8006034:	041b      	lsls	r3, r3, #16
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	061b      	lsls	r3, r3, #24
 800603e:	4313      	orrs	r3, r2
 8006040:	4a1b      	ldr	r2, [pc, #108]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8006042:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006046:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006048:	4b19      	ldr	r3, [pc, #100]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a18      	ldr	r2, [pc, #96]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 800604e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fd fffe 	bl	8004054 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800605c:	f7fd fffa 	bl	8004054 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e057      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800606e:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x478>
 800607a:	e04f      	b.n	800611c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800607c:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a0b      	ldr	r2, [pc, #44]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 8006082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006088:	f7fd ffe4 	bl	8004054 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006090:	f7fd ffe0 	bl	8004054 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e03d      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a2:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <HAL_RCC_OscConfig+0x4cc>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f0      	bne.n	8006090 <HAL_RCC_OscConfig+0x4ac>
 80060ae:	e035      	b.n	800611c <HAL_RCC_OscConfig+0x538>
 80060b0:	40023800 	.word	0x40023800
 80060b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80060b8:	4b1b      	ldr	r3, [pc, #108]	; (8006128 <HAL_RCC_OscConfig+0x544>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d028      	beq.n	8006118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d121      	bne.n	8006118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060de:	429a      	cmp	r2, r3
 80060e0:	d11a      	bne.n	8006118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060e8:	4013      	ands	r3, r2
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d111      	bne.n	8006118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	3b01      	subs	r3, #1
 8006102:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006104:	429a      	cmp	r2, r3
 8006106:	d107      	bne.n	8006118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006114:	429a      	cmp	r2, r3
 8006116:	d001      	beq.n	800611c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800

0800612c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e0d0      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006144:	4b6a      	ldr	r3, [pc, #424]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d910      	bls.n	8006174 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006152:	4b67      	ldr	r3, [pc, #412]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f023 020f 	bic.w	r2, r3, #15
 800615a:	4965      	ldr	r1, [pc, #404]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	4313      	orrs	r3, r2
 8006160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006162:	4b63      	ldr	r3, [pc, #396]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d001      	beq.n	8006174 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0b8      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d020      	beq.n	80061c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800618c:	4b59      	ldr	r3, [pc, #356]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4a58      	ldr	r2, [pc, #352]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 8006192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006196:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061a4:	4b53      	ldr	r3, [pc, #332]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	4a52      	ldr	r2, [pc, #328]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 80061aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b0:	4b50      	ldr	r3, [pc, #320]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	494d      	ldr	r1, [pc, #308]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d040      	beq.n	8006250 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d107      	bne.n	80061e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d6:	4b47      	ldr	r3, [pc, #284]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d115      	bne.n	800620e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e07f      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d107      	bne.n	80061fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ee:	4b41      	ldr	r3, [pc, #260]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e073      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061fe:	4b3d      	ldr	r3, [pc, #244]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e06b      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800620e:	4b39      	ldr	r3, [pc, #228]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f023 0203 	bic.w	r2, r3, #3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	4936      	ldr	r1, [pc, #216]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 800621c:	4313      	orrs	r3, r2
 800621e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006220:	f7fd ff18 	bl	8004054 <HAL_GetTick>
 8006224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006226:	e00a      	b.n	800623e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006228:	f7fd ff14 	bl	8004054 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	f241 3288 	movw	r2, #5000	; 0x1388
 8006236:	4293      	cmp	r3, r2
 8006238:	d901      	bls.n	800623e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e053      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623e:	4b2d      	ldr	r3, [pc, #180]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 020c 	and.w	r2, r3, #12
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	429a      	cmp	r2, r3
 800624e:	d1eb      	bne.n	8006228 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006250:	4b27      	ldr	r3, [pc, #156]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 030f 	and.w	r3, r3, #15
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	429a      	cmp	r2, r3
 800625c:	d210      	bcs.n	8006280 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625e:	4b24      	ldr	r3, [pc, #144]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f023 020f 	bic.w	r2, r3, #15
 8006266:	4922      	ldr	r1, [pc, #136]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	4313      	orrs	r3, r2
 800626c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800626e:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <HAL_RCC_ClockConfig+0x1c4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 030f 	and.w	r3, r3, #15
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d001      	beq.n	8006280 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e032      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800628c:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	4916      	ldr	r1, [pc, #88]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 800629a:	4313      	orrs	r3, r2
 800629c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062aa:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	490e      	ldr	r1, [pc, #56]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062be:	f000 f821 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 80062c2:	4602      	mov	r2, r0
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <HAL_RCC_ClockConfig+0x1c8>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	490a      	ldr	r1, [pc, #40]	; (80062f8 <HAL_RCC_ClockConfig+0x1cc>)
 80062d0:	5ccb      	ldrb	r3, [r1, r3]
 80062d2:	fa22 f303 	lsr.w	r3, r2, r3
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <HAL_RCC_ClockConfig+0x1d0>)
 80062d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062da:	4b09      	ldr	r3, [pc, #36]	; (8006300 <HAL_RCC_ClockConfig+0x1d4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fd fd0e 	bl	8003d00 <HAL_InitTick>

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40023c00 	.word	0x40023c00
 80062f4:	40023800 	.word	0x40023800
 80062f8:	0800e34c 	.word	0x0800e34c
 80062fc:	20000094 	.word	0x20000094
 8006300:	20000098 	.word	0x20000098

08006304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006308:	b094      	sub	sp, #80	; 0x50
 800630a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	647b      	str	r3, [r7, #68]	; 0x44
 8006310:	2300      	movs	r3, #0
 8006312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006314:	2300      	movs	r3, #0
 8006316:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800631c:	4b79      	ldr	r3, [pc, #484]	; (8006504 <HAL_RCC_GetSysClockFreq+0x200>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 030c 	and.w	r3, r3, #12
 8006324:	2b08      	cmp	r3, #8
 8006326:	d00d      	beq.n	8006344 <HAL_RCC_GetSysClockFreq+0x40>
 8006328:	2b08      	cmp	r3, #8
 800632a:	f200 80e1 	bhi.w	80064f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <HAL_RCC_GetSysClockFreq+0x34>
 8006332:	2b04      	cmp	r3, #4
 8006334:	d003      	beq.n	800633e <HAL_RCC_GetSysClockFreq+0x3a>
 8006336:	e0db      	b.n	80064f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006338:	4b73      	ldr	r3, [pc, #460]	; (8006508 <HAL_RCC_GetSysClockFreq+0x204>)
 800633a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800633c:	e0db      	b.n	80064f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800633e:	4b73      	ldr	r3, [pc, #460]	; (800650c <HAL_RCC_GetSysClockFreq+0x208>)
 8006340:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006342:	e0d8      	b.n	80064f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006344:	4b6f      	ldr	r3, [pc, #444]	; (8006504 <HAL_RCC_GetSysClockFreq+0x200>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800634c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800634e:	4b6d      	ldr	r3, [pc, #436]	; (8006504 <HAL_RCC_GetSysClockFreq+0x200>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d063      	beq.n	8006422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800635a:	4b6a      	ldr	r3, [pc, #424]	; (8006504 <HAL_RCC_GetSysClockFreq+0x200>)
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	099b      	lsrs	r3, r3, #6
 8006360:	2200      	movs	r2, #0
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
 8006364:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636c:	633b      	str	r3, [r7, #48]	; 0x30
 800636e:	2300      	movs	r3, #0
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
 8006372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006376:	4622      	mov	r2, r4
 8006378:	462b      	mov	r3, r5
 800637a:	f04f 0000 	mov.w	r0, #0
 800637e:	f04f 0100 	mov.w	r1, #0
 8006382:	0159      	lsls	r1, r3, #5
 8006384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006388:	0150      	lsls	r0, r2, #5
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4621      	mov	r1, r4
 8006390:	1a51      	subs	r1, r2, r1
 8006392:	6139      	str	r1, [r7, #16]
 8006394:	4629      	mov	r1, r5
 8006396:	eb63 0301 	sbc.w	r3, r3, r1
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063a8:	4659      	mov	r1, fp
 80063aa:	018b      	lsls	r3, r1, #6
 80063ac:	4651      	mov	r1, sl
 80063ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063b2:	4651      	mov	r1, sl
 80063b4:	018a      	lsls	r2, r1, #6
 80063b6:	4651      	mov	r1, sl
 80063b8:	ebb2 0801 	subs.w	r8, r2, r1
 80063bc:	4659      	mov	r1, fp
 80063be:	eb63 0901 	sbc.w	r9, r3, r1
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063d6:	4690      	mov	r8, r2
 80063d8:	4699      	mov	r9, r3
 80063da:	4623      	mov	r3, r4
 80063dc:	eb18 0303 	adds.w	r3, r8, r3
 80063e0:	60bb      	str	r3, [r7, #8]
 80063e2:	462b      	mov	r3, r5
 80063e4:	eb49 0303 	adc.w	r3, r9, r3
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063f6:	4629      	mov	r1, r5
 80063f8:	024b      	lsls	r3, r1, #9
 80063fa:	4621      	mov	r1, r4
 80063fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006400:	4621      	mov	r1, r4
 8006402:	024a      	lsls	r2, r1, #9
 8006404:	4610      	mov	r0, r2
 8006406:	4619      	mov	r1, r3
 8006408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800640a:	2200      	movs	r2, #0
 800640c:	62bb      	str	r3, [r7, #40]	; 0x28
 800640e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006414:	f7fc f862 	bl	80024dc <__aeabi_uldivmod>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4613      	mov	r3, r2
 800641e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006420:	e058      	b.n	80064d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006422:	4b38      	ldr	r3, [pc, #224]	; (8006504 <HAL_RCC_GetSysClockFreq+0x200>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	099b      	lsrs	r3, r3, #6
 8006428:	2200      	movs	r2, #0
 800642a:	4618      	mov	r0, r3
 800642c:	4611      	mov	r1, r2
 800642e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006432:	623b      	str	r3, [r7, #32]
 8006434:	2300      	movs	r3, #0
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
 8006438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800643c:	4642      	mov	r2, r8
 800643e:	464b      	mov	r3, r9
 8006440:	f04f 0000 	mov.w	r0, #0
 8006444:	f04f 0100 	mov.w	r1, #0
 8006448:	0159      	lsls	r1, r3, #5
 800644a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800644e:	0150      	lsls	r0, r2, #5
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4641      	mov	r1, r8
 8006456:	ebb2 0a01 	subs.w	sl, r2, r1
 800645a:	4649      	mov	r1, r9
 800645c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800646c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006474:	ebb2 040a 	subs.w	r4, r2, sl
 8006478:	eb63 050b 	sbc.w	r5, r3, fp
 800647c:	f04f 0200 	mov.w	r2, #0
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	00eb      	lsls	r3, r5, #3
 8006486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800648a:	00e2      	lsls	r2, r4, #3
 800648c:	4614      	mov	r4, r2
 800648e:	461d      	mov	r5, r3
 8006490:	4643      	mov	r3, r8
 8006492:	18e3      	adds	r3, r4, r3
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	464b      	mov	r3, r9
 8006498:	eb45 0303 	adc.w	r3, r5, r3
 800649c:	607b      	str	r3, [r7, #4]
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064aa:	4629      	mov	r1, r5
 80064ac:	028b      	lsls	r3, r1, #10
 80064ae:	4621      	mov	r1, r4
 80064b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064b4:	4621      	mov	r1, r4
 80064b6:	028a      	lsls	r2, r1, #10
 80064b8:	4610      	mov	r0, r2
 80064ba:	4619      	mov	r1, r3
 80064bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064be:	2200      	movs	r2, #0
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	61fa      	str	r2, [r7, #28]
 80064c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064c8:	f7fc f808 	bl	80024dc <__aeabi_uldivmod>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4613      	mov	r3, r2
 80064d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80064d4:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_RCC_GetSysClockFreq+0x200>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	0c1b      	lsrs	r3, r3, #16
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	3301      	adds	r3, #1
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80064e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064ee:	e002      	b.n	80064f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <HAL_RCC_GetSysClockFreq+0x204>)
 80064f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3750      	adds	r7, #80	; 0x50
 80064fc:	46bd      	mov	sp, r7
 80064fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006502:	bf00      	nop
 8006504:	40023800 	.word	0x40023800
 8006508:	00f42400 	.word	0x00f42400
 800650c:	007a1200 	.word	0x007a1200

08006510 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006514:	4b03      	ldr	r3, [pc, #12]	; (8006524 <HAL_RCC_GetHCLKFreq+0x14>)
 8006516:	681b      	ldr	r3, [r3, #0]
}
 8006518:	4618      	mov	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000094 	.word	0x20000094

08006528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800652c:	f7ff fff0 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 8006530:	4602      	mov	r2, r0
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	0a9b      	lsrs	r3, r3, #10
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	4903      	ldr	r1, [pc, #12]	; (800654c <HAL_RCC_GetPCLK1Freq+0x24>)
 800653e:	5ccb      	ldrb	r3, [r1, r3]
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40023800 	.word	0x40023800
 800654c:	0800e35c 	.word	0x0800e35c

08006550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006554:	f7ff ffdc 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 8006558:	4602      	mov	r2, r0
 800655a:	4b05      	ldr	r3, [pc, #20]	; (8006570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	0b5b      	lsrs	r3, r3, #13
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	4903      	ldr	r1, [pc, #12]	; (8006574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006566:	5ccb      	ldrb	r3, [r1, r3]
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800656c:	4618      	mov	r0, r3
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40023800 	.word	0x40023800
 8006574:	0800e35c 	.word	0x0800e35c

08006578 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	220f      	movs	r2, #15
 8006586:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006588:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <HAL_RCC_GetClockConfig+0x5c>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 0203 	and.w	r2, r3, #3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006594:	4b0f      	ldr	r3, [pc, #60]	; (80065d4 <HAL_RCC_GetClockConfig+0x5c>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065a0:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <HAL_RCC_GetClockConfig+0x5c>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80065ac:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <HAL_RCC_GetClockConfig+0x5c>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	08db      	lsrs	r3, r3, #3
 80065b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065ba:	4b07      	ldr	r3, [pc, #28]	; (80065d8 <HAL_RCC_GetClockConfig+0x60>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 020f 	and.w	r2, r3, #15
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	601a      	str	r2, [r3, #0]
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40023800 	.word	0x40023800
 80065d8:	40023c00 	.word	0x40023c00

080065dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d012      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006604:	4b69      	ldr	r3, [pc, #420]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	4a68      	ldr	r2, [pc, #416]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800660a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800660e:	6093      	str	r3, [r2, #8]
 8006610:	4b66      	ldr	r3, [pc, #408]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006618:	4964      	ldr	r1, [pc, #400]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800661a:	4313      	orrs	r3, r2
 800661c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006626:	2301      	movs	r3, #1
 8006628:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d017      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006636:	4b5d      	ldr	r3, [pc, #372]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006644:	4959      	ldr	r1, [pc, #356]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006646:	4313      	orrs	r3, r2
 8006648:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006654:	d101      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006656:	2301      	movs	r3, #1
 8006658:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006662:	2301      	movs	r3, #1
 8006664:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d017      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006672:	4b4e      	ldr	r3, [pc, #312]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006678:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	494a      	ldr	r1, [pc, #296]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006690:	d101      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006692:	2301      	movs	r3, #1
 8006694:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800669e:	2301      	movs	r3, #1
 80066a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80066ae:	2301      	movs	r3, #1
 80066b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 808b 	beq.w	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066c0:	4b3a      	ldr	r3, [pc, #232]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	4a39      	ldr	r2, [pc, #228]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ca:	6413      	str	r3, [r2, #64]	; 0x40
 80066cc:	4b37      	ldr	r3, [pc, #220]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d4:	60bb      	str	r3, [r7, #8]
 80066d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066d8:	4b35      	ldr	r3, [pc, #212]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a34      	ldr	r2, [pc, #208]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e4:	f7fd fcb6 	bl	8004054 <HAL_GetTick>
 80066e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ec:	f7fd fcb2 	bl	8004054 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b64      	cmp	r3, #100	; 0x64
 80066f8:	d901      	bls.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e357      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80066fe:	4b2c      	ldr	r3, [pc, #176]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800670a:	4b28      	ldr	r3, [pc, #160]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006712:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d035      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	429a      	cmp	r2, r3
 8006726:	d02e      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006728:	4b20      	ldr	r3, [pc, #128]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006730:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006732:	4b1e      	ldr	r3, [pc, #120]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006736:	4a1d      	ldr	r2, [pc, #116]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800673e:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006742:	4a1a      	ldr	r2, [pc, #104]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006748:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800674a:	4a18      	ldr	r2, [pc, #96]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006750:	4b16      	ldr	r3, [pc, #88]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b01      	cmp	r3, #1
 800675a:	d114      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675c:	f7fd fc7a 	bl	8004054 <HAL_GetTick>
 8006760:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006762:	e00a      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006764:	f7fd fc76 	bl	8004054 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006772:	4293      	cmp	r3, r2
 8006774:	d901      	bls.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e319      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0ee      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800678e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006792:	d111      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80067a0:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80067a2:	400b      	ands	r3, r1
 80067a4:	4901      	ldr	r1, [pc, #4]	; (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	608b      	str	r3, [r1, #8]
 80067aa:	e00b      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80067ac:	40023800 	.word	0x40023800
 80067b0:	40007000 	.word	0x40007000
 80067b4:	0ffffcff 	.word	0x0ffffcff
 80067b8:	4baa      	ldr	r3, [pc, #680]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	4aa9      	ldr	r2, [pc, #676]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067c2:	6093      	str	r3, [r2, #8]
 80067c4:	4ba7      	ldr	r3, [pc, #668]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067d0:	49a4      	ldr	r1, [pc, #656]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0310 	and.w	r3, r3, #16
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d010      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067e2:	4ba0      	ldr	r3, [pc, #640]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e8:	4a9e      	ldr	r2, [pc, #632]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80067f2:	4b9c      	ldr	r3, [pc, #624]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	4999      	ldr	r1, [pc, #612]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006810:	4b94      	ldr	r3, [pc, #592]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006816:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800681e:	4991      	ldr	r1, [pc, #580]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006832:	4b8c      	ldr	r3, [pc, #560]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006838:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006840:	4988      	ldr	r1, [pc, #544]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006842:	4313      	orrs	r3, r2
 8006844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006854:	4b83      	ldr	r3, [pc, #524]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006862:	4980      	ldr	r1, [pc, #512]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006864:	4313      	orrs	r3, r2
 8006866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006876:	4b7b      	ldr	r3, [pc, #492]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006884:	4977      	ldr	r1, [pc, #476]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006898:	4b72      	ldr	r3, [pc, #456]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689e:	f023 0203 	bic.w	r2, r3, #3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a6:	496f      	ldr	r1, [pc, #444]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068ba:	4b6a      	ldr	r3, [pc, #424]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c0:	f023 020c 	bic.w	r2, r3, #12
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c8:	4966      	ldr	r1, [pc, #408]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068dc:	4b61      	ldr	r3, [pc, #388]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ea:	495e      	ldr	r1, [pc, #376]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068fe:	4b59      	ldr	r3, [pc, #356]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006904:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690c:	4955      	ldr	r1, [pc, #340]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006920:	4b50      	ldr	r3, [pc, #320]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006926:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692e:	494d      	ldr	r1, [pc, #308]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006930:	4313      	orrs	r3, r2
 8006932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006942:	4b48      	ldr	r3, [pc, #288]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006948:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006950:	4944      	ldr	r1, [pc, #272]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006964:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006972:	493c      	ldr	r1, [pc, #240]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006986:	4b37      	ldr	r3, [pc, #220]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	4933      	ldr	r1, [pc, #204]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006996:	4313      	orrs	r3, r2
 8006998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069a8:	4b2e      	ldr	r3, [pc, #184]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069b6:	492b      	ldr	r1, [pc, #172]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d011      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069ca:	4b26      	ldr	r3, [pc, #152]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069d8:	4922      	ldr	r1, [pc, #136]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e8:	d101      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80069ea:	2301      	movs	r3, #1
 80069ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80069fa:	2301      	movs	r3, #1
 80069fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a0a:	4b16      	ldr	r3, [pc, #88]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a10:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a18:	4912      	ldr	r1, [pc, #72]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a3c:	4909      	ldr	r1, [pc, #36]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d006      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80d9 	beq.w	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a58:	4b02      	ldr	r3, [pc, #8]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a01      	ldr	r2, [pc, #4]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a62:	e001      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006a64:	40023800 	.word	0x40023800
 8006a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a6a:	f7fd faf3 	bl	8004054 <HAL_GetTick>
 8006a6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a70:	e008      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a72:	f7fd faef 	bl	8004054 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b64      	cmp	r3, #100	; 0x64
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e194      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a84:	4b6c      	ldr	r3, [pc, #432]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1f0      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d021      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d11d      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006aa4:	4b64      	ldr	r3, [pc, #400]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aaa:	0c1b      	lsrs	r3, r3, #16
 8006aac:	f003 0303 	and.w	r3, r3, #3
 8006ab0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ab2:	4b61      	ldr	r3, [pc, #388]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab8:	0e1b      	lsrs	r3, r3, #24
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	019a      	lsls	r2, r3, #6
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	041b      	lsls	r3, r3, #16
 8006aca:	431a      	orrs	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	061b      	lsls	r3, r3, #24
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	071b      	lsls	r3, r3, #28
 8006ad8:	4957      	ldr	r1, [pc, #348]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006af4:	d00a      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d02e      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b0a:	d129      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b0c:	4b4a      	ldr	r3, [pc, #296]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b12:	0c1b      	lsrs	r3, r3, #16
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b1a:	4b47      	ldr	r3, [pc, #284]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b20:	0f1b      	lsrs	r3, r3, #28
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	019a      	lsls	r2, r3, #6
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	041b      	lsls	r3, r3, #16
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	061b      	lsls	r3, r3, #24
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	071b      	lsls	r3, r3, #28
 8006b40:	493d      	ldr	r1, [pc, #244]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b48:	4b3b      	ldr	r3, [pc, #236]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4e:	f023 021f 	bic.w	r2, r3, #31
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	3b01      	subs	r3, #1
 8006b58:	4937      	ldr	r1, [pc, #220]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01d      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b6c:	4b32      	ldr	r3, [pc, #200]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b72:	0e1b      	lsrs	r3, r3, #24
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b7a:	4b2f      	ldr	r3, [pc, #188]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b80:	0f1b      	lsrs	r3, r3, #28
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	019a      	lsls	r2, r3, #6
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	431a      	orrs	r2, r3
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	061b      	lsls	r3, r3, #24
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	071b      	lsls	r3, r3, #28
 8006ba0:	4925      	ldr	r1, [pc, #148]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d011      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	019a      	lsls	r2, r3, #6
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	041b      	lsls	r3, r3, #16
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	061b      	lsls	r3, r3, #24
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	071b      	lsls	r3, r3, #28
 8006bd0:	4919      	ldr	r1, [pc, #100]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bd8:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a16      	ldr	r2, [pc, #88]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be4:	f7fd fa36 	bl	8004054 <HAL_GetTick>
 8006be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006bec:	f7fd fa32 	bl	8004054 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b64      	cmp	r3, #100	; 0x64
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e0d7      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bfe:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	f040 80cd 	bne.w	8006dac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c12:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c1e:	f7fd fa19 	bl	8004054 <HAL_GetTick>
 8006c22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c24:	e00a      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c26:	f7fd fa15 	bl	8004054 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b64      	cmp	r3, #100	; 0x64
 8006c32:	d903      	bls.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e0ba      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006c38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c3c:	4b5e      	ldr	r3, [pc, #376]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c48:	d0ed      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d02e      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d12a      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c72:	4b51      	ldr	r3, [pc, #324]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c78:	0c1b      	lsrs	r3, r3, #16
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c80:	4b4d      	ldr	r3, [pc, #308]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c86:	0f1b      	lsrs	r3, r3, #28
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	019a      	lsls	r2, r3, #6
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	041b      	lsls	r3, r3, #16
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	061b      	lsls	r3, r3, #24
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	071b      	lsls	r3, r3, #28
 8006ca6:	4944      	ldr	r1, [pc, #272]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006cae:	4b42      	ldr	r3, [pc, #264]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	021b      	lsls	r3, r3, #8
 8006cc0:	493d      	ldr	r1, [pc, #244]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d022      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cdc:	d11d      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cde:	4b36      	ldr	r3, [pc, #216]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce4:	0e1b      	lsrs	r3, r3, #24
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006cec:	4b32      	ldr	r3, [pc, #200]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf2:	0f1b      	lsrs	r3, r3, #28
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	019a      	lsls	r2, r3, #6
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	041b      	lsls	r3, r3, #16
 8006d06:	431a      	orrs	r2, r3
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	061b      	lsls	r3, r3, #24
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	071b      	lsls	r3, r3, #28
 8006d12:	4929      	ldr	r1, [pc, #164]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0308 	and.w	r3, r3, #8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d028      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d26:	4b24      	ldr	r3, [pc, #144]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2c:	0e1b      	lsrs	r3, r3, #24
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d34:	4b20      	ldr	r3, [pc, #128]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3a:	0c1b      	lsrs	r3, r3, #16
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	019a      	lsls	r2, r3, #6
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	061b      	lsls	r3, r3, #24
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	071b      	lsls	r3, r3, #28
 8006d5a:	4917      	ldr	r1, [pc, #92]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d62:	4b15      	ldr	r3, [pc, #84]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	4911      	ldr	r1, [pc, #68]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d78:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a0e      	ldr	r2, [pc, #56]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d84:	f7fd f966 	bl	8004054 <HAL_GetTick>
 8006d88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d8c:	f7fd f962 	bl	8004054 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b64      	cmp	r3, #100	; 0x64
 8006d98:	d901      	bls.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e007      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d9e:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006daa:	d1ef      	bne.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3720      	adds	r7, #32
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	40023800 	.word	0x40023800

08006dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e049      	b.n	8006e62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f841 	bl	8006e6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f000 fa00 	bl	8007200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
	...

08006e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d001      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e054      	b.n	8006f42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0201 	orr.w	r2, r2, #1
 8006eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a26      	ldr	r2, [pc, #152]	; (8006f50 <HAL_TIM_Base_Start_IT+0xd0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d022      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x80>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec2:	d01d      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x80>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a22      	ldr	r2, [pc, #136]	; (8006f54 <HAL_TIM_Base_Start_IT+0xd4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d018      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x80>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x80>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1f      	ldr	r2, [pc, #124]	; (8006f5c <HAL_TIM_Base_Start_IT+0xdc>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x80>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1e      	ldr	r2, [pc, #120]	; (8006f60 <HAL_TIM_Base_Start_IT+0xe0>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d009      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x80>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1c      	ldr	r2, [pc, #112]	; (8006f64 <HAL_TIM_Base_Start_IT+0xe4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <HAL_TIM_Base_Start_IT+0x80>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1b      	ldr	r2, [pc, #108]	; (8006f68 <HAL_TIM_Base_Start_IT+0xe8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d115      	bne.n	8006f2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	4b19      	ldr	r3, [pc, #100]	; (8006f6c <HAL_TIM_Base_Start_IT+0xec>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b06      	cmp	r3, #6
 8006f10:	d015      	beq.n	8006f3e <HAL_TIM_Base_Start_IT+0xbe>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f18:	d011      	beq.n	8006f3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0201 	orr.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2a:	e008      	b.n	8006f3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	e000      	b.n	8006f40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40010000 	.word	0x40010000
 8006f54:	40000400 	.word	0x40000400
 8006f58:	40000800 	.word	0x40000800
 8006f5c:	40000c00 	.word	0x40000c00
 8006f60:	40010400 	.word	0x40010400
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40001800 	.word	0x40001800
 8006f6c:	00010007 	.word	0x00010007

08006f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d122      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d11b      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0202 	mvn.w	r2, #2
 8006f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f905 	bl	80071c2 <HAL_TIM_IC_CaptureCallback>
 8006fb8:	e005      	b.n	8006fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f8f7 	bl	80071ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f908 	bl	80071d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d122      	bne.n	8007020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d11b      	bne.n	8007020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0204 	mvn.w	r2, #4
 8006ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f8db 	bl	80071c2 <HAL_TIM_IC_CaptureCallback>
 800700c:	e005      	b.n	800701a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f8cd 	bl	80071ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f8de 	bl	80071d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b08      	cmp	r3, #8
 800702c:	d122      	bne.n	8007074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0308 	and.w	r3, r3, #8
 8007038:	2b08      	cmp	r3, #8
 800703a:	d11b      	bne.n	8007074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0208 	mvn.w	r2, #8
 8007044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2204      	movs	r2, #4
 800704a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f8b1 	bl	80071c2 <HAL_TIM_IC_CaptureCallback>
 8007060:	e005      	b.n	800706e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f8a3 	bl	80071ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f8b4 	bl	80071d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0310 	and.w	r3, r3, #16
 800707e:	2b10      	cmp	r3, #16
 8007080:	d122      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b10      	cmp	r3, #16
 800708e:	d11b      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0210 	mvn.w	r2, #16
 8007098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2208      	movs	r2, #8
 800709e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f887 	bl	80071c2 <HAL_TIM_IC_CaptureCallback>
 80070b4:	e005      	b.n	80070c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f879 	bl	80071ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f88a 	bl	80071d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d10e      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d107      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0201 	mvn.w	r2, #1
 80070ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fc fbd6 	bl	80038a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b80      	cmp	r3, #128	; 0x80
 8007100:	d10e      	bne.n	8007120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710c:	2b80      	cmp	r3, #128	; 0x80
 800710e:	d107      	bne.n	8007120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f91a 	bl	8007354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712e:	d10e      	bne.n	800714e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713a:	2b80      	cmp	r3, #128	; 0x80
 800713c:	d107      	bne.n	800714e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f90d 	bl	8007368 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b40      	cmp	r3, #64	; 0x40
 800715a:	d10e      	bne.n	800717a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d107      	bne.n	800717a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f838 	bl	80071ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b20      	cmp	r3, #32
 8007186:	d10e      	bne.n	80071a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b20      	cmp	r3, #32
 8007194:	d107      	bne.n	80071a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f06f 0220 	mvn.w	r2, #32
 800719e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f8cd 	bl	8007340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a40      	ldr	r2, [pc, #256]	; (8007314 <TIM_Base_SetConfig+0x114>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d013      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721e:	d00f      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a3d      	ldr	r2, [pc, #244]	; (8007318 <TIM_Base_SetConfig+0x118>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00b      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a3c      	ldr	r2, [pc, #240]	; (800731c <TIM_Base_SetConfig+0x11c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d007      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a3b      	ldr	r2, [pc, #236]	; (8007320 <TIM_Base_SetConfig+0x120>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a3a      	ldr	r2, [pc, #232]	; (8007324 <TIM_Base_SetConfig+0x124>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d108      	bne.n	8007252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a2f      	ldr	r2, [pc, #188]	; (8007314 <TIM_Base_SetConfig+0x114>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d02b      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007260:	d027      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a2c      	ldr	r2, [pc, #176]	; (8007318 <TIM_Base_SetConfig+0x118>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d023      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a2b      	ldr	r2, [pc, #172]	; (800731c <TIM_Base_SetConfig+0x11c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01f      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a2a      	ldr	r2, [pc, #168]	; (8007320 <TIM_Base_SetConfig+0x120>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01b      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a29      	ldr	r2, [pc, #164]	; (8007324 <TIM_Base_SetConfig+0x124>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d017      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a28      	ldr	r2, [pc, #160]	; (8007328 <TIM_Base_SetConfig+0x128>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a27      	ldr	r2, [pc, #156]	; (800732c <TIM_Base_SetConfig+0x12c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00f      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a26      	ldr	r2, [pc, #152]	; (8007330 <TIM_Base_SetConfig+0x130>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00b      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a25      	ldr	r2, [pc, #148]	; (8007334 <TIM_Base_SetConfig+0x134>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d007      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a24      	ldr	r2, [pc, #144]	; (8007338 <TIM_Base_SetConfig+0x138>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d003      	beq.n	80072b2 <TIM_Base_SetConfig+0xb2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a23      	ldr	r2, [pc, #140]	; (800733c <TIM_Base_SetConfig+0x13c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d108      	bne.n	80072c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a0a      	ldr	r2, [pc, #40]	; (8007314 <TIM_Base_SetConfig+0x114>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d003      	beq.n	80072f8 <TIM_Base_SetConfig+0xf8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a0c      	ldr	r2, [pc, #48]	; (8007324 <TIM_Base_SetConfig+0x124>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d103      	bne.n	8007300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	615a      	str	r2, [r3, #20]
}
 8007306:	bf00      	nop
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40010000 	.word	0x40010000
 8007318:	40000400 	.word	0x40000400
 800731c:	40000800 	.word	0x40000800
 8007320:	40000c00 	.word	0x40000c00
 8007324:	40010400 	.word	0x40010400
 8007328:	40014000 	.word	0x40014000
 800732c:	40014400 	.word	0x40014400
 8007330:	40014800 	.word	0x40014800
 8007334:	40001800 	.word	0x40001800
 8007338:	40001c00 	.word	0x40001c00
 800733c:	40002000 	.word	0x40002000

08007340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e040      	b.n	8007410 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7fc fbd4 	bl	8003b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2224      	movs	r2, #36	; 0x24
 80073a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0201 	bic.w	r2, r2, #1
 80073b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f82c 	bl	8007418 <UART_SetConfig>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e022      	b.n	8007410 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa84 	bl	80078e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fb0b 	bl	8007a24 <UART_CheckIdleState>
 800740e:	4603      	mov	r3, r0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	4313      	orrs	r3, r2
 800743a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	4ba6      	ldr	r3, [pc, #664]	; (80076dc <UART_SetConfig+0x2c4>)
 8007444:	4013      	ands	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6812      	ldr	r2, [r2, #0]
 800744a:	6979      	ldr	r1, [r7, #20]
 800744c:	430b      	orrs	r3, r1
 800744e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4313      	orrs	r3, r2
 8007474:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	430a      	orrs	r2, r1
 8007488:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a94      	ldr	r2, [pc, #592]	; (80076e0 <UART_SetConfig+0x2c8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d120      	bne.n	80074d6 <UART_SetConfig+0xbe>
 8007494:	4b93      	ldr	r3, [pc, #588]	; (80076e4 <UART_SetConfig+0x2cc>)
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d816      	bhi.n	80074d0 <UART_SetConfig+0xb8>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <UART_SetConfig+0x90>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074b9 	.word	0x080074b9
 80074ac:	080074c5 	.word	0x080074c5
 80074b0:	080074bf 	.word	0x080074bf
 80074b4:	080074cb 	.word	0x080074cb
 80074b8:	2301      	movs	r3, #1
 80074ba:	77fb      	strb	r3, [r7, #31]
 80074bc:	e150      	b.n	8007760 <UART_SetConfig+0x348>
 80074be:	2302      	movs	r3, #2
 80074c0:	77fb      	strb	r3, [r7, #31]
 80074c2:	e14d      	b.n	8007760 <UART_SetConfig+0x348>
 80074c4:	2304      	movs	r3, #4
 80074c6:	77fb      	strb	r3, [r7, #31]
 80074c8:	e14a      	b.n	8007760 <UART_SetConfig+0x348>
 80074ca:	2308      	movs	r3, #8
 80074cc:	77fb      	strb	r3, [r7, #31]
 80074ce:	e147      	b.n	8007760 <UART_SetConfig+0x348>
 80074d0:	2310      	movs	r3, #16
 80074d2:	77fb      	strb	r3, [r7, #31]
 80074d4:	e144      	b.n	8007760 <UART_SetConfig+0x348>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a83      	ldr	r2, [pc, #524]	; (80076e8 <UART_SetConfig+0x2d0>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d132      	bne.n	8007546 <UART_SetConfig+0x12e>
 80074e0:	4b80      	ldr	r3, [pc, #512]	; (80076e4 <UART_SetConfig+0x2cc>)
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e6:	f003 030c 	and.w	r3, r3, #12
 80074ea:	2b0c      	cmp	r3, #12
 80074ec:	d828      	bhi.n	8007540 <UART_SetConfig+0x128>
 80074ee:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <UART_SetConfig+0xdc>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	08007529 	.word	0x08007529
 80074f8:	08007541 	.word	0x08007541
 80074fc:	08007541 	.word	0x08007541
 8007500:	08007541 	.word	0x08007541
 8007504:	08007535 	.word	0x08007535
 8007508:	08007541 	.word	0x08007541
 800750c:	08007541 	.word	0x08007541
 8007510:	08007541 	.word	0x08007541
 8007514:	0800752f 	.word	0x0800752f
 8007518:	08007541 	.word	0x08007541
 800751c:	08007541 	.word	0x08007541
 8007520:	08007541 	.word	0x08007541
 8007524:	0800753b 	.word	0x0800753b
 8007528:	2300      	movs	r3, #0
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	e118      	b.n	8007760 <UART_SetConfig+0x348>
 800752e:	2302      	movs	r3, #2
 8007530:	77fb      	strb	r3, [r7, #31]
 8007532:	e115      	b.n	8007760 <UART_SetConfig+0x348>
 8007534:	2304      	movs	r3, #4
 8007536:	77fb      	strb	r3, [r7, #31]
 8007538:	e112      	b.n	8007760 <UART_SetConfig+0x348>
 800753a:	2308      	movs	r3, #8
 800753c:	77fb      	strb	r3, [r7, #31]
 800753e:	e10f      	b.n	8007760 <UART_SetConfig+0x348>
 8007540:	2310      	movs	r3, #16
 8007542:	77fb      	strb	r3, [r7, #31]
 8007544:	e10c      	b.n	8007760 <UART_SetConfig+0x348>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a68      	ldr	r2, [pc, #416]	; (80076ec <UART_SetConfig+0x2d4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d120      	bne.n	8007592 <UART_SetConfig+0x17a>
 8007550:	4b64      	ldr	r3, [pc, #400]	; (80076e4 <UART_SetConfig+0x2cc>)
 8007552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007556:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800755a:	2b30      	cmp	r3, #48	; 0x30
 800755c:	d013      	beq.n	8007586 <UART_SetConfig+0x16e>
 800755e:	2b30      	cmp	r3, #48	; 0x30
 8007560:	d814      	bhi.n	800758c <UART_SetConfig+0x174>
 8007562:	2b20      	cmp	r3, #32
 8007564:	d009      	beq.n	800757a <UART_SetConfig+0x162>
 8007566:	2b20      	cmp	r3, #32
 8007568:	d810      	bhi.n	800758c <UART_SetConfig+0x174>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <UART_SetConfig+0x15c>
 800756e:	2b10      	cmp	r3, #16
 8007570:	d006      	beq.n	8007580 <UART_SetConfig+0x168>
 8007572:	e00b      	b.n	800758c <UART_SetConfig+0x174>
 8007574:	2300      	movs	r3, #0
 8007576:	77fb      	strb	r3, [r7, #31]
 8007578:	e0f2      	b.n	8007760 <UART_SetConfig+0x348>
 800757a:	2302      	movs	r3, #2
 800757c:	77fb      	strb	r3, [r7, #31]
 800757e:	e0ef      	b.n	8007760 <UART_SetConfig+0x348>
 8007580:	2304      	movs	r3, #4
 8007582:	77fb      	strb	r3, [r7, #31]
 8007584:	e0ec      	b.n	8007760 <UART_SetConfig+0x348>
 8007586:	2308      	movs	r3, #8
 8007588:	77fb      	strb	r3, [r7, #31]
 800758a:	e0e9      	b.n	8007760 <UART_SetConfig+0x348>
 800758c:	2310      	movs	r3, #16
 800758e:	77fb      	strb	r3, [r7, #31]
 8007590:	e0e6      	b.n	8007760 <UART_SetConfig+0x348>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a56      	ldr	r2, [pc, #344]	; (80076f0 <UART_SetConfig+0x2d8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d120      	bne.n	80075de <UART_SetConfig+0x1c6>
 800759c:	4b51      	ldr	r3, [pc, #324]	; (80076e4 <UART_SetConfig+0x2cc>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075a6:	2bc0      	cmp	r3, #192	; 0xc0
 80075a8:	d013      	beq.n	80075d2 <UART_SetConfig+0x1ba>
 80075aa:	2bc0      	cmp	r3, #192	; 0xc0
 80075ac:	d814      	bhi.n	80075d8 <UART_SetConfig+0x1c0>
 80075ae:	2b80      	cmp	r3, #128	; 0x80
 80075b0:	d009      	beq.n	80075c6 <UART_SetConfig+0x1ae>
 80075b2:	2b80      	cmp	r3, #128	; 0x80
 80075b4:	d810      	bhi.n	80075d8 <UART_SetConfig+0x1c0>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <UART_SetConfig+0x1a8>
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	d006      	beq.n	80075cc <UART_SetConfig+0x1b4>
 80075be:	e00b      	b.n	80075d8 <UART_SetConfig+0x1c0>
 80075c0:	2300      	movs	r3, #0
 80075c2:	77fb      	strb	r3, [r7, #31]
 80075c4:	e0cc      	b.n	8007760 <UART_SetConfig+0x348>
 80075c6:	2302      	movs	r3, #2
 80075c8:	77fb      	strb	r3, [r7, #31]
 80075ca:	e0c9      	b.n	8007760 <UART_SetConfig+0x348>
 80075cc:	2304      	movs	r3, #4
 80075ce:	77fb      	strb	r3, [r7, #31]
 80075d0:	e0c6      	b.n	8007760 <UART_SetConfig+0x348>
 80075d2:	2308      	movs	r3, #8
 80075d4:	77fb      	strb	r3, [r7, #31]
 80075d6:	e0c3      	b.n	8007760 <UART_SetConfig+0x348>
 80075d8:	2310      	movs	r3, #16
 80075da:	77fb      	strb	r3, [r7, #31]
 80075dc:	e0c0      	b.n	8007760 <UART_SetConfig+0x348>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a44      	ldr	r2, [pc, #272]	; (80076f4 <UART_SetConfig+0x2dc>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d125      	bne.n	8007634 <UART_SetConfig+0x21c>
 80075e8:	4b3e      	ldr	r3, [pc, #248]	; (80076e4 <UART_SetConfig+0x2cc>)
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075f6:	d017      	beq.n	8007628 <UART_SetConfig+0x210>
 80075f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075fc:	d817      	bhi.n	800762e <UART_SetConfig+0x216>
 80075fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007602:	d00b      	beq.n	800761c <UART_SetConfig+0x204>
 8007604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007608:	d811      	bhi.n	800762e <UART_SetConfig+0x216>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <UART_SetConfig+0x1fe>
 800760e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007612:	d006      	beq.n	8007622 <UART_SetConfig+0x20a>
 8007614:	e00b      	b.n	800762e <UART_SetConfig+0x216>
 8007616:	2300      	movs	r3, #0
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	e0a1      	b.n	8007760 <UART_SetConfig+0x348>
 800761c:	2302      	movs	r3, #2
 800761e:	77fb      	strb	r3, [r7, #31]
 8007620:	e09e      	b.n	8007760 <UART_SetConfig+0x348>
 8007622:	2304      	movs	r3, #4
 8007624:	77fb      	strb	r3, [r7, #31]
 8007626:	e09b      	b.n	8007760 <UART_SetConfig+0x348>
 8007628:	2308      	movs	r3, #8
 800762a:	77fb      	strb	r3, [r7, #31]
 800762c:	e098      	b.n	8007760 <UART_SetConfig+0x348>
 800762e:	2310      	movs	r3, #16
 8007630:	77fb      	strb	r3, [r7, #31]
 8007632:	e095      	b.n	8007760 <UART_SetConfig+0x348>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a2f      	ldr	r2, [pc, #188]	; (80076f8 <UART_SetConfig+0x2e0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d125      	bne.n	800768a <UART_SetConfig+0x272>
 800763e:	4b29      	ldr	r3, [pc, #164]	; (80076e4 <UART_SetConfig+0x2cc>)
 8007640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007644:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800764c:	d017      	beq.n	800767e <UART_SetConfig+0x266>
 800764e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007652:	d817      	bhi.n	8007684 <UART_SetConfig+0x26c>
 8007654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007658:	d00b      	beq.n	8007672 <UART_SetConfig+0x25a>
 800765a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765e:	d811      	bhi.n	8007684 <UART_SetConfig+0x26c>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <UART_SetConfig+0x254>
 8007664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007668:	d006      	beq.n	8007678 <UART_SetConfig+0x260>
 800766a:	e00b      	b.n	8007684 <UART_SetConfig+0x26c>
 800766c:	2301      	movs	r3, #1
 800766e:	77fb      	strb	r3, [r7, #31]
 8007670:	e076      	b.n	8007760 <UART_SetConfig+0x348>
 8007672:	2302      	movs	r3, #2
 8007674:	77fb      	strb	r3, [r7, #31]
 8007676:	e073      	b.n	8007760 <UART_SetConfig+0x348>
 8007678:	2304      	movs	r3, #4
 800767a:	77fb      	strb	r3, [r7, #31]
 800767c:	e070      	b.n	8007760 <UART_SetConfig+0x348>
 800767e:	2308      	movs	r3, #8
 8007680:	77fb      	strb	r3, [r7, #31]
 8007682:	e06d      	b.n	8007760 <UART_SetConfig+0x348>
 8007684:	2310      	movs	r3, #16
 8007686:	77fb      	strb	r3, [r7, #31]
 8007688:	e06a      	b.n	8007760 <UART_SetConfig+0x348>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1b      	ldr	r2, [pc, #108]	; (80076fc <UART_SetConfig+0x2e4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d138      	bne.n	8007706 <UART_SetConfig+0x2ee>
 8007694:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <UART_SetConfig+0x2cc>)
 8007696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800769e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076a2:	d017      	beq.n	80076d4 <UART_SetConfig+0x2bc>
 80076a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076a8:	d82a      	bhi.n	8007700 <UART_SetConfig+0x2e8>
 80076aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ae:	d00b      	beq.n	80076c8 <UART_SetConfig+0x2b0>
 80076b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b4:	d824      	bhi.n	8007700 <UART_SetConfig+0x2e8>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <UART_SetConfig+0x2aa>
 80076ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076be:	d006      	beq.n	80076ce <UART_SetConfig+0x2b6>
 80076c0:	e01e      	b.n	8007700 <UART_SetConfig+0x2e8>
 80076c2:	2300      	movs	r3, #0
 80076c4:	77fb      	strb	r3, [r7, #31]
 80076c6:	e04b      	b.n	8007760 <UART_SetConfig+0x348>
 80076c8:	2302      	movs	r3, #2
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e048      	b.n	8007760 <UART_SetConfig+0x348>
 80076ce:	2304      	movs	r3, #4
 80076d0:	77fb      	strb	r3, [r7, #31]
 80076d2:	e045      	b.n	8007760 <UART_SetConfig+0x348>
 80076d4:	2308      	movs	r3, #8
 80076d6:	77fb      	strb	r3, [r7, #31]
 80076d8:	e042      	b.n	8007760 <UART_SetConfig+0x348>
 80076da:	bf00      	nop
 80076dc:	efff69f3 	.word	0xefff69f3
 80076e0:	40011000 	.word	0x40011000
 80076e4:	40023800 	.word	0x40023800
 80076e8:	40004400 	.word	0x40004400
 80076ec:	40004800 	.word	0x40004800
 80076f0:	40004c00 	.word	0x40004c00
 80076f4:	40005000 	.word	0x40005000
 80076f8:	40011400 	.word	0x40011400
 80076fc:	40007800 	.word	0x40007800
 8007700:	2310      	movs	r3, #16
 8007702:	77fb      	strb	r3, [r7, #31]
 8007704:	e02c      	b.n	8007760 <UART_SetConfig+0x348>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a72      	ldr	r2, [pc, #456]	; (80078d4 <UART_SetConfig+0x4bc>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d125      	bne.n	800775c <UART_SetConfig+0x344>
 8007710:	4b71      	ldr	r3, [pc, #452]	; (80078d8 <UART_SetConfig+0x4c0>)
 8007712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007716:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800771a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800771e:	d017      	beq.n	8007750 <UART_SetConfig+0x338>
 8007720:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007724:	d817      	bhi.n	8007756 <UART_SetConfig+0x33e>
 8007726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800772a:	d00b      	beq.n	8007744 <UART_SetConfig+0x32c>
 800772c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007730:	d811      	bhi.n	8007756 <UART_SetConfig+0x33e>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <UART_SetConfig+0x326>
 8007736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800773a:	d006      	beq.n	800774a <UART_SetConfig+0x332>
 800773c:	e00b      	b.n	8007756 <UART_SetConfig+0x33e>
 800773e:	2300      	movs	r3, #0
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e00d      	b.n	8007760 <UART_SetConfig+0x348>
 8007744:	2302      	movs	r3, #2
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e00a      	b.n	8007760 <UART_SetConfig+0x348>
 800774a:	2304      	movs	r3, #4
 800774c:	77fb      	strb	r3, [r7, #31]
 800774e:	e007      	b.n	8007760 <UART_SetConfig+0x348>
 8007750:	2308      	movs	r3, #8
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e004      	b.n	8007760 <UART_SetConfig+0x348>
 8007756:	2310      	movs	r3, #16
 8007758:	77fb      	strb	r3, [r7, #31]
 800775a:	e001      	b.n	8007760 <UART_SetConfig+0x348>
 800775c:	2310      	movs	r3, #16
 800775e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007768:	d15b      	bne.n	8007822 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800776a:	7ffb      	ldrb	r3, [r7, #31]
 800776c:	2b08      	cmp	r3, #8
 800776e:	d828      	bhi.n	80077c2 <UART_SetConfig+0x3aa>
 8007770:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <UART_SetConfig+0x360>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	0800779d 	.word	0x0800779d
 800777c:	080077a5 	.word	0x080077a5
 8007780:	080077ad 	.word	0x080077ad
 8007784:	080077c3 	.word	0x080077c3
 8007788:	080077b3 	.word	0x080077b3
 800778c:	080077c3 	.word	0x080077c3
 8007790:	080077c3 	.word	0x080077c3
 8007794:	080077c3 	.word	0x080077c3
 8007798:	080077bb 	.word	0x080077bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800779c:	f7fe fec4 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 80077a0:	61b8      	str	r0, [r7, #24]
        break;
 80077a2:	e013      	b.n	80077cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a4:	f7fe fed4 	bl	8006550 <HAL_RCC_GetPCLK2Freq>
 80077a8:	61b8      	str	r0, [r7, #24]
        break;
 80077aa:	e00f      	b.n	80077cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ac:	4b4b      	ldr	r3, [pc, #300]	; (80078dc <UART_SetConfig+0x4c4>)
 80077ae:	61bb      	str	r3, [r7, #24]
        break;
 80077b0:	e00c      	b.n	80077cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077b2:	f7fe fda7 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 80077b6:	61b8      	str	r0, [r7, #24]
        break;
 80077b8:	e008      	b.n	80077cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077be:	61bb      	str	r3, [r7, #24]
        break;
 80077c0:	e004      	b.n	80077cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	77bb      	strb	r3, [r7, #30]
        break;
 80077ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d074      	beq.n	80078bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	005a      	lsls	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	085b      	lsrs	r3, r3, #1
 80077dc:	441a      	add	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	2b0f      	cmp	r3, #15
 80077ec:	d916      	bls.n	800781c <UART_SetConfig+0x404>
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f4:	d212      	bcs.n	800781c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	f023 030f 	bic.w	r3, r3, #15
 80077fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	b29b      	uxth	r3, r3
 8007806:	f003 0307 	and.w	r3, r3, #7
 800780a:	b29a      	uxth	r2, r3
 800780c:	89fb      	ldrh	r3, [r7, #14]
 800780e:	4313      	orrs	r3, r2
 8007810:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	89fa      	ldrh	r2, [r7, #14]
 8007818:	60da      	str	r2, [r3, #12]
 800781a:	e04f      	b.n	80078bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	77bb      	strb	r3, [r7, #30]
 8007820:	e04c      	b.n	80078bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007822:	7ffb      	ldrb	r3, [r7, #31]
 8007824:	2b08      	cmp	r3, #8
 8007826:	d828      	bhi.n	800787a <UART_SetConfig+0x462>
 8007828:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <UART_SetConfig+0x418>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007855 	.word	0x08007855
 8007834:	0800785d 	.word	0x0800785d
 8007838:	08007865 	.word	0x08007865
 800783c:	0800787b 	.word	0x0800787b
 8007840:	0800786b 	.word	0x0800786b
 8007844:	0800787b 	.word	0x0800787b
 8007848:	0800787b 	.word	0x0800787b
 800784c:	0800787b 	.word	0x0800787b
 8007850:	08007873 	.word	0x08007873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007854:	f7fe fe68 	bl	8006528 <HAL_RCC_GetPCLK1Freq>
 8007858:	61b8      	str	r0, [r7, #24]
        break;
 800785a:	e013      	b.n	8007884 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800785c:	f7fe fe78 	bl	8006550 <HAL_RCC_GetPCLK2Freq>
 8007860:	61b8      	str	r0, [r7, #24]
        break;
 8007862:	e00f      	b.n	8007884 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007864:	4b1d      	ldr	r3, [pc, #116]	; (80078dc <UART_SetConfig+0x4c4>)
 8007866:	61bb      	str	r3, [r7, #24]
        break;
 8007868:	e00c      	b.n	8007884 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800786a:	f7fe fd4b 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 800786e:	61b8      	str	r0, [r7, #24]
        break;
 8007870:	e008      	b.n	8007884 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007876:	61bb      	str	r3, [r7, #24]
        break;
 8007878:	e004      	b.n	8007884 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	77bb      	strb	r3, [r7, #30]
        break;
 8007882:	bf00      	nop
    }

    if (pclk != 0U)
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d018      	beq.n	80078bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	085a      	lsrs	r2, r3, #1
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	441a      	add	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	fbb2 f3f3 	udiv	r3, r2, r3
 800789c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	2b0f      	cmp	r3, #15
 80078a2:	d909      	bls.n	80078b8 <UART_SetConfig+0x4a0>
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078aa:	d205      	bcs.n	80078b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60da      	str	r2, [r3, #12]
 80078b6:	e001      	b.n	80078bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80078c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	40007c00 	.word	0x40007c00
 80078d8:	40023800 	.word	0x40023800
 80078dc:	00f42400 	.word	0x00f42400

080078e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	f003 0308 	and.w	r3, r3, #8
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	f003 0310 	and.w	r3, r3, #16
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00a      	beq.n	8007992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	f003 0320 	and.w	r3, r3, #32
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01a      	beq.n	80079f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079de:	d10a      	bne.n	80079f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00a      	beq.n	8007a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	605a      	str	r2, [r3, #4]
  }
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af02      	add	r7, sp, #8
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a34:	f7fc fb0e 	bl	8004054 <HAL_GetTick>
 8007a38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d10e      	bne.n	8007a66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f81b 	bl	8007a92 <UART_WaitOnFlagUntilTimeout>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e011      	b.n	8007a8a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b09c      	sub	sp, #112	; 0x70
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	603b      	str	r3, [r7, #0]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa2:	e0a7      	b.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	f000 80a3 	beq.w	8007bf4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aae:	f7fc fad1 	bl	8004054 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d302      	bcc.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d13f      	bne.n	8007b44 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007acc:	e853 3f00 	ldrex	r3, [r3]
 8007ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ae4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ae8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1e6      	bne.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	f023 0301 	bic.w	r3, r3, #1
 8007b0c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3308      	adds	r3, #8
 8007b14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b16:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e5      	bne.n	8007af6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e068      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d050      	beq.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b60:	d148      	bne.n	8007bf4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b6a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b8c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e6      	bne.n	8007b6c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	613b      	str	r3, [r7, #16]
   return(result);
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3308      	adds	r3, #8
 8007bbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bbe:	623a      	str	r2, [r7, #32]
 8007bc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	69f9      	ldr	r1, [r7, #28]
 8007bc4:	6a3a      	ldr	r2, [r7, #32]
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e5      	bne.n	8007b9e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e010      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69da      	ldr	r2, [r3, #28]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	bf0c      	ite	eq
 8007c04:	2301      	moveq	r3, #1
 8007c06:	2300      	movne	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	f43f af48 	beq.w	8007aa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3770      	adds	r7, #112	; 0x70
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c20:	b084      	sub	sp, #16
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	f107 001c 	add.w	r0, r7, #28
 8007c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d120      	bne.n	8007c7a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68da      	ldr	r2, [r3, #12]
 8007c48:	4b20      	ldr	r3, [pc, #128]	; (8007ccc <USB_CoreInit+0xac>)
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d105      	bne.n	8007c6e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa96 	bl	80081a0 <USB_CoreReset>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	e010      	b.n	8007c9c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa8a 	bl	80081a0 <USB_CoreReset>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d10b      	bne.n	8007cba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f043 0206 	orr.w	r2, r3, #6
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f043 0220 	orr.w	r2, r3, #32
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cc6:	b004      	add	sp, #16
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	ffbdffbf 	.word	0xffbdffbf

08007cd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f023 0201 	bic.w	r2, r3, #1
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d115      	bne.n	8007d40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d20:	2001      	movs	r0, #1
 8007d22:	f7fc f9a3 	bl	800406c <HAL_Delay>
      ms++;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fa29 	bl	8008184 <USB_GetMode>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d01e      	beq.n	8007d76 <USB_SetCurrentMode+0x84>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b31      	cmp	r3, #49	; 0x31
 8007d3c:	d9f0      	bls.n	8007d20 <USB_SetCurrentMode+0x2e>
 8007d3e:	e01a      	b.n	8007d76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d115      	bne.n	8007d72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d52:	2001      	movs	r0, #1
 8007d54:	f7fc f98a 	bl	800406c <HAL_Delay>
      ms++;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa10 	bl	8008184 <USB_GetMode>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d005      	beq.n	8007d76 <USB_SetCurrentMode+0x84>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b31      	cmp	r3, #49	; 0x31
 8007d6e:	d9f0      	bls.n	8007d52 <USB_SetCurrentMode+0x60>
 8007d70:	e001      	b.n	8007d76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e005      	b.n	8007d82 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b32      	cmp	r3, #50	; 0x32
 8007d7a:	d101      	bne.n	8007d80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b086      	sub	sp, #24
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	e009      	b.n	8007dc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	3340      	adds	r3, #64	; 0x40
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	2200      	movs	r2, #0
 8007db8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	613b      	str	r3, [r7, #16]
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2b0e      	cmp	r3, #14
 8007dc4:	d9f2      	bls.n	8007dac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d11c      	bne.n	8007e06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dda:	f043 0302 	orr.w	r3, r3, #2
 8007dde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	e005      	b.n	8007e12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e18:	461a      	mov	r2, r3
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e24:	4619      	mov	r1, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	680b      	ldr	r3, [r1, #0]
 8007e30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d10c      	bne.n	8007e52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d104      	bne.n	8007e48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e3e:	2100      	movs	r1, #0
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f965 	bl	8008110 <USB_SetDevSpeed>
 8007e46:	e008      	b.n	8007e5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e48:	2101      	movs	r1, #1
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f960 	bl	8008110 <USB_SetDevSpeed>
 8007e50:	e003      	b.n	8007e5a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e52:	2103      	movs	r1, #3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f95b 	bl	8008110 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e5a:	2110      	movs	r1, #16
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f8f3 	bl	8008048 <USB_FlushTxFifo>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f91f 	bl	80080b0 <USB_FlushRxFifo>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e82:	461a      	mov	r2, r3
 8007e84:	2300      	movs	r3, #0
 8007e86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8e:	461a      	mov	r2, r3
 8007e90:	2300      	movs	r3, #0
 8007e92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	613b      	str	r3, [r7, #16]
 8007ea4:	e043      	b.n	8007f2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ebc:	d118      	bne.n	8007ef0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	e013      	b.n	8007f02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	e008      	b.n	8007f02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efc:	461a      	mov	r2, r3
 8007efe:	2300      	movs	r3, #0
 8007f00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0e:	461a      	mov	r2, r3
 8007f10:	2300      	movs	r3, #0
 8007f12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f20:	461a      	mov	r2, r3
 8007f22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	613b      	str	r3, [r7, #16]
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d3b7      	bcc.n	8007ea6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f36:	2300      	movs	r3, #0
 8007f38:	613b      	str	r3, [r7, #16]
 8007f3a:	e043      	b.n	8007fc4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f52:	d118      	bne.n	8007f86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10a      	bne.n	8007f70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f66:	461a      	mov	r2, r3
 8007f68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f6c:	6013      	str	r3, [r2, #0]
 8007f6e:	e013      	b.n	8007f98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	e008      	b.n	8007f98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f92:	461a      	mov	r2, r3
 8007f94:	2300      	movs	r3, #0
 8007f96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d3b7      	bcc.n	8007f3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007fec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d105      	bne.n	8008000 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	f043 0210 	orr.w	r2, r3, #16
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	699a      	ldr	r2, [r3, #24]
 8008004:	4b0e      	ldr	r3, [pc, #56]	; (8008040 <USB_DevInit+0x2b4>)
 8008006:	4313      	orrs	r3, r2
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800800c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d005      	beq.n	800801e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	f043 0208 	orr.w	r2, r3, #8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800801e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008020:	2b01      	cmp	r3, #1
 8008022:	d105      	bne.n	8008030 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	699a      	ldr	r2, [r3, #24]
 8008028:	4b06      	ldr	r3, [pc, #24]	; (8008044 <USB_DevInit+0x2b8>)
 800802a:	4313      	orrs	r3, r2
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008030:	7dfb      	ldrb	r3, [r7, #23]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800803c:	b004      	add	sp, #16
 800803e:	4770      	bx	lr
 8008040:	803c3800 	.word	0x803c3800
 8008044:	40000004 	.word	0x40000004

08008048 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3301      	adds	r3, #1
 800805a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4a13      	ldr	r2, [pc, #76]	; (80080ac <USB_FlushTxFifo+0x64>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d901      	bls.n	8008068 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e01b      	b.n	80080a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	daf2      	bge.n	8008056 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	019b      	lsls	r3, r3, #6
 8008078:	f043 0220 	orr.w	r2, r3, #32
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3301      	adds	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4a08      	ldr	r2, [pc, #32]	; (80080ac <USB_FlushTxFifo+0x64>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d901      	bls.n	8008092 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e006      	b.n	80080a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b20      	cmp	r3, #32
 800809c:	d0f0      	beq.n	8008080 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	00030d40 	.word	0x00030d40

080080b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3301      	adds	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4a11      	ldr	r2, [pc, #68]	; (800810c <USB_FlushRxFifo+0x5c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d901      	bls.n	80080ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e018      	b.n	8008100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	daf2      	bge.n	80080bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2210      	movs	r2, #16
 80080de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3301      	adds	r3, #1
 80080e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4a08      	ldr	r2, [pc, #32]	; (800810c <USB_FlushRxFifo+0x5c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d901      	bls.n	80080f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e006      	b.n	8008100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	f003 0310 	and.w	r3, r3, #16
 80080fa:	2b10      	cmp	r3, #16
 80080fc:	d0f0      	beq.n	80080e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	00030d40 	.word	0x00030d40

08008110 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	68f9      	ldr	r1, [r7, #12]
 800812c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008130:	4313      	orrs	r3, r2
 8008132:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800815c:	f023 0303 	bic.w	r3, r3, #3
 8008160:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008170:	f043 0302 	orr.w	r3, r3, #2
 8008174:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	f003 0301 	and.w	r3, r3, #1
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3301      	adds	r3, #1
 80081b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4a13      	ldr	r2, [pc, #76]	; (8008204 <USB_CoreReset+0x64>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d901      	bls.n	80081be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e01b      	b.n	80081f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	daf2      	bge.n	80081ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	f043 0201 	orr.w	r2, r3, #1
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3301      	adds	r3, #1
 80081da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4a09      	ldr	r2, [pc, #36]	; (8008204 <USB_CoreReset+0x64>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d901      	bls.n	80081e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e006      	b.n	80081f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d0f0      	beq.n	80081d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	00030d40 	.word	0x00030d40

08008208 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008208:	b480      	push	{r7}
 800820a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800820c:	bf00      	nop
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
	...

08008218 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800821e:	f3ef 8305 	mrs	r3, IPSR
 8008222:	60bb      	str	r3, [r7, #8]
  return(result);
 8008224:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10f      	bne.n	800824a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800822a:	f3ef 8310 	mrs	r3, PRIMASK
 800822e:	607b      	str	r3, [r7, #4]
  return(result);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d105      	bne.n	8008242 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008236:	f3ef 8311 	mrs	r3, BASEPRI
 800823a:	603b      	str	r3, [r7, #0]
  return(result);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <osKernelInitialize+0x3a>
 8008242:	4b0e      	ldr	r3, [pc, #56]	; (800827c <osKernelInitialize+0x64>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b02      	cmp	r3, #2
 8008248:	d103      	bne.n	8008252 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800824a:	f06f 0305 	mvn.w	r3, #5
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e00c      	b.n	800826c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008252:	4b0a      	ldr	r3, [pc, #40]	; (800827c <osKernelInitialize+0x64>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d105      	bne.n	8008266 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800825a:	4b08      	ldr	r3, [pc, #32]	; (800827c <osKernelInitialize+0x64>)
 800825c:	2201      	movs	r2, #1
 800825e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e002      	b.n	800826c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008266:	f04f 33ff 	mov.w	r3, #4294967295
 800826a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800826c:	68fb      	ldr	r3, [r7, #12]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	20000b6c 	.word	0x20000b6c

08008280 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008286:	f3ef 8305 	mrs	r3, IPSR
 800828a:	60bb      	str	r3, [r7, #8]
  return(result);
 800828c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10f      	bne.n	80082b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008292:	f3ef 8310 	mrs	r3, PRIMASK
 8008296:	607b      	str	r3, [r7, #4]
  return(result);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d105      	bne.n	80082aa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800829e:	f3ef 8311 	mrs	r3, BASEPRI
 80082a2:	603b      	str	r3, [r7, #0]
  return(result);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <osKernelStart+0x3a>
 80082aa:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <osKernelStart+0x68>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d103      	bne.n	80082ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80082b2:	f06f 0305 	mvn.w	r3, #5
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	e010      	b.n	80082dc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082ba:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <osKernelStart+0x68>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d109      	bne.n	80082d6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082c2:	f7ff ffa1 	bl	8008208 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082c6:	4b08      	ldr	r3, [pc, #32]	; (80082e8 <osKernelStart+0x68>)
 80082c8:	2202      	movs	r2, #2
 80082ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082cc:	f001 fcf2 	bl	8009cb4 <vTaskStartScheduler>
      stat = osOK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e002      	b.n	80082dc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80082d6:	f04f 33ff 	mov.w	r3, #4294967295
 80082da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80082dc:	68fb      	ldr	r3, [r7, #12]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20000b6c 	.word	0x20000b6c

080082ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b090      	sub	sp, #64	; 0x40
 80082f0:	af04      	add	r7, sp, #16
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082fc:	f3ef 8305 	mrs	r3, IPSR
 8008300:	61fb      	str	r3, [r7, #28]
  return(result);
 8008302:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008304:	2b00      	cmp	r3, #0
 8008306:	f040 808f 	bne.w	8008428 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800830a:	f3ef 8310 	mrs	r3, PRIMASK
 800830e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d105      	bne.n	8008322 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008316:	f3ef 8311 	mrs	r3, BASEPRI
 800831a:	617b      	str	r3, [r7, #20]
  return(result);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <osThreadNew+0x3e>
 8008322:	4b44      	ldr	r3, [pc, #272]	; (8008434 <osThreadNew+0x148>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b02      	cmp	r3, #2
 8008328:	d07e      	beq.n	8008428 <osThreadNew+0x13c>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d07b      	beq.n	8008428 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008330:	2380      	movs	r3, #128	; 0x80
 8008332:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008334:	2318      	movs	r3, #24
 8008336:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008338:	2300      	movs	r3, #0
 800833a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800833c:	f04f 33ff 	mov.w	r3, #4294967295
 8008340:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d045      	beq.n	80083d4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <osThreadNew+0x6a>
        name = attr->name;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d002      	beq.n	8008364 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	2b00      	cmp	r3, #0
 8008368:	d008      	beq.n	800837c <osThreadNew+0x90>
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	2b38      	cmp	r3, #56	; 0x38
 800836e:	d805      	bhi.n	800837c <osThreadNew+0x90>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <osThreadNew+0x94>
        return (NULL);
 800837c:	2300      	movs	r3, #0
 800837e:	e054      	b.n	800842a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	089b      	lsrs	r3, r3, #2
 800838e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00e      	beq.n	80083b6 <osThreadNew+0xca>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	2bbb      	cmp	r3, #187	; 0xbb
 800839e:	d90a      	bls.n	80083b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d006      	beq.n	80083b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <osThreadNew+0xca>
        mem = 1;
 80083b0:	2301      	movs	r3, #1
 80083b2:	623b      	str	r3, [r7, #32]
 80083b4:	e010      	b.n	80083d8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10c      	bne.n	80083d8 <osThreadNew+0xec>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d108      	bne.n	80083d8 <osThreadNew+0xec>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d104      	bne.n	80083d8 <osThreadNew+0xec>
          mem = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	623b      	str	r3, [r7, #32]
 80083d2:	e001      	b.n	80083d8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d110      	bne.n	8008400 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083e6:	9202      	str	r2, [sp, #8]
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f001 f98b 	bl	8009710 <xTaskCreateStatic>
 80083fa:	4603      	mov	r3, r0
 80083fc:	613b      	str	r3, [r7, #16]
 80083fe:	e013      	b.n	8008428 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d110      	bne.n	8008428 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	b29a      	uxth	r2, r3
 800840a:	f107 0310 	add.w	r3, r7, #16
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f001 f9dc 	bl	80097d6 <xTaskCreate>
 800841e:	4603      	mov	r3, r0
 8008420:	2b01      	cmp	r3, #1
 8008422:	d001      	beq.n	8008428 <osThreadNew+0x13c>
          hTask = NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008428:	693b      	ldr	r3, [r7, #16]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3730      	adds	r7, #48	; 0x30
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000b6c 	.word	0x20000b6c

08008438 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008440:	f3ef 8305 	mrs	r3, IPSR
 8008444:	613b      	str	r3, [r7, #16]
  return(result);
 8008446:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10f      	bne.n	800846c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800844c:	f3ef 8310 	mrs	r3, PRIMASK
 8008450:	60fb      	str	r3, [r7, #12]
  return(result);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d105      	bne.n	8008464 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008458:	f3ef 8311 	mrs	r3, BASEPRI
 800845c:	60bb      	str	r3, [r7, #8]
  return(result);
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d007      	beq.n	8008474 <osDelay+0x3c>
 8008464:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <osDelay+0x58>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b02      	cmp	r3, #2
 800846a:	d103      	bne.n	8008474 <osDelay+0x3c>
    stat = osErrorISR;
 800846c:	f06f 0305 	mvn.w	r3, #5
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	e007      	b.n	8008484 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d002      	beq.n	8008484 <osDelay+0x4c>
      vTaskDelay(ticks);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 fb7a 	bl	8009b78 <vTaskDelay>
    }
  }

  return (stat);
 8008484:	697b      	ldr	r3, [r7, #20]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20000b6c 	.word	0x20000b6c

08008494 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4a07      	ldr	r2, [pc, #28]	; (80084c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80084a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4a06      	ldr	r2, [pc, #24]	; (80084c4 <vApplicationGetIdleTaskMemory+0x30>)
 80084aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2280      	movs	r2, #128	; 0x80
 80084b0:	601a      	str	r2, [r3, #0]
}
 80084b2:	bf00      	nop
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	20000b70 	.word	0x20000b70
 80084c4:	20000c2c 	.word	0x20000c2c

080084c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4a07      	ldr	r2, [pc, #28]	; (80084f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80084d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4a06      	ldr	r2, [pc, #24]	; (80084f8 <vApplicationGetTimerTaskMemory+0x30>)
 80084de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084e6:	601a      	str	r2, [r3, #0]
}
 80084e8:	bf00      	nop
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	20000e2c 	.word	0x20000e2c
 80084f8:	20000ee8 	.word	0x20000ee8

080084fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f103 0208 	add.w	r2, r3, #8
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f04f 32ff 	mov.w	r2, #4294967295
 8008514:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f103 0208 	add.w	r2, r3, #8
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f103 0208 	add.w	r2, r3, #8
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008556:	b480      	push	{r7}
 8008558:	b085      	sub	sp, #20
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	601a      	str	r2, [r3, #0]
}
 8008592:	bf00      	nop
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800859e:	b480      	push	{r7}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b4:	d103      	bne.n	80085be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	e00c      	b.n	80085d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3308      	adds	r3, #8
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e002      	b.n	80085cc <vListInsert+0x2e>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d2f6      	bcs.n	80085c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	601a      	str	r2, [r3, #0]
}
 8008604:	bf00      	nop
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	6892      	ldr	r2, [r2, #8]
 8008626:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6852      	ldr	r2, [r2, #4]
 8008630:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	429a      	cmp	r2, r3
 800863a:	d103      	bne.n	8008644 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689a      	ldr	r2, [r3, #8]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	1e5a      	subs	r2, r3, #1
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3714      	adds	r7, #20
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10c      	bne.n	8008692 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	b672      	cpsid	i
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	b662      	cpsie	i
 800868c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008692:	f003 f80b 	bl	800b6ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086a2:	fb01 f303 	mul.w	r3, r1, r3
 80086a6:	441a      	add	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	3b01      	subs	r3, #1
 80086c4:	68f9      	ldr	r1, [r7, #12]
 80086c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086c8:	fb01 f303 	mul.w	r3, r1, r3
 80086cc:	441a      	add	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	22ff      	movs	r2, #255	; 0xff
 80086d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	22ff      	movs	r2, #255	; 0xff
 80086de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d114      	bne.n	8008712 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01a      	beq.n	8008726 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3310      	adds	r3, #16
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 fe31 	bl	800a35c <xTaskRemoveFromEventList>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d012      	beq.n	8008726 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008700:	4b0c      	ldr	r3, [pc, #48]	; (8008734 <xQueueGenericReset+0xd0>)
 8008702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	e009      	b.n	8008726 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3310      	adds	r3, #16
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff fef0 	bl	80084fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3324      	adds	r3, #36	; 0x24
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff feeb 	bl	80084fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008726:	f002 fff5 	bl	800b714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800872a:	2301      	movs	r3, #1
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	e000ed04 	.word	0xe000ed04

08008738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08e      	sub	sp, #56	; 0x38
 800873c:	af02      	add	r7, sp, #8
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10c      	bne.n	8008766 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	b672      	cpsid	i
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	b662      	cpsie	i
 8008760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10c      	bne.n	8008786 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	b672      	cpsid	i
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	b662      	cpsie	i
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <xQueueGenericCreateStatic+0x5a>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <xQueueGenericCreateStatic+0x5e>
 8008792:	2301      	movs	r3, #1
 8008794:	e000      	b.n	8008798 <xQueueGenericCreateStatic+0x60>
 8008796:	2300      	movs	r3, #0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10c      	bne.n	80087b6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	b672      	cpsid	i
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	b662      	cpsie	i
 80087b0:	623b      	str	r3, [r7, #32]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d102      	bne.n	80087c2 <xQueueGenericCreateStatic+0x8a>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <xQueueGenericCreateStatic+0x8e>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e000      	b.n	80087c8 <xQueueGenericCreateStatic+0x90>
 80087c6:	2300      	movs	r3, #0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10c      	bne.n	80087e6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	b672      	cpsid	i
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	b662      	cpsie	i
 80087e0:	61fb      	str	r3, [r7, #28]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087e6:	2350      	movs	r3, #80	; 0x50
 80087e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b50      	cmp	r3, #80	; 0x50
 80087ee:	d00c      	beq.n	800880a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	b672      	cpsid	i
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	b662      	cpsie	i
 8008804:	61bb      	str	r3, [r7, #24]
}
 8008806:	bf00      	nop
 8008808:	e7fe      	b.n	8008808 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800880a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00d      	beq.n	8008832 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	2201      	movs	r2, #1
 800881a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800881e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	4613      	mov	r3, r2
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 f847 	bl	80088c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008834:	4618      	mov	r0, r3
 8008836:	3730      	adds	r7, #48	; 0x30
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08a      	sub	sp, #40	; 0x28
 8008840:	af02      	add	r7, sp, #8
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10c      	bne.n	800886a <xQueueGenericCreate+0x2e>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	b672      	cpsid	i
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	b662      	cpsie	i
 8008864:	613b      	str	r3, [r7, #16]
}
 8008866:	bf00      	nop
 8008868:	e7fe      	b.n	8008868 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008870:	2300      	movs	r3, #0
 8008872:	61fb      	str	r3, [r7, #28]
 8008874:	e004      	b.n	8008880 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	fb02 f303 	mul.w	r3, r2, r3
 800887e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	3350      	adds	r3, #80	; 0x50
 8008884:	4618      	mov	r0, r3
 8008886:	f003 f83d 	bl	800b904 <pvPortMalloc>
 800888a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d011      	beq.n	80088b6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	3350      	adds	r3, #80	; 0x50
 800889a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088a4:	79fa      	ldrb	r2, [r7, #7]
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	4613      	mov	r3, r2
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	68b9      	ldr	r1, [r7, #8]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f805 	bl	80088c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088b6:	69bb      	ldr	r3, [r7, #24]
	}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3720      	adds	r7, #32
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
 80088cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d103      	bne.n	80088dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e002      	b.n	80088e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088ee:	2101      	movs	r1, #1
 80088f0:	69b8      	ldr	r0, [r7, #24]
 80088f2:	f7ff feb7 	bl	8008664 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	78fa      	ldrb	r2, [r7, #3]
 80088fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088fe:	bf00      	nop
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00e      	beq.n	8008932 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008926:	2300      	movs	r3, #0
 8008928:	2200      	movs	r2, #0
 800892a:	2100      	movs	r1, #0
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f81d 	bl	800896c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008932:	bf00      	nop
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800893a:	b580      	push	{r7, lr}
 800893c:	b086      	sub	sp, #24
 800893e:	af00      	add	r7, sp, #0
 8008940:	4603      	mov	r3, r0
 8008942:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008944:	2301      	movs	r3, #1
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	2300      	movs	r3, #0
 800894a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800894c:	79fb      	ldrb	r3, [r7, #7]
 800894e:	461a      	mov	r2, r3
 8008950:	6939      	ldr	r1, [r7, #16]
 8008952:	6978      	ldr	r0, [r7, #20]
 8008954:	f7ff ff72 	bl	800883c <xQueueGenericCreate>
 8008958:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f7ff ffd3 	bl	8008906 <prvInitialiseMutex>

		return xNewQueue;
 8008960:	68fb      	ldr	r3, [r7, #12]
	}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08e      	sub	sp, #56	; 0x38
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800897a:	2300      	movs	r3, #0
 800897c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10c      	bne.n	80089a2 <xQueueGenericSend+0x36>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	b672      	cpsid	i
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	b662      	cpsie	i
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d103      	bne.n	80089b0 <xQueueGenericSend+0x44>
 80089a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <xQueueGenericSend+0x48>
 80089b0:	2301      	movs	r3, #1
 80089b2:	e000      	b.n	80089b6 <xQueueGenericSend+0x4a>
 80089b4:	2300      	movs	r3, #0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10c      	bne.n	80089d4 <xQueueGenericSend+0x68>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	b672      	cpsid	i
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	b662      	cpsie	i
 80089ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d103      	bne.n	80089e2 <xQueueGenericSend+0x76>
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d101      	bne.n	80089e6 <xQueueGenericSend+0x7a>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e000      	b.n	80089e8 <xQueueGenericSend+0x7c>
 80089e6:	2300      	movs	r3, #0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10c      	bne.n	8008a06 <xQueueGenericSend+0x9a>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	b672      	cpsid	i
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	b662      	cpsie	i
 8008a00:	623b      	str	r3, [r7, #32]
}
 8008a02:	bf00      	nop
 8008a04:	e7fe      	b.n	8008a04 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a06:	f001 ff47 	bl	800a898 <xTaskGetSchedulerState>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d102      	bne.n	8008a16 <xQueueGenericSend+0xaa>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <xQueueGenericSend+0xae>
 8008a16:	2301      	movs	r3, #1
 8008a18:	e000      	b.n	8008a1c <xQueueGenericSend+0xb0>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10c      	bne.n	8008a3a <xQueueGenericSend+0xce>
	__asm volatile
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	b672      	cpsid	i
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	b662      	cpsie	i
 8008a34:	61fb      	str	r3, [r7, #28]
}
 8008a36:	bf00      	nop
 8008a38:	e7fe      	b.n	8008a38 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a3a:	f002 fe37 	bl	800b6ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d302      	bcc.n	8008a50 <xQueueGenericSend+0xe4>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d129      	bne.n	8008aa4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	68b9      	ldr	r1, [r7, #8]
 8008a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a56:	f000 fcc2 	bl	80093de <prvCopyDataToQueue>
 8008a5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d010      	beq.n	8008a86 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	3324      	adds	r3, #36	; 0x24
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f001 fc77 	bl	800a35c <xTaskRemoveFromEventList>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d013      	beq.n	8008a9c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a74:	4b3f      	ldr	r3, [pc, #252]	; (8008b74 <xQueueGenericSend+0x208>)
 8008a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	e00a      	b.n	8008a9c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d007      	beq.n	8008a9c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a8c:	4b39      	ldr	r3, [pc, #228]	; (8008b74 <xQueueGenericSend+0x208>)
 8008a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a9c:	f002 fe3a 	bl	800b714 <vPortExitCritical>
				return pdPASS;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e063      	b.n	8008b6c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d103      	bne.n	8008ab2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008aaa:	f002 fe33 	bl	800b714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e05c      	b.n	8008b6c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d106      	bne.n	8008ac6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ab8:	f107 0314 	add.w	r3, r7, #20
 8008abc:	4618      	mov	r0, r3
 8008abe:	f001 fcb3 	bl	800a428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ac6:	f002 fe25 	bl	800b714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008aca:	f001 f967 	bl	8009d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ace:	f002 fded 	bl	800b6ac <vPortEnterCritical>
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ad8:	b25b      	sxtb	r3, r3
 8008ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ade:	d103      	bne.n	8008ae8 <xQueueGenericSend+0x17c>
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aee:	b25b      	sxtb	r3, r3
 8008af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af4:	d103      	bne.n	8008afe <xQueueGenericSend+0x192>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008afe:	f002 fe09 	bl	800b714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b02:	1d3a      	adds	r2, r7, #4
 8008b04:	f107 0314 	add.w	r3, r7, #20
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f001 fca2 	bl	800a454 <xTaskCheckForTimeOut>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d124      	bne.n	8008b60 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b18:	f000 fd59 	bl	80095ce <prvIsQueueFull>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d018      	beq.n	8008b54 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	3310      	adds	r3, #16
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 fbc2 	bl	800a2b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b32:	f000 fce4 	bl	80094fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b36:	f001 f93f 	bl	8009db8 <xTaskResumeAll>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f47f af7c 	bne.w	8008a3a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008b42:	4b0c      	ldr	r3, [pc, #48]	; (8008b74 <xQueueGenericSend+0x208>)
 8008b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b48:	601a      	str	r2, [r3, #0]
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	e772      	b.n	8008a3a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b56:	f000 fcd2 	bl	80094fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b5a:	f001 f92d 	bl	8009db8 <xTaskResumeAll>
 8008b5e:	e76c      	b.n	8008a3a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b62:	f000 fccc 	bl	80094fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b66:	f001 f927 	bl	8009db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3738      	adds	r7, #56	; 0x38
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	e000ed04 	.word	0xe000ed04

08008b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08e      	sub	sp, #56	; 0x38
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10c      	bne.n	8008baa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	b672      	cpsid	i
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	b662      	cpsie	i
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ba6:	bf00      	nop
 8008ba8:	e7fe      	b.n	8008ba8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d103      	bne.n	8008bb8 <xQueueGenericSendFromISR+0x40>
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <xQueueGenericSendFromISR+0x44>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e000      	b.n	8008bbe <xQueueGenericSendFromISR+0x46>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10c      	bne.n	8008bdc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc6:	b672      	cpsid	i
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	b662      	cpsie	i
 8008bd6:	623b      	str	r3, [r7, #32]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d103      	bne.n	8008bea <xQueueGenericSendFromISR+0x72>
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d101      	bne.n	8008bee <xQueueGenericSendFromISR+0x76>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <xQueueGenericSendFromISR+0x78>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10c      	bne.n	8008c0e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	b672      	cpsid	i
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	b662      	cpsie	i
 8008c08:	61fb      	str	r3, [r7, #28]
}
 8008c0a:	bf00      	nop
 8008c0c:	e7fe      	b.n	8008c0c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c0e:	f002 fe35 	bl	800b87c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c12:	f3ef 8211 	mrs	r2, BASEPRI
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	b672      	cpsid	i
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	b662      	cpsie	i
 8008c2a:	61ba      	str	r2, [r7, #24]
 8008c2c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c2e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d302      	bcc.n	8008c44 <xQueueGenericSendFromISR+0xcc>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d12c      	bne.n	8008c9e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	68b9      	ldr	r1, [r7, #8]
 8008c52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c54:	f000 fbc3 	bl	80093de <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c58:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c60:	d112      	bne.n	8008c88 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d016      	beq.n	8008c98 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	3324      	adds	r3, #36	; 0x24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f001 fb74 	bl	800a35c <xTaskRemoveFromEventList>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00e      	beq.n	8008c98 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00b      	beq.n	8008c98 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	e007      	b.n	8008c98 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	b25a      	sxtb	r2, r3
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008c9c:	e001      	b.n	8008ca2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3738      	adds	r7, #56	; 0x38
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08e      	sub	sp, #56	; 0x38
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10c      	bne.n	8008ce6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	b672      	cpsid	i
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	b662      	cpsie	i
 8008ce0:	623b      	str	r3, [r7, #32]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00c      	beq.n	8008d08 <xQueueGiveFromISR+0x50>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	b672      	cpsid	i
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	b662      	cpsie	i
 8008d02:	61fb      	str	r3, [r7, #28]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d103      	bne.n	8008d18 <xQueueGiveFromISR+0x60>
 8008d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <xQueueGiveFromISR+0x64>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <xQueueGiveFromISR+0x66>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10c      	bne.n	8008d3c <xQueueGiveFromISR+0x84>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d26:	b672      	cpsid	i
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	b662      	cpsie	i
 8008d36:	61bb      	str	r3, [r7, #24]
}
 8008d38:	bf00      	nop
 8008d3a:	e7fe      	b.n	8008d3a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d3c:	f002 fd9e 	bl	800b87c <vPortValidateInterruptPriority>
	__asm volatile
 8008d40:	f3ef 8211 	mrs	r2, BASEPRI
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	b672      	cpsid	i
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	b662      	cpsie	i
 8008d58:	617a      	str	r2, [r7, #20]
 8008d5a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008d5c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d64:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d22b      	bcs.n	8008dc8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8a:	d112      	bne.n	8008db2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d016      	beq.n	8008dc2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	3324      	adds	r3, #36	; 0x24
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 fadf 	bl	800a35c <xTaskRemoveFromEventList>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00e      	beq.n	8008dc2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00b      	beq.n	8008dc2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2201      	movs	r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	e007      	b.n	8008dc2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008db6:	3301      	adds	r3, #1
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	b25a      	sxtb	r2, r3
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc6:	e001      	b.n	8008dcc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	637b      	str	r3, [r7, #52]	; 0x34
 8008dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dce:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f383 8811 	msr	BASEPRI, r3
}
 8008dd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3738      	adds	r7, #56	; 0x38
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08c      	sub	sp, #48	; 0x30
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10c      	bne.n	8008e18 <xQueueReceive+0x34>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	b672      	cpsid	i
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	b662      	cpsie	i
 8008e12:	623b      	str	r3, [r7, #32]
}
 8008e14:	bf00      	nop
 8008e16:	e7fe      	b.n	8008e16 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d103      	bne.n	8008e26 <xQueueReceive+0x42>
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <xQueueReceive+0x46>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <xQueueReceive+0x48>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10c      	bne.n	8008e4a <xQueueReceive+0x66>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	b672      	cpsid	i
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	b662      	cpsie	i
 8008e44:	61fb      	str	r3, [r7, #28]
}
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e4a:	f001 fd25 	bl	800a898 <xTaskGetSchedulerState>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d102      	bne.n	8008e5a <xQueueReceive+0x76>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <xQueueReceive+0x7a>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e000      	b.n	8008e60 <xQueueReceive+0x7c>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10c      	bne.n	8008e7e <xQueueReceive+0x9a>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	b672      	cpsid	i
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	b662      	cpsie	i
 8008e78:	61bb      	str	r3, [r7, #24]
}
 8008e7a:	bf00      	nop
 8008e7c:	e7fe      	b.n	8008e7c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e7e:	f002 fc15 	bl	800b6ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d01f      	beq.n	8008ece <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e8e:	68b9      	ldr	r1, [r7, #8]
 8008e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e92:	f000 fb0e 	bl	80094b2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	1e5a      	subs	r2, r3, #1
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00f      	beq.n	8008ec6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	3310      	adds	r3, #16
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f001 fa56 	bl	800a35c <xTaskRemoveFromEventList>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d007      	beq.n	8008ec6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008eb6:	4b3d      	ldr	r3, [pc, #244]	; (8008fac <xQueueReceive+0x1c8>)
 8008eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ec6:	f002 fc25 	bl	800b714 <vPortExitCritical>
				return pdPASS;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e069      	b.n	8008fa2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d103      	bne.n	8008edc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ed4:	f002 fc1e 	bl	800b714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e062      	b.n	8008fa2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d106      	bne.n	8008ef0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ee2:	f107 0310 	add.w	r3, r7, #16
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f001 fa9e 	bl	800a428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008eec:	2301      	movs	r3, #1
 8008eee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ef0:	f002 fc10 	bl	800b714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ef4:	f000 ff52 	bl	8009d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ef8:	f002 fbd8 	bl	800b6ac <vPortEnterCritical>
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f02:	b25b      	sxtb	r3, r3
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f08:	d103      	bne.n	8008f12 <xQueueReceive+0x12e>
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f18:	b25b      	sxtb	r3, r3
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1e:	d103      	bne.n	8008f28 <xQueueReceive+0x144>
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f28:	f002 fbf4 	bl	800b714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f2c:	1d3a      	adds	r2, r7, #4
 8008f2e:	f107 0310 	add.w	r3, r7, #16
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f001 fa8d 	bl	800a454 <xTaskCheckForTimeOut>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d123      	bne.n	8008f88 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f42:	f000 fb2e 	bl	80095a2 <prvIsQueueEmpty>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d017      	beq.n	8008f7c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	3324      	adds	r3, #36	; 0x24
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	4611      	mov	r1, r2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f001 f9ad 	bl	800a2b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f5c:	f000 facf 	bl	80094fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f60:	f000 ff2a 	bl	8009db8 <xTaskResumeAll>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d189      	bne.n	8008e7e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008f6a:	4b10      	ldr	r3, [pc, #64]	; (8008fac <xQueueReceive+0x1c8>)
 8008f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	e780      	b.n	8008e7e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f7e:	f000 fabe 	bl	80094fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f82:	f000 ff19 	bl	8009db8 <xTaskResumeAll>
 8008f86:	e77a      	b.n	8008e7e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f8a:	f000 fab8 	bl	80094fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f8e:	f000 ff13 	bl	8009db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f94:	f000 fb05 	bl	80095a2 <prvIsQueueEmpty>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f43f af6f 	beq.w	8008e7e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3730      	adds	r7, #48	; 0x30
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	e000ed04 	.word	0xe000ed04

08008fb0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08e      	sub	sp, #56	; 0x38
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10c      	bne.n	8008fe6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	b672      	cpsid	i
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	b662      	cpsie	i
 8008fe0:	623b      	str	r3, [r7, #32]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00c      	beq.n	8009008 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	b672      	cpsid	i
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	b662      	cpsie	i
 8009002:	61fb      	str	r3, [r7, #28]
}
 8009004:	bf00      	nop
 8009006:	e7fe      	b.n	8009006 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009008:	f001 fc46 	bl	800a898 <xTaskGetSchedulerState>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d102      	bne.n	8009018 <xQueueSemaphoreTake+0x68>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <xQueueSemaphoreTake+0x6c>
 8009018:	2301      	movs	r3, #1
 800901a:	e000      	b.n	800901e <xQueueSemaphoreTake+0x6e>
 800901c:	2300      	movs	r3, #0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10c      	bne.n	800903c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	b672      	cpsid	i
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	b662      	cpsie	i
 8009036:	61bb      	str	r3, [r7, #24]
}
 8009038:	bf00      	nop
 800903a:	e7fe      	b.n	800903a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800903c:	f002 fb36 	bl	800b6ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009044:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	2b00      	cmp	r3, #0
 800904a:	d024      	beq.n	8009096 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	1e5a      	subs	r2, r3, #1
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d104      	bne.n	8009066 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800905c:	f001 fe56 	bl	800ad0c <pvTaskIncrementMutexHeldCount>
 8009060:	4602      	mov	r2, r0
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00f      	beq.n	800908e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009070:	3310      	adds	r3, #16
 8009072:	4618      	mov	r0, r3
 8009074:	f001 f972 	bl	800a35c <xTaskRemoveFromEventList>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800907e:	4b55      	ldr	r3, [pc, #340]	; (80091d4 <xQueueSemaphoreTake+0x224>)
 8009080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800908e:	f002 fb41 	bl	800b714 <vPortExitCritical>
				return pdPASS;
 8009092:	2301      	movs	r3, #1
 8009094:	e099      	b.n	80091ca <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d113      	bne.n	80090c4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00c      	beq.n	80090bc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	b672      	cpsid	i
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	b662      	cpsie	i
 80090b6:	617b      	str	r3, [r7, #20]
}
 80090b8:	bf00      	nop
 80090ba:	e7fe      	b.n	80090ba <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80090bc:	f002 fb2a 	bl	800b714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090c0:	2300      	movs	r3, #0
 80090c2:	e082      	b.n	80091ca <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d106      	bne.n	80090d8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090ca:	f107 030c 	add.w	r3, r7, #12
 80090ce:	4618      	mov	r0, r3
 80090d0:	f001 f9aa 	bl	800a428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090d4:	2301      	movs	r3, #1
 80090d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090d8:	f002 fb1c 	bl	800b714 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090dc:	f000 fe5e 	bl	8009d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090e0:	f002 fae4 	bl	800b6ac <vPortEnterCritical>
 80090e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090ea:	b25b      	sxtb	r3, r3
 80090ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f0:	d103      	bne.n	80090fa <xQueueSemaphoreTake+0x14a>
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009100:	b25b      	sxtb	r3, r3
 8009102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009106:	d103      	bne.n	8009110 <xQueueSemaphoreTake+0x160>
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	2200      	movs	r2, #0
 800910c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009110:	f002 fb00 	bl	800b714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009114:	463a      	mov	r2, r7
 8009116:	f107 030c 	add.w	r3, r7, #12
 800911a:	4611      	mov	r1, r2
 800911c:	4618      	mov	r0, r3
 800911e:	f001 f999 	bl	800a454 <xTaskCheckForTimeOut>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d132      	bne.n	800918e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800912a:	f000 fa3a 	bl	80095a2 <prvIsQueueEmpty>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d026      	beq.n	8009182 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d109      	bne.n	8009150 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800913c:	f002 fab6 	bl	800b6ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	4618      	mov	r0, r3
 8009146:	f001 fbc5 	bl	800a8d4 <xTaskPriorityInherit>
 800914a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800914c:	f002 fae2 	bl	800b714 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	3324      	adds	r3, #36	; 0x24
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	4611      	mov	r1, r2
 8009158:	4618      	mov	r0, r3
 800915a:	f001 f8ab 	bl	800a2b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800915e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009160:	f000 f9cd 	bl	80094fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009164:	f000 fe28 	bl	8009db8 <xTaskResumeAll>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	f47f af66 	bne.w	800903c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8009170:	4b18      	ldr	r3, [pc, #96]	; (80091d4 <xQueueSemaphoreTake+0x224>)
 8009172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	e75c      	b.n	800903c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009182:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009184:	f000 f9bb 	bl	80094fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009188:	f000 fe16 	bl	8009db8 <xTaskResumeAll>
 800918c:	e756      	b.n	800903c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800918e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009190:	f000 f9b5 	bl	80094fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009194:	f000 fe10 	bl	8009db8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009198:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800919a:	f000 fa02 	bl	80095a2 <prvIsQueueEmpty>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f43f af4b 	beq.w	800903c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00d      	beq.n	80091c8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80091ac:	f002 fa7e 	bl	800b6ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80091b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091b2:	f000 f8fc 	bl	80093ae <prvGetDisinheritPriorityAfterTimeout>
 80091b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091be:	4618      	mov	r0, r3
 80091c0:	f001 fc62 	bl	800aa88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80091c4:	f002 faa6 	bl	800b714 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3738      	adds	r7, #56	; 0x38
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08e      	sub	sp, #56	; 0x38
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10c      	bne.n	8009208 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	b672      	cpsid	i
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	b662      	cpsie	i
 8009202:	623b      	str	r3, [r7, #32]
}
 8009204:	bf00      	nop
 8009206:	e7fe      	b.n	8009206 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d103      	bne.n	8009216 <xQueueReceiveFromISR+0x3e>
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <xQueueReceiveFromISR+0x42>
 8009216:	2301      	movs	r3, #1
 8009218:	e000      	b.n	800921c <xQueueReceiveFromISR+0x44>
 800921a:	2300      	movs	r3, #0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10c      	bne.n	800923a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	b672      	cpsid	i
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	b662      	cpsie	i
 8009234:	61fb      	str	r3, [r7, #28]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800923a:	f002 fb1f 	bl	800b87c <vPortValidateInterruptPriority>
	__asm volatile
 800923e:	f3ef 8211 	mrs	r2, BASEPRI
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	b672      	cpsid	i
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	b662      	cpsie	i
 8009256:	61ba      	str	r2, [r7, #24]
 8009258:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800925a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800925c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009262:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	2b00      	cmp	r3, #0
 8009268:	d02f      	beq.n	80092ca <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009274:	68b9      	ldr	r1, [r7, #8]
 8009276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009278:	f000 f91b 	bl	80094b2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927e:	1e5a      	subs	r2, r3, #1
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009284:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928c:	d112      	bne.n	80092b4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d016      	beq.n	80092c4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009298:	3310      	adds	r3, #16
 800929a:	4618      	mov	r0, r3
 800929c:	f001 f85e 	bl	800a35c <xTaskRemoveFromEventList>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00e      	beq.n	80092c4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	601a      	str	r2, [r3, #0]
 80092b2:	e007      	b.n	80092c4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80092b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092b8:	3301      	adds	r3, #1
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	b25a      	sxtb	r2, r3
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80092c4:	2301      	movs	r3, #1
 80092c6:	637b      	str	r3, [r7, #52]	; 0x34
 80092c8:	e001      	b.n	80092ce <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	637b      	str	r3, [r7, #52]	; 0x34
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f383 8811 	msr	BASEPRI, r3
}
 80092d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3738      	adds	r7, #56	; 0x38
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10c      	bne.n	800930c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	b672      	cpsid	i
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	b662      	cpsie	i
 8009306:	60bb      	str	r3, [r7, #8]
}
 8009308:	bf00      	nop
 800930a:	e7fe      	b.n	800930a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800930c:	f002 f9ce 	bl	800b6ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009316:	f002 f9fd 	bl	800b714 <vPortExitCritical>

	return uxReturn;
 800931a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009324:	b480      	push	{r7}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10c      	bne.n	8009350 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933a:	b672      	cpsid	i
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	b662      	cpsie	i
 800934a:	60fb      	str	r3, [r7, #12]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009354:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009356:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009358:	4618      	mov	r0, r3
 800935a:	371c      	adds	r7, #28
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10c      	bne.n	8009390 <vQueueDelete+0x2c>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	b672      	cpsid	i
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	b662      	cpsie	i
 800938a:	60bb      	str	r3, [r7, #8]
}
 800938c:	bf00      	nop
 800938e:	e7fe      	b.n	800938e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 f95f 	bl	8009654 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800939c:	2b00      	cmp	r3, #0
 800939e:	d102      	bne.n	80093a6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f002 fb79 	bl	800ba98 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80093ae:	b480      	push	{r7}
 80093b0:	b085      	sub	sp, #20
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d006      	beq.n	80093cc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	e001      	b.n	80093d0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80093d0:	68fb      	ldr	r3, [r7, #12]
	}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b086      	sub	sp, #24
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80093ea:	2300      	movs	r3, #0
 80093ec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10d      	bne.n	8009418 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d14d      	bne.n	80094a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	4618      	mov	r0, r3
 800940a:	f001 facb 	bl	800a9a4 <xTaskPriorityDisinherit>
 800940e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	609a      	str	r2, [r3, #8]
 8009416:	e043      	b.n	80094a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d119      	bne.n	8009452 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6858      	ldr	r0, [r3, #4]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	461a      	mov	r2, r3
 8009428:	68b9      	ldr	r1, [r7, #8]
 800942a:	f002 fd7e 	bl	800bf2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009436:	441a      	add	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	429a      	cmp	r2, r3
 8009446:	d32b      	bcc.n	80094a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	605a      	str	r2, [r3, #4]
 8009450:	e026      	b.n	80094a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	68d8      	ldr	r0, [r3, #12]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	461a      	mov	r2, r3
 800945c:	68b9      	ldr	r1, [r7, #8]
 800945e:	f002 fd64 	bl	800bf2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	68da      	ldr	r2, [r3, #12]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	425b      	negs	r3, r3
 800946c:	441a      	add	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	68da      	ldr	r2, [r3, #12]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	429a      	cmp	r2, r3
 800947c:	d207      	bcs.n	800948e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	689a      	ldr	r2, [r3, #8]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	425b      	negs	r3, r3
 8009488:	441a      	add	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b02      	cmp	r3, #2
 8009492:	d105      	bne.n	80094a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	3b01      	subs	r3, #1
 800949e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80094a8:	697b      	ldr	r3, [r7, #20]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d018      	beq.n	80094f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68da      	ldr	r2, [r3, #12]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094cc:	441a      	add	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d303      	bcc.n	80094e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68d9      	ldr	r1, [r3, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	461a      	mov	r2, r3
 80094f0:	6838      	ldr	r0, [r7, #0]
 80094f2:	f002 fd1a 	bl	800bf2a <memcpy>
	}
}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009506:	f002 f8d1 	bl	800b6ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009510:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009512:	e011      	b.n	8009538 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	2b00      	cmp	r3, #0
 800951a:	d012      	beq.n	8009542 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3324      	adds	r3, #36	; 0x24
 8009520:	4618      	mov	r0, r3
 8009522:	f000 ff1b 	bl	800a35c <xTaskRemoveFromEventList>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800952c:	f000 fff8 	bl	800a520 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	3b01      	subs	r3, #1
 8009534:	b2db      	uxtb	r3, r3
 8009536:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800953c:	2b00      	cmp	r3, #0
 800953e:	dce9      	bgt.n	8009514 <prvUnlockQueue+0x16>
 8009540:	e000      	b.n	8009544 <prvUnlockQueue+0x46>
					break;
 8009542:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	22ff      	movs	r2, #255	; 0xff
 8009548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800954c:	f002 f8e2 	bl	800b714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009550:	f002 f8ac 	bl	800b6ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800955a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800955c:	e011      	b.n	8009582 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d012      	beq.n	800958c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3310      	adds	r3, #16
 800956a:	4618      	mov	r0, r3
 800956c:	f000 fef6 	bl	800a35c <xTaskRemoveFromEventList>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009576:	f000 ffd3 	bl	800a520 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	3b01      	subs	r3, #1
 800957e:	b2db      	uxtb	r3, r3
 8009580:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009586:	2b00      	cmp	r3, #0
 8009588:	dce9      	bgt.n	800955e <prvUnlockQueue+0x60>
 800958a:	e000      	b.n	800958e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800958c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	22ff      	movs	r2, #255	; 0xff
 8009592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009596:	f002 f8bd 	bl	800b714 <vPortExitCritical>
}
 800959a:	bf00      	nop
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095aa:	f002 f87f 	bl	800b6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d102      	bne.n	80095bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095b6:	2301      	movs	r3, #1
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	e001      	b.n	80095c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095bc:	2300      	movs	r3, #0
 80095be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095c0:	f002 f8a8 	bl	800b714 <vPortExitCritical>

	return xReturn;
 80095c4:	68fb      	ldr	r3, [r7, #12]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095d6:	f002 f869 	bl	800b6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d102      	bne.n	80095ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80095e6:	2301      	movs	r3, #1
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	e001      	b.n	80095f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80095ec:	2300      	movs	r3, #0
 80095ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095f0:	f002 f890 	bl	800b714 <vPortExitCritical>

	return xReturn;
 80095f4:	68fb      	ldr	r3, [r7, #12]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800960a:	2300      	movs	r3, #0
 800960c:	60fb      	str	r3, [r7, #12]
 800960e:	e014      	b.n	800963a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009610:	4a0f      	ldr	r2, [pc, #60]	; (8009650 <vQueueAddToRegistry+0x50>)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10b      	bne.n	8009634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800961c:	490c      	ldr	r1, [pc, #48]	; (8009650 <vQueueAddToRegistry+0x50>)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009626:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <vQueueAddToRegistry+0x50>)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	4413      	add	r3, r2
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009632:	e006      	b.n	8009642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3301      	adds	r3, #1
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b07      	cmp	r3, #7
 800963e:	d9e7      	bls.n	8009610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009640:	bf00      	nop
 8009642:	bf00      	nop
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	200012e8 	.word	0x200012e8

08009654 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800965c:	2300      	movs	r3, #0
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	e016      	b.n	8009690 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009662:	4a10      	ldr	r2, [pc, #64]	; (80096a4 <vQueueUnregisterQueue+0x50>)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	4413      	add	r3, r2
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	429a      	cmp	r2, r3
 8009670:	d10b      	bne.n	800968a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009672:	4a0c      	ldr	r2, [pc, #48]	; (80096a4 <vQueueUnregisterQueue+0x50>)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2100      	movs	r1, #0
 8009678:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800967c:	4a09      	ldr	r2, [pc, #36]	; (80096a4 <vQueueUnregisterQueue+0x50>)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	4413      	add	r3, r2
 8009684:	2200      	movs	r2, #0
 8009686:	605a      	str	r2, [r3, #4]
				break;
 8009688:	e006      	b.n	8009698 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3301      	adds	r3, #1
 800968e:	60fb      	str	r3, [r7, #12]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b07      	cmp	r3, #7
 8009694:	d9e5      	bls.n	8009662 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009696:	bf00      	nop
 8009698:	bf00      	nop
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	200012e8 	.word	0x200012e8

080096a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096b8:	f001 fff8 	bl	800b6ac <vPortEnterCritical>
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096c2:	b25b      	sxtb	r3, r3
 80096c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c8:	d103      	bne.n	80096d2 <vQueueWaitForMessageRestricted+0x2a>
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096d8:	b25b      	sxtb	r3, r3
 80096da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096de:	d103      	bne.n	80096e8 <vQueueWaitForMessageRestricted+0x40>
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096e8:	f002 f814 	bl	800b714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d106      	bne.n	8009702 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	3324      	adds	r3, #36	; 0x24
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	68b9      	ldr	r1, [r7, #8]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 fdff 	bl	800a300 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009702:	6978      	ldr	r0, [r7, #20]
 8009704:	f7ff fefb 	bl	80094fe <prvUnlockQueue>
	}
 8009708:	bf00      	nop
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009710:	b580      	push	{r7, lr}
 8009712:	b08e      	sub	sp, #56	; 0x38
 8009714:	af04      	add	r7, sp, #16
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800971e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10c      	bne.n	800973e <xTaskCreateStatic+0x2e>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	b672      	cpsid	i
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	b662      	cpsie	i
 8009738:	623b      	str	r3, [r7, #32]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800973e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10c      	bne.n	800975e <xTaskCreateStatic+0x4e>
	__asm volatile
 8009744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009748:	b672      	cpsid	i
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	b662      	cpsie	i
 8009758:	61fb      	str	r3, [r7, #28]
}
 800975a:	bf00      	nop
 800975c:	e7fe      	b.n	800975c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800975e:	23bc      	movs	r3, #188	; 0xbc
 8009760:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2bbc      	cmp	r3, #188	; 0xbc
 8009766:	d00c      	beq.n	8009782 <xTaskCreateStatic+0x72>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	b672      	cpsid	i
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	b662      	cpsie	i
 800977c:	61bb      	str	r3, [r7, #24]
}
 800977e:	bf00      	nop
 8009780:	e7fe      	b.n	8009780 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009782:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	2b00      	cmp	r3, #0
 8009788:	d01e      	beq.n	80097c8 <xTaskCreateStatic+0xb8>
 800978a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978c:	2b00      	cmp	r3, #0
 800978e:	d01b      	beq.n	80097c8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009798:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	2202      	movs	r2, #2
 800979e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097a2:	2300      	movs	r3, #0
 80097a4:	9303      	str	r3, [sp, #12]
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	9302      	str	r3, [sp, #8]
 80097aa:	f107 0314 	add.w	r3, r7, #20
 80097ae:	9301      	str	r3, [sp, #4]
 80097b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	68b9      	ldr	r1, [r7, #8]
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f000 f850 	bl	8009860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097c2:	f000 f8f5 	bl	80099b0 <prvAddNewTaskToReadyList>
 80097c6:	e001      	b.n	80097cc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80097c8:	2300      	movs	r3, #0
 80097ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097cc:	697b      	ldr	r3, [r7, #20]
	}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3728      	adds	r7, #40	; 0x28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b08c      	sub	sp, #48	; 0x30
 80097da:	af04      	add	r7, sp, #16
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	603b      	str	r3, [r7, #0]
 80097e2:	4613      	mov	r3, r2
 80097e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097e6:	88fb      	ldrh	r3, [r7, #6]
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f002 f88a 	bl	800b904 <pvPortMalloc>
 80097f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00e      	beq.n	8009816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80097f8:	20bc      	movs	r0, #188	; 0xbc
 80097fa:	f002 f883 	bl	800b904 <pvPortMalloc>
 80097fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	631a      	str	r2, [r3, #48]	; 0x30
 800980c:	e005      	b.n	800981a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800980e:	6978      	ldr	r0, [r7, #20]
 8009810:	f002 f942 	bl	800ba98 <vPortFree>
 8009814:	e001      	b.n	800981a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009816:	2300      	movs	r3, #0
 8009818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d017      	beq.n	8009850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	2300      	movs	r3, #0
 800982c:	9303      	str	r3, [sp, #12]
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	9302      	str	r3, [sp, #8]
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	9301      	str	r3, [sp, #4]
 8009836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	68b9      	ldr	r1, [r7, #8]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f80e 	bl	8009860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009844:	69f8      	ldr	r0, [r7, #28]
 8009846:	f000 f8b3 	bl	80099b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800984a:	2301      	movs	r3, #1
 800984c:	61bb      	str	r3, [r7, #24]
 800984e:	e002      	b.n	8009856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009850:	f04f 33ff 	mov.w	r3, #4294967295
 8009854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009856:	69bb      	ldr	r3, [r7, #24]
	}
 8009858:	4618      	mov	r0, r3
 800985a:	3720      	adds	r7, #32
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	461a      	mov	r2, r3
 8009878:	21a5      	movs	r1, #165	; 0xa5
 800987a:	f002 fb64 	bl	800bf46 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800987e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009882:	6879      	ldr	r1, [r7, #4]
 8009884:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009888:	440b      	add	r3, r1
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	f023 0307 	bic.w	r3, r3, #7
 8009896:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	f003 0307 	and.w	r3, r3, #7
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00c      	beq.n	80098bc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	b672      	cpsid	i
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	b662      	cpsie	i
 80098b6:	617b      	str	r3, [r7, #20]
}
 80098b8:	bf00      	nop
 80098ba:	e7fe      	b.n	80098ba <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d01f      	beq.n	8009902 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098c2:	2300      	movs	r3, #0
 80098c4:	61fb      	str	r3, [r7, #28]
 80098c6:	e012      	b.n	80098ee <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098c8:	68ba      	ldr	r2, [r7, #8]
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	4413      	add	r3, r2
 80098ce:	7819      	ldrb	r1, [r3, #0]
 80098d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	4413      	add	r3, r2
 80098d6:	3334      	adds	r3, #52	; 0x34
 80098d8:	460a      	mov	r2, r1
 80098da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	4413      	add	r3, r2
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d006      	beq.n	80098f6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	3301      	adds	r3, #1
 80098ec:	61fb      	str	r3, [r7, #28]
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	2b0f      	cmp	r3, #15
 80098f2:	d9e9      	bls.n	80098c8 <prvInitialiseNewTask+0x68>
 80098f4:	e000      	b.n	80098f8 <prvInitialiseNewTask+0x98>
			{
				break;
 80098f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009900:	e003      	b.n	800990a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	2b37      	cmp	r3, #55	; 0x37
 800990e:	d901      	bls.n	8009914 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009910:	2337      	movs	r3, #55	; 0x37
 8009912:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009918:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800991e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	2200      	movs	r2, #0
 8009924:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	3304      	adds	r3, #4
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fe06 	bl	800853c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009932:	3318      	adds	r3, #24
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe fe01 	bl	800853c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800993a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800993e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800994e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	2200      	movs	r2, #0
 8009954:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995a:	2200      	movs	r2, #0
 800995c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	3354      	adds	r3, #84	; 0x54
 8009964:	2260      	movs	r2, #96	; 0x60
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f002 faec 	bl	800bf46 <memset>
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	4a0c      	ldr	r2, [pc, #48]	; (80099a4 <prvInitialiseNewTask+0x144>)
 8009972:	659a      	str	r2, [r3, #88]	; 0x58
 8009974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009976:	4a0c      	ldr	r2, [pc, #48]	; (80099a8 <prvInitialiseNewTask+0x148>)
 8009978:	65da      	str	r2, [r3, #92]	; 0x5c
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	4a0b      	ldr	r2, [pc, #44]	; (80099ac <prvInitialiseNewTask+0x14c>)
 800997e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	68f9      	ldr	r1, [r7, #12]
 8009984:	69b8      	ldr	r0, [r7, #24]
 8009986:	f001 fd85 	bl	800b494 <pxPortInitialiseStack>
 800998a:	4602      	mov	r2, r0
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009992:	2b00      	cmp	r3, #0
 8009994:	d002      	beq.n	800999c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800999a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800999c:	bf00      	nop
 800999e:	3720      	adds	r7, #32
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	0800f170 	.word	0x0800f170
 80099a8:	0800f190 	.word	0x0800f190
 80099ac:	0800f150 	.word	0x0800f150

080099b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099b8:	f001 fe78 	bl	800b6ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099bc:	4b2d      	ldr	r3, [pc, #180]	; (8009a74 <prvAddNewTaskToReadyList+0xc4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	4a2c      	ldr	r2, [pc, #176]	; (8009a74 <prvAddNewTaskToReadyList+0xc4>)
 80099c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099c6:	4b2c      	ldr	r3, [pc, #176]	; (8009a78 <prvAddNewTaskToReadyList+0xc8>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099ce:	4a2a      	ldr	r2, [pc, #168]	; (8009a78 <prvAddNewTaskToReadyList+0xc8>)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099d4:	4b27      	ldr	r3, [pc, #156]	; (8009a74 <prvAddNewTaskToReadyList+0xc4>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d110      	bne.n	80099fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099dc:	f000 fdc4 	bl	800a568 <prvInitialiseTaskLists>
 80099e0:	e00d      	b.n	80099fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099e2:	4b26      	ldr	r3, [pc, #152]	; (8009a7c <prvAddNewTaskToReadyList+0xcc>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d109      	bne.n	80099fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099ea:	4b23      	ldr	r3, [pc, #140]	; (8009a78 <prvAddNewTaskToReadyList+0xc8>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d802      	bhi.n	80099fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099f8:	4a1f      	ldr	r2, [pc, #124]	; (8009a78 <prvAddNewTaskToReadyList+0xc8>)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099fe:	4b20      	ldr	r3, [pc, #128]	; (8009a80 <prvAddNewTaskToReadyList+0xd0>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3301      	adds	r3, #1
 8009a04:	4a1e      	ldr	r2, [pc, #120]	; (8009a80 <prvAddNewTaskToReadyList+0xd0>)
 8009a06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a08:	4b1d      	ldr	r3, [pc, #116]	; (8009a80 <prvAddNewTaskToReadyList+0xd0>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a14:	4b1b      	ldr	r3, [pc, #108]	; (8009a84 <prvAddNewTaskToReadyList+0xd4>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d903      	bls.n	8009a24 <prvAddNewTaskToReadyList+0x74>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a20:	4a18      	ldr	r2, [pc, #96]	; (8009a84 <prvAddNewTaskToReadyList+0xd4>)
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a28:	4613      	mov	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4a15      	ldr	r2, [pc, #84]	; (8009a88 <prvAddNewTaskToReadyList+0xd8>)
 8009a32:	441a      	add	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	3304      	adds	r3, #4
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	f7fe fd8b 	bl	8008556 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a40:	f001 fe68 	bl	800b714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a44:	4b0d      	ldr	r3, [pc, #52]	; (8009a7c <prvAddNewTaskToReadyList+0xcc>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00e      	beq.n	8009a6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	; (8009a78 <prvAddNewTaskToReadyList+0xc8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d207      	bcs.n	8009a6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <prvAddNewTaskToReadyList+0xdc>)
 8009a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a6a:	bf00      	nop
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	200017fc 	.word	0x200017fc
 8009a78:	20001328 	.word	0x20001328
 8009a7c:	20001808 	.word	0x20001808
 8009a80:	20001818 	.word	0x20001818
 8009a84:	20001804 	.word	0x20001804
 8009a88:	2000132c 	.word	0x2000132c
 8009a8c:	e000ed04 	.word	0xe000ed04

08009a90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009a98:	f001 fe08 	bl	800b6ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d102      	bne.n	8009aa8 <vTaskDelete+0x18>
 8009aa2:	4b2d      	ldr	r3, [pc, #180]	; (8009b58 <vTaskDelete+0xc8>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	e000      	b.n	8009aaa <vTaskDelete+0x1a>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe fdad 	bl	8008610 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d004      	beq.n	8009ac8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3318      	adds	r3, #24
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe fda4 	bl	8008610 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009ac8:	4b24      	ldr	r3, [pc, #144]	; (8009b5c <vTaskDelete+0xcc>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3301      	adds	r3, #1
 8009ace:	4a23      	ldr	r2, [pc, #140]	; (8009b5c <vTaskDelete+0xcc>)
 8009ad0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009ad2:	4b21      	ldr	r3, [pc, #132]	; (8009b58 <vTaskDelete+0xc8>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d10b      	bne.n	8009af4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	481f      	ldr	r0, [pc, #124]	; (8009b60 <vTaskDelete+0xd0>)
 8009ae4:	f7fe fd37 	bl	8008556 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009ae8:	4b1e      	ldr	r3, [pc, #120]	; (8009b64 <vTaskDelete+0xd4>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3301      	adds	r3, #1
 8009aee:	4a1d      	ldr	r2, [pc, #116]	; (8009b64 <vTaskDelete+0xd4>)
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	e009      	b.n	8009b08 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009af4:	4b1c      	ldr	r3, [pc, #112]	; (8009b68 <vTaskDelete+0xd8>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3b01      	subs	r3, #1
 8009afa:	4a1b      	ldr	r2, [pc, #108]	; (8009b68 <vTaskDelete+0xd8>)
 8009afc:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f000 fe74 	bl	800a7ec <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009b04:	f000 fea8 	bl	800a858 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8009b08:	f001 fe04 	bl	800b714 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009b0c:	4b17      	ldr	r3, [pc, #92]	; (8009b6c <vTaskDelete+0xdc>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d01d      	beq.n	8009b50 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8009b14:	4b10      	ldr	r3, [pc, #64]	; (8009b58 <vTaskDelete+0xc8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d118      	bne.n	8009b50 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009b1e:	4b14      	ldr	r3, [pc, #80]	; (8009b70 <vTaskDelete+0xe0>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00c      	beq.n	8009b40 <vTaskDelete+0xb0>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2a:	b672      	cpsid	i
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	b662      	cpsie	i
 8009b3a:	60bb      	str	r3, [r7, #8]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8009b40:	4b0c      	ldr	r3, [pc, #48]	; (8009b74 <vTaskDelete+0xe4>)
 8009b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b50:	bf00      	nop
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	20001328 	.word	0x20001328
 8009b5c:	20001818 	.word	0x20001818
 8009b60:	200017d0 	.word	0x200017d0
 8009b64:	200017e4 	.word	0x200017e4
 8009b68:	200017fc 	.word	0x200017fc
 8009b6c:	20001808 	.word	0x20001808
 8009b70:	20001824 	.word	0x20001824
 8009b74:	e000ed04 	.word	0xe000ed04

08009b78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b80:	2300      	movs	r3, #0
 8009b82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d019      	beq.n	8009bbe <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b8a:	4b14      	ldr	r3, [pc, #80]	; (8009bdc <vTaskDelay+0x64>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00c      	beq.n	8009bac <vTaskDelay+0x34>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	b672      	cpsid	i
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	b662      	cpsie	i
 8009ba6:	60bb      	str	r3, [r7, #8]
}
 8009ba8:	bf00      	nop
 8009baa:	e7fe      	b.n	8009baa <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009bac:	f000 f8f6 	bl	8009d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f001 f8be 	bl	800ad34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009bb8:	f000 f8fe 	bl	8009db8 <xTaskResumeAll>
 8009bbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d107      	bne.n	8009bd4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009bc4:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <vTaskDelay+0x68>)
 8009bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bd4:	bf00      	nop
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	20001824 	.word	0x20001824
 8009be0:	e000ed04 	.word	0xe000ed04

08009be4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10c      	bne.n	8009c10 <eTaskGetState+0x2c>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	b672      	cpsid	i
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	b662      	cpsie	i
 8009c0a:	60bb      	str	r3, [r7, #8]
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 8009c10:	4b23      	ldr	r3, [pc, #140]	; (8009ca0 <eTaskGetState+0xbc>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d102      	bne.n	8009c20 <eTaskGetState+0x3c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	77fb      	strb	r3, [r7, #31]
 8009c1e:	e03a      	b.n	8009c96 <eTaskGetState+0xb2>
		}
		else
		{
			taskENTER_CRITICAL();
 8009c20:	f001 fd44 	bl	800b6ac <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8009c2a:	4b1e      	ldr	r3, [pc, #120]	; (8009ca4 <eTaskGetState+0xc0>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009c30:	4b1d      	ldr	r3, [pc, #116]	; (8009ca8 <eTaskGetState+0xc4>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009c36:	f001 fd6d 	bl	800b714 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d003      	beq.n	8009c4a <eTaskGetState+0x66>
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d102      	bne.n	8009c50 <eTaskGetState+0x6c>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	77fb      	strb	r3, [r7, #31]
 8009c4e:	e022      	b.n	8009c96 <eTaskGetState+0xb2>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	4a16      	ldr	r2, [pc, #88]	; (8009cac <eTaskGetState+0xc8>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d112      	bne.n	8009c7e <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10b      	bne.n	8009c78 <eTaskGetState+0x94>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d102      	bne.n	8009c72 <eTaskGetState+0x8e>
							{
								eReturn = eBlocked;
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	77fb      	strb	r3, [r7, #31]
 8009c70:	e011      	b.n	8009c96 <eTaskGetState+0xb2>
							}
							else
							{
								eReturn = eSuspended;
 8009c72:	2303      	movs	r3, #3
 8009c74:	77fb      	strb	r3, [r7, #31]
 8009c76:	e00e      	b.n	8009c96 <eTaskGetState+0xb2>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009c78:	2302      	movs	r3, #2
 8009c7a:	77fb      	strb	r3, [r7, #31]
 8009c7c:	e00b      	b.n	8009c96 <eTaskGetState+0xb2>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	4a0b      	ldr	r2, [pc, #44]	; (8009cb0 <eTaskGetState+0xcc>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d002      	beq.n	8009c8c <eTaskGetState+0xa8>
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d102      	bne.n	8009c92 <eTaskGetState+0xae>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009c8c:	2304      	movs	r3, #4
 8009c8e:	77fb      	strb	r3, [r7, #31]
 8009c90:	e001      	b.n	8009c96 <eTaskGetState+0xb2>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009c92:	2301      	movs	r3, #1
 8009c94:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009c96:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3720      	adds	r7, #32
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	20001328 	.word	0x20001328
 8009ca4:	200017b4 	.word	0x200017b4
 8009ca8:	200017b8 	.word	0x200017b8
 8009cac:	200017e8 	.word	0x200017e8
 8009cb0:	200017d0 	.word	0x200017d0

08009cb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08a      	sub	sp, #40	; 0x28
 8009cb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009cc2:	463a      	mov	r2, r7
 8009cc4:	1d39      	adds	r1, r7, #4
 8009cc6:	f107 0308 	add.w	r3, r7, #8
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fe fbe2 	bl	8008494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	9202      	str	r2, [sp, #8]
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	460a      	mov	r2, r1
 8009ce2:	4926      	ldr	r1, [pc, #152]	; (8009d7c <vTaskStartScheduler+0xc8>)
 8009ce4:	4826      	ldr	r0, [pc, #152]	; (8009d80 <vTaskStartScheduler+0xcc>)
 8009ce6:	f7ff fd13 	bl	8009710 <xTaskCreateStatic>
 8009cea:	4603      	mov	r3, r0
 8009cec:	4a25      	ldr	r2, [pc, #148]	; (8009d84 <vTaskStartScheduler+0xd0>)
 8009cee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009cf0:	4b24      	ldr	r3, [pc, #144]	; (8009d84 <vTaskStartScheduler+0xd0>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	e001      	b.n	8009d02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d102      	bne.n	8009d0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d08:	f001 f868 	bl	800addc <xTimerCreateTimerTask>
 8009d0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d11d      	bne.n	8009d50 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	b672      	cpsid	i
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	b662      	cpsie	i
 8009d28:	613b      	str	r3, [r7, #16]
}
 8009d2a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d2c:	4b16      	ldr	r3, [pc, #88]	; (8009d88 <vTaskStartScheduler+0xd4>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3354      	adds	r3, #84	; 0x54
 8009d32:	4a16      	ldr	r2, [pc, #88]	; (8009d8c <vTaskStartScheduler+0xd8>)
 8009d34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d36:	4b16      	ldr	r3, [pc, #88]	; (8009d90 <vTaskStartScheduler+0xdc>)
 8009d38:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d3e:	4b15      	ldr	r3, [pc, #84]	; (8009d94 <vTaskStartScheduler+0xe0>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009d44:	4b14      	ldr	r3, [pc, #80]	; (8009d98 <vTaskStartScheduler+0xe4>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d4a:	f001 fc31 	bl	800b5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d4e:	e010      	b.n	8009d72 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d56:	d10c      	bne.n	8009d72 <vTaskStartScheduler+0xbe>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	b672      	cpsid	i
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	b662      	cpsie	i
 8009d6c:	60fb      	str	r3, [r7, #12]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <vTaskStartScheduler+0xbc>
}
 8009d72:	bf00      	nop
 8009d74:	3718      	adds	r7, #24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	0800e270 	.word	0x0800e270
 8009d80:	0800a539 	.word	0x0800a539
 8009d84:	20001820 	.word	0x20001820
 8009d88:	20001328 	.word	0x20001328
 8009d8c:	200000a4 	.word	0x200000a4
 8009d90:	2000181c 	.word	0x2000181c
 8009d94:	20001808 	.word	0x20001808
 8009d98:	20001800 	.word	0x20001800

08009d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009da0:	4b04      	ldr	r3, [pc, #16]	; (8009db4 <vTaskSuspendAll+0x18>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3301      	adds	r3, #1
 8009da6:	4a03      	ldr	r2, [pc, #12]	; (8009db4 <vTaskSuspendAll+0x18>)
 8009da8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009daa:	bf00      	nop
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr
 8009db4:	20001824 	.word	0x20001824

08009db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009dc6:	4b43      	ldr	r3, [pc, #268]	; (8009ed4 <xTaskResumeAll+0x11c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10c      	bne.n	8009de8 <xTaskResumeAll+0x30>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	b672      	cpsid	i
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	b662      	cpsie	i
 8009de2:	603b      	str	r3, [r7, #0]
}
 8009de4:	bf00      	nop
 8009de6:	e7fe      	b.n	8009de6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009de8:	f001 fc60 	bl	800b6ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009dec:	4b39      	ldr	r3, [pc, #228]	; (8009ed4 <xTaskResumeAll+0x11c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	4a38      	ldr	r2, [pc, #224]	; (8009ed4 <xTaskResumeAll+0x11c>)
 8009df4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009df6:	4b37      	ldr	r3, [pc, #220]	; (8009ed4 <xTaskResumeAll+0x11c>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d162      	bne.n	8009ec4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009dfe:	4b36      	ldr	r3, [pc, #216]	; (8009ed8 <xTaskResumeAll+0x120>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d05e      	beq.n	8009ec4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e06:	e02f      	b.n	8009e68 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e08:	4b34      	ldr	r3, [pc, #208]	; (8009edc <xTaskResumeAll+0x124>)
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	3318      	adds	r3, #24
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fe fbfb 	bl	8008610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fbf6 	bl	8008610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e28:	4b2d      	ldr	r3, [pc, #180]	; (8009ee0 <xTaskResumeAll+0x128>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d903      	bls.n	8009e38 <xTaskResumeAll+0x80>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	4a2a      	ldr	r2, [pc, #168]	; (8009ee0 <xTaskResumeAll+0x128>)
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4a27      	ldr	r2, [pc, #156]	; (8009ee4 <xTaskResumeAll+0x12c>)
 8009e46:	441a      	add	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f7fe fb81 	bl	8008556 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e58:	4b23      	ldr	r3, [pc, #140]	; (8009ee8 <xTaskResumeAll+0x130>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d302      	bcc.n	8009e68 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009e62:	4b22      	ldr	r3, [pc, #136]	; (8009eec <xTaskResumeAll+0x134>)
 8009e64:	2201      	movs	r2, #1
 8009e66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e68:	4b1c      	ldr	r3, [pc, #112]	; (8009edc <xTaskResumeAll+0x124>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1cb      	bne.n	8009e08 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e76:	f000 fcef 	bl	800a858 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009e7a:	4b1d      	ldr	r3, [pc, #116]	; (8009ef0 <xTaskResumeAll+0x138>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d010      	beq.n	8009ea8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e86:	f000 f8f3 	bl	800a070 <xTaskIncrementTick>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009e90:	4b16      	ldr	r3, [pc, #88]	; (8009eec <xTaskResumeAll+0x134>)
 8009e92:	2201      	movs	r2, #1
 8009e94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1f1      	bne.n	8009e86 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009ea2:	4b13      	ldr	r3, [pc, #76]	; (8009ef0 <xTaskResumeAll+0x138>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ea8:	4b10      	ldr	r3, [pc, #64]	; (8009eec <xTaskResumeAll+0x134>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d009      	beq.n	8009ec4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009eb4:	4b0f      	ldr	r3, [pc, #60]	; (8009ef4 <xTaskResumeAll+0x13c>)
 8009eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ec4:	f001 fc26 	bl	800b714 <vPortExitCritical>

	return xAlreadyYielded;
 8009ec8:	68bb      	ldr	r3, [r7, #8]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20001824 	.word	0x20001824
 8009ed8:	200017fc 	.word	0x200017fc
 8009edc:	200017bc 	.word	0x200017bc
 8009ee0:	20001804 	.word	0x20001804
 8009ee4:	2000132c 	.word	0x2000132c
 8009ee8:	20001328 	.word	0x20001328
 8009eec:	20001810 	.word	0x20001810
 8009ef0:	2000180c 	.word	0x2000180c
 8009ef4:	e000ed04 	.word	0xe000ed04

08009ef8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009efe:	4b05      	ldr	r3, [pc, #20]	; (8009f14 <xTaskGetTickCount+0x1c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f04:	687b      	ldr	r3, [r7, #4]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20001800 	.word	0x20001800

08009f18 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f1e:	f001 fcad 	bl	800b87c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009f22:	2300      	movs	r3, #0
 8009f24:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009f26:	4b04      	ldr	r3, [pc, #16]	; (8009f38 <xTaskGetTickCountFromISR+0x20>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f2c:	683b      	ldr	r3, [r7, #0]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	20001800 	.word	0x20001800

08009f3c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8009f40:	4b03      	ldr	r3, [pc, #12]	; (8009f50 <uxTaskGetNumberOfTasks+0x14>)
 8009f42:	681b      	ldr	r3, [r3, #0]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	200017fc 	.word	0x200017fc

08009f54 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	2338      	movs	r3, #56	; 0x38
 8009f66:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8009f68:	f7ff ff18 	bl	8009d9c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8009f6c:	4b3a      	ldr	r3, [pc, #232]	; (800a058 <uxTaskGetSystemState+0x104>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d368      	bcc.n	800a048 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	00db      	lsls	r3, r3, #3
 8009f82:	4413      	add	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	461a      	mov	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	1898      	adds	r0, r3, r2
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4a31      	ldr	r2, [pc, #196]	; (800a05c <uxTaskGetSystemState+0x108>)
 8009f98:	4413      	add	r3, r2
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	f000 fbb7 	bl	800a710 <prvListTasksWithinSingleList>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e2      	bne.n	8009f76 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	00db      	lsls	r3, r3, #3
 8009fb6:	4413      	add	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	461a      	mov	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	4a27      	ldr	r2, [pc, #156]	; (800a060 <uxTaskGetSystemState+0x10c>)
 8009fc2:	6811      	ldr	r1, [r2, #0]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fba2 	bl	800a710 <prvListTasksWithinSingleList>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	00db      	lsls	r3, r3, #3
 8009fda:	4413      	add	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	461a      	mov	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	4a1f      	ldr	r2, [pc, #124]	; (800a064 <uxTaskGetSystemState+0x110>)
 8009fe6:	6811      	ldr	r1, [r2, #0]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 fb90 	bl	800a710 <prvListTasksWithinSingleList>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	4413      	add	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	461a      	mov	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4413      	add	r3, r2
 800a008:	2204      	movs	r2, #4
 800a00a:	4917      	ldr	r1, [pc, #92]	; (800a068 <uxTaskGetSystemState+0x114>)
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 fb7f 	bl	800a710 <prvListTasksWithinSingleList>
 800a012:	4602      	mov	r2, r0
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	4413      	add	r3, r2
 800a018:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800a01a:	697a      	ldr	r2, [r7, #20]
 800a01c:	4613      	mov	r3, r2
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	4413      	add	r3, r2
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	461a      	mov	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	4413      	add	r3, r2
 800a02a:	2203      	movs	r2, #3
 800a02c:	490f      	ldr	r1, [pc, #60]	; (800a06c <uxTaskGetSystemState+0x118>)
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fb6e 	bl	800a710 <prvListTasksWithinSingleList>
 800a034:	4602      	mov	r2, r0
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	4413      	add	r3, r2
 800a03a:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800a048:	f7ff feb6 	bl	8009db8 <xTaskResumeAll>

		return uxTask;
 800a04c:	697b      	ldr	r3, [r7, #20]
	}
 800a04e:	4618      	mov	r0, r3
 800a050:	3718      	adds	r7, #24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	200017fc 	.word	0x200017fc
 800a05c:	2000132c 	.word	0x2000132c
 800a060:	200017b4 	.word	0x200017b4
 800a064:	200017b8 	.word	0x200017b8
 800a068:	200017d0 	.word	0x200017d0
 800a06c:	200017e8 	.word	0x200017e8

0800a070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a07a:	4b50      	ldr	r3, [pc, #320]	; (800a1bc <xTaskIncrementTick+0x14c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f040 808b 	bne.w	800a19a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a084:	4b4e      	ldr	r3, [pc, #312]	; (800a1c0 <xTaskIncrementTick+0x150>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3301      	adds	r3, #1
 800a08a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a08c:	4a4c      	ldr	r2, [pc, #304]	; (800a1c0 <xTaskIncrementTick+0x150>)
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d122      	bne.n	800a0de <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a098:	4b4a      	ldr	r3, [pc, #296]	; (800a1c4 <xTaskIncrementTick+0x154>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00c      	beq.n	800a0bc <xTaskIncrementTick+0x4c>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	b672      	cpsid	i
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	b662      	cpsie	i
 800a0b6:	603b      	str	r3, [r7, #0]
}
 800a0b8:	bf00      	nop
 800a0ba:	e7fe      	b.n	800a0ba <xTaskIncrementTick+0x4a>
 800a0bc:	4b41      	ldr	r3, [pc, #260]	; (800a1c4 <xTaskIncrementTick+0x154>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	60fb      	str	r3, [r7, #12]
 800a0c2:	4b41      	ldr	r3, [pc, #260]	; (800a1c8 <xTaskIncrementTick+0x158>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a3f      	ldr	r2, [pc, #252]	; (800a1c4 <xTaskIncrementTick+0x154>)
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	4a3f      	ldr	r2, [pc, #252]	; (800a1c8 <xTaskIncrementTick+0x158>)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	4b3e      	ldr	r3, [pc, #248]	; (800a1cc <xTaskIncrementTick+0x15c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	4a3d      	ldr	r2, [pc, #244]	; (800a1cc <xTaskIncrementTick+0x15c>)
 800a0d8:	6013      	str	r3, [r2, #0]
 800a0da:	f000 fbbd 	bl	800a858 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a0de:	4b3c      	ldr	r3, [pc, #240]	; (800a1d0 <xTaskIncrementTick+0x160>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d349      	bcc.n	800a17c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0e8:	4b36      	ldr	r3, [pc, #216]	; (800a1c4 <xTaskIncrementTick+0x154>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d104      	bne.n	800a0fc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0f2:	4b37      	ldr	r3, [pc, #220]	; (800a1d0 <xTaskIncrementTick+0x160>)
 800a0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f8:	601a      	str	r2, [r3, #0]
					break;
 800a0fa:	e03f      	b.n	800a17c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0fc:	4b31      	ldr	r3, [pc, #196]	; (800a1c4 <xTaskIncrementTick+0x154>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	429a      	cmp	r2, r3
 800a112:	d203      	bcs.n	800a11c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a114:	4a2e      	ldr	r2, [pc, #184]	; (800a1d0 <xTaskIncrementTick+0x160>)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a11a:	e02f      	b.n	800a17c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	3304      	adds	r3, #4
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe fa75 	bl	8008610 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d004      	beq.n	800a138 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	3318      	adds	r3, #24
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe fa6c 	bl	8008610 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13c:	4b25      	ldr	r3, [pc, #148]	; (800a1d4 <xTaskIncrementTick+0x164>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d903      	bls.n	800a14c <xTaskIncrementTick+0xdc>
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	4a22      	ldr	r2, [pc, #136]	; (800a1d4 <xTaskIncrementTick+0x164>)
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4a1f      	ldr	r2, [pc, #124]	; (800a1d8 <xTaskIncrementTick+0x168>)
 800a15a:	441a      	add	r2, r3
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	3304      	adds	r3, #4
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f7fe f9f7 	bl	8008556 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16c:	4b1b      	ldr	r3, [pc, #108]	; (800a1dc <xTaskIncrementTick+0x16c>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a172:	429a      	cmp	r2, r3
 800a174:	d3b8      	bcc.n	800a0e8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a176:	2301      	movs	r3, #1
 800a178:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a17a:	e7b5      	b.n	800a0e8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a17c:	4b17      	ldr	r3, [pc, #92]	; (800a1dc <xTaskIncrementTick+0x16c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a182:	4915      	ldr	r1, [pc, #84]	; (800a1d8 <xTaskIncrementTick+0x168>)
 800a184:	4613      	mov	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	440b      	add	r3, r1
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d907      	bls.n	800a1a4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a194:	2301      	movs	r3, #1
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	e004      	b.n	800a1a4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a19a:	4b11      	ldr	r3, [pc, #68]	; (800a1e0 <xTaskIncrementTick+0x170>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	4a0f      	ldr	r2, [pc, #60]	; (800a1e0 <xTaskIncrementTick+0x170>)
 800a1a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a1a4:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <xTaskIncrementTick+0x174>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a1b0:	697b      	ldr	r3, [r7, #20]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20001824 	.word	0x20001824
 800a1c0:	20001800 	.word	0x20001800
 800a1c4:	200017b4 	.word	0x200017b4
 800a1c8:	200017b8 	.word	0x200017b8
 800a1cc:	20001814 	.word	0x20001814
 800a1d0:	2000181c 	.word	0x2000181c
 800a1d4:	20001804 	.word	0x20001804
 800a1d8:	2000132c 	.word	0x2000132c
 800a1dc:	20001328 	.word	0x20001328
 800a1e0:	2000180c 	.word	0x2000180c
 800a1e4:	20001810 	.word	0x20001810

0800a1e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a1ee:	4b2b      	ldr	r3, [pc, #172]	; (800a29c <vTaskSwitchContext+0xb4>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d003      	beq.n	800a1fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a1f6:	4b2a      	ldr	r3, [pc, #168]	; (800a2a0 <vTaskSwitchContext+0xb8>)
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a1fc:	e048      	b.n	800a290 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a1fe:	4b28      	ldr	r3, [pc, #160]	; (800a2a0 <vTaskSwitchContext+0xb8>)
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a204:	4b27      	ldr	r3, [pc, #156]	; (800a2a4 <vTaskSwitchContext+0xbc>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	60fb      	str	r3, [r7, #12]
 800a20a:	e012      	b.n	800a232 <vTaskSwitchContext+0x4a>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10c      	bne.n	800a22c <vTaskSwitchContext+0x44>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	b672      	cpsid	i
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	b662      	cpsie	i
 800a226:	607b      	str	r3, [r7, #4]
}
 800a228:	bf00      	nop
 800a22a:	e7fe      	b.n	800a22a <vTaskSwitchContext+0x42>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3b01      	subs	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	491d      	ldr	r1, [pc, #116]	; (800a2a8 <vTaskSwitchContext+0xc0>)
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	4613      	mov	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	440b      	add	r3, r1
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0e2      	beq.n	800a20c <vTaskSwitchContext+0x24>
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	4613      	mov	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4a15      	ldr	r2, [pc, #84]	; (800a2a8 <vTaskSwitchContext+0xc0>)
 800a252:	4413      	add	r3, r2
 800a254:	60bb      	str	r3, [r7, #8]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	605a      	str	r2, [r3, #4]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	3308      	adds	r3, #8
 800a268:	429a      	cmp	r2, r3
 800a26a:	d104      	bne.n	800a276 <vTaskSwitchContext+0x8e>
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	605a      	str	r2, [r3, #4]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	4a0b      	ldr	r2, [pc, #44]	; (800a2ac <vTaskSwitchContext+0xc4>)
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	4a08      	ldr	r2, [pc, #32]	; (800a2a4 <vTaskSwitchContext+0xbc>)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a286:	4b09      	ldr	r3, [pc, #36]	; (800a2ac <vTaskSwitchContext+0xc4>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3354      	adds	r3, #84	; 0x54
 800a28c:	4a08      	ldr	r2, [pc, #32]	; (800a2b0 <vTaskSwitchContext+0xc8>)
 800a28e:	6013      	str	r3, [r2, #0]
}
 800a290:	bf00      	nop
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	20001824 	.word	0x20001824
 800a2a0:	20001810 	.word	0x20001810
 800a2a4:	20001804 	.word	0x20001804
 800a2a8:	2000132c 	.word	0x2000132c
 800a2ac:	20001328 	.word	0x20001328
 800a2b0:	200000a4 	.word	0x200000a4

0800a2b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10c      	bne.n	800a2de <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	b672      	cpsid	i
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	b662      	cpsie	i
 800a2d8:	60fb      	str	r3, [r7, #12]
}
 800a2da:	bf00      	nop
 800a2dc:	e7fe      	b.n	800a2dc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2de:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <vTaskPlaceOnEventList+0x48>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3318      	adds	r3, #24
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7fe f959 	bl	800859e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	6838      	ldr	r0, [r7, #0]
 800a2f0:	f000 fd20 	bl	800ad34 <prvAddCurrentTaskToDelayedList>
}
 800a2f4:	bf00      	nop
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	20001328 	.word	0x20001328

0800a300 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10c      	bne.n	800a32c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	b672      	cpsid	i
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	b662      	cpsie	i
 800a326:	617b      	str	r3, [r7, #20]
}
 800a328:	bf00      	nop
 800a32a:	e7fe      	b.n	800a32a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a32c:	4b0a      	ldr	r3, [pc, #40]	; (800a358 <vTaskPlaceOnEventListRestricted+0x58>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3318      	adds	r3, #24
 800a332:	4619      	mov	r1, r3
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f7fe f90e 	bl	8008556 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a340:	f04f 33ff 	mov.w	r3, #4294967295
 800a344:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	68b8      	ldr	r0, [r7, #8]
 800a34a:	f000 fcf3 	bl	800ad34 <prvAddCurrentTaskToDelayedList>
	}
 800a34e:	bf00      	nop
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20001328 	.word	0x20001328

0800a35c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10c      	bne.n	800a38c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	b672      	cpsid	i
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	b662      	cpsie	i
 800a386:	60fb      	str	r3, [r7, #12]
}
 800a388:	bf00      	nop
 800a38a:	e7fe      	b.n	800a38a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	3318      	adds	r3, #24
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe f93d 	bl	8008610 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a396:	4b1e      	ldr	r3, [pc, #120]	; (800a410 <xTaskRemoveFromEventList+0xb4>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d11d      	bne.n	800a3da <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe f934 	bl	8008610 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ac:	4b19      	ldr	r3, [pc, #100]	; (800a414 <xTaskRemoveFromEventList+0xb8>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d903      	bls.n	800a3bc <xTaskRemoveFromEventList+0x60>
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b8:	4a16      	ldr	r2, [pc, #88]	; (800a414 <xTaskRemoveFromEventList+0xb8>)
 800a3ba:	6013      	str	r3, [r2, #0]
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4a13      	ldr	r2, [pc, #76]	; (800a418 <xTaskRemoveFromEventList+0xbc>)
 800a3ca:	441a      	add	r2, r3
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	f7fe f8bf 	bl	8008556 <vListInsertEnd>
 800a3d8:	e005      	b.n	800a3e6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	3318      	adds	r3, #24
 800a3de:	4619      	mov	r1, r3
 800a3e0:	480e      	ldr	r0, [pc, #56]	; (800a41c <xTaskRemoveFromEventList+0xc0>)
 800a3e2:	f7fe f8b8 	bl	8008556 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ea:	4b0d      	ldr	r3, [pc, #52]	; (800a420 <xTaskRemoveFromEventList+0xc4>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d905      	bls.n	800a400 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a3f8:	4b0a      	ldr	r3, [pc, #40]	; (800a424 <xTaskRemoveFromEventList+0xc8>)
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	e001      	b.n	800a404 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a400:	2300      	movs	r3, #0
 800a402:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a404:	697b      	ldr	r3, [r7, #20]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20001824 	.word	0x20001824
 800a414:	20001804 	.word	0x20001804
 800a418:	2000132c 	.word	0x2000132c
 800a41c:	200017bc 	.word	0x200017bc
 800a420:	20001328 	.word	0x20001328
 800a424:	20001810 	.word	0x20001810

0800a428 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a430:	4b06      	ldr	r3, [pc, #24]	; (800a44c <vTaskInternalSetTimeOutState+0x24>)
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <vTaskInternalSetTimeOutState+0x28>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	605a      	str	r2, [r3, #4]
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	20001814 	.word	0x20001814
 800a450:	20001800 	.word	0x20001800

0800a454 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b088      	sub	sp, #32
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10c      	bne.n	800a47e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	b672      	cpsid	i
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	b662      	cpsie	i
 800a478:	613b      	str	r3, [r7, #16]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10c      	bne.n	800a49e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	b672      	cpsid	i
 800a48a:	f383 8811 	msr	BASEPRI, r3
 800a48e:	f3bf 8f6f 	isb	sy
 800a492:	f3bf 8f4f 	dsb	sy
 800a496:	b662      	cpsie	i
 800a498:	60fb      	str	r3, [r7, #12]
}
 800a49a:	bf00      	nop
 800a49c:	e7fe      	b.n	800a49c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a49e:	f001 f905 	bl	800b6ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a4a2:	4b1d      	ldr	r3, [pc, #116]	; (800a518 <xTaskCheckForTimeOut+0xc4>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	69ba      	ldr	r2, [r7, #24]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ba:	d102      	bne.n	800a4c2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	61fb      	str	r3, [r7, #28]
 800a4c0:	e023      	b.n	800a50a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	4b15      	ldr	r3, [pc, #84]	; (800a51c <xTaskCheckForTimeOut+0xc8>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d007      	beq.n	800a4de <xTaskCheckForTimeOut+0x8a>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	69ba      	ldr	r2, [r7, #24]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d302      	bcc.n	800a4de <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	61fb      	str	r3, [r7, #28]
 800a4dc:	e015      	b.n	800a50a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d20b      	bcs.n	800a500 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	1ad2      	subs	r2, r2, r3
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7ff ff97 	bl	800a428 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	61fb      	str	r3, [r7, #28]
 800a4fe:	e004      	b.n	800a50a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2200      	movs	r2, #0
 800a504:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a506:	2301      	movs	r3, #1
 800a508:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a50a:	f001 f903 	bl	800b714 <vPortExitCritical>

	return xReturn;
 800a50e:	69fb      	ldr	r3, [r7, #28]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3720      	adds	r7, #32
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	20001800 	.word	0x20001800
 800a51c:	20001814 	.word	0x20001814

0800a520 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a520:	b480      	push	{r7}
 800a522:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a524:	4b03      	ldr	r3, [pc, #12]	; (800a534 <vTaskMissedYield+0x14>)
 800a526:	2201      	movs	r2, #1
 800a528:	601a      	str	r2, [r3, #0]
}
 800a52a:	bf00      	nop
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	20001810 	.word	0x20001810

0800a538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a540:	f000 f852 	bl	800a5e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a544:	4b06      	ldr	r3, [pc, #24]	; (800a560 <prvIdleTask+0x28>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d9f9      	bls.n	800a540 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a54c:	4b05      	ldr	r3, [pc, #20]	; (800a564 <prvIdleTask+0x2c>)
 800a54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a55c:	e7f0      	b.n	800a540 <prvIdleTask+0x8>
 800a55e:	bf00      	nop
 800a560:	2000132c 	.word	0x2000132c
 800a564:	e000ed04 	.word	0xe000ed04

0800a568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a56e:	2300      	movs	r3, #0
 800a570:	607b      	str	r3, [r7, #4]
 800a572:	e00c      	b.n	800a58e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4a12      	ldr	r2, [pc, #72]	; (800a5c8 <prvInitialiseTaskLists+0x60>)
 800a580:	4413      	add	r3, r2
 800a582:	4618      	mov	r0, r3
 800a584:	f7fd ffba 	bl	80084fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3301      	adds	r3, #1
 800a58c:	607b      	str	r3, [r7, #4]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b37      	cmp	r3, #55	; 0x37
 800a592:	d9ef      	bls.n	800a574 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a594:	480d      	ldr	r0, [pc, #52]	; (800a5cc <prvInitialiseTaskLists+0x64>)
 800a596:	f7fd ffb1 	bl	80084fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a59a:	480d      	ldr	r0, [pc, #52]	; (800a5d0 <prvInitialiseTaskLists+0x68>)
 800a59c:	f7fd ffae 	bl	80084fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a5a0:	480c      	ldr	r0, [pc, #48]	; (800a5d4 <prvInitialiseTaskLists+0x6c>)
 800a5a2:	f7fd ffab 	bl	80084fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a5a6:	480c      	ldr	r0, [pc, #48]	; (800a5d8 <prvInitialiseTaskLists+0x70>)
 800a5a8:	f7fd ffa8 	bl	80084fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a5ac:	480b      	ldr	r0, [pc, #44]	; (800a5dc <prvInitialiseTaskLists+0x74>)
 800a5ae:	f7fd ffa5 	bl	80084fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5b2:	4b0b      	ldr	r3, [pc, #44]	; (800a5e0 <prvInitialiseTaskLists+0x78>)
 800a5b4:	4a05      	ldr	r2, [pc, #20]	; (800a5cc <prvInitialiseTaskLists+0x64>)
 800a5b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <prvInitialiseTaskLists+0x7c>)
 800a5ba:	4a05      	ldr	r2, [pc, #20]	; (800a5d0 <prvInitialiseTaskLists+0x68>)
 800a5bc:	601a      	str	r2, [r3, #0]
}
 800a5be:	bf00      	nop
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	2000132c 	.word	0x2000132c
 800a5cc:	2000178c 	.word	0x2000178c
 800a5d0:	200017a0 	.word	0x200017a0
 800a5d4:	200017bc 	.word	0x200017bc
 800a5d8:	200017d0 	.word	0x200017d0
 800a5dc:	200017e8 	.word	0x200017e8
 800a5e0:	200017b4 	.word	0x200017b4
 800a5e4:	200017b8 	.word	0x200017b8

0800a5e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5ee:	e019      	b.n	800a624 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a5f0:	f001 f85c 	bl	800b6ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5f4:	4b10      	ldr	r3, [pc, #64]	; (800a638 <prvCheckTasksWaitingTermination+0x50>)
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	3304      	adds	r3, #4
 800a600:	4618      	mov	r0, r3
 800a602:	f7fe f805 	bl	8008610 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a606:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <prvCheckTasksWaitingTermination+0x54>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	4a0b      	ldr	r2, [pc, #44]	; (800a63c <prvCheckTasksWaitingTermination+0x54>)
 800a60e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a610:	4b0b      	ldr	r3, [pc, #44]	; (800a640 <prvCheckTasksWaitingTermination+0x58>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3b01      	subs	r3, #1
 800a616:	4a0a      	ldr	r2, [pc, #40]	; (800a640 <prvCheckTasksWaitingTermination+0x58>)
 800a618:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a61a:	f001 f87b 	bl	800b714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f8e4 	bl	800a7ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a624:	4b06      	ldr	r3, [pc, #24]	; (800a640 <prvCheckTasksWaitingTermination+0x58>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1e1      	bne.n	800a5f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	200017d0 	.word	0x200017d0
 800a63c:	200017fc 	.word	0x200017fc
 800a640:	200017e4 	.word	0x200017e4

0800a644 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
 800a650:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d102      	bne.n	800a65e <vTaskGetInfo+0x1a>
 800a658:	4b2c      	ldr	r3, [pc, #176]	; (800a70c <vTaskGetInfo+0xc8>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	e000      	b.n	800a660 <vTaskGetInfo+0x1c>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	697a      	ldr	r2, [r7, #20]
 800a666:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	2200      	movs	r2, #0
 800a696:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800a698:	78fb      	ldrb	r3, [r7, #3]
 800a69a:	2b05      	cmp	r3, #5
 800a69c:	d01a      	beq.n	800a6d4 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800a69e:	4b1b      	ldr	r3, [pc, #108]	; (800a70c <vTaskGetInfo+0xc8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d103      	bne.n	800a6b0 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	731a      	strb	r2, [r3, #12]
 800a6ae:	e018      	b.n	800a6e2 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	78fa      	ldrb	r2, [r7, #3]
 800a6b4:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800a6b6:	78fb      	ldrb	r3, [r7, #3]
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d112      	bne.n	800a6e2 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800a6bc:	f7ff fb6e 	bl	8009d9c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d002      	beq.n	800a6ce <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800a6ce:	f7ff fb73 	bl	8009db8 <xTaskResumeAll>
 800a6d2:	e006      	b.n	800a6e2 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800a6d4:	6978      	ldr	r0, [r7, #20]
 800a6d6:	f7ff fa85 	bl	8009be4 <eTaskGetState>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	461a      	mov	r2, r3
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d009      	beq.n	800a6fc <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 f861 	bl	800a7b4 <prvTaskCheckFreeStackSpace>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800a6fa:	e002      	b.n	800a702 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2200      	movs	r2, #0
 800a700:	841a      	strh	r2, [r3, #32]
	}
 800a702:	bf00      	nop
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	20001328 	.word	0x20001328

0800a710 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08a      	sub	sp, #40	; 0x28
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	4613      	mov	r3, r2
 800a71c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d03f      	beq.n	800a7aa <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	623b      	str	r3, [r7, #32]
 800a72e:	6a3b      	ldr	r3, [r7, #32]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	685a      	ldr	r2, [r3, #4]
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	605a      	str	r2, [r3, #4]
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	3308      	adds	r3, #8
 800a740:	429a      	cmp	r2, r3
 800a742:	d104      	bne.n	800a74e <prvListTasksWithinSingleList+0x3e>
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	685a      	ldr	r2, [r3, #4]
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	605a      	str	r2, [r3, #4]
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	61bb      	str	r3, [r7, #24]
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	605a      	str	r2, [r3, #4]
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	685a      	ldr	r2, [r3, #4]
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	3308      	adds	r3, #8
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d104      	bne.n	800a77a <prvListTasksWithinSingleList+0x6a>
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	605a      	str	r2, [r3, #4]
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800a782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a784:	4613      	mov	r3, r2
 800a786:	00db      	lsls	r3, r3, #3
 800a788:	4413      	add	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	461a      	mov	r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	1899      	adds	r1, r3, r2
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	2201      	movs	r2, #1
 800a796:	6978      	ldr	r0, [r7, #20]
 800a798:	f7ff ff54 	bl	800a644 <vTaskGetInfo>
				uxTask++;
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	3301      	adds	r3, #1
 800a7a0:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d1d5      	bne.n	800a756 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3728      	adds	r7, #40	; 0x28
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a7c0:	e005      	b.n	800a7ce <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	2ba5      	cmp	r3, #165	; 0xa5
 800a7d4:	d0f5      	beq.n	800a7c2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	089b      	lsrs	r3, r3, #2
 800a7da:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	b29b      	uxth	r3, r3
	}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3354      	adds	r3, #84	; 0x54
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f001 fd49 	bl	800c290 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a804:	2b00      	cmp	r3, #0
 800a806:	d108      	bne.n	800a81a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80c:	4618      	mov	r0, r3
 800a80e:	f001 f943 	bl	800ba98 <vPortFree>
				vPortFree( pxTCB );
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f001 f940 	bl	800ba98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a818:	e01a      	b.n	800a850 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a820:	2b01      	cmp	r3, #1
 800a822:	d103      	bne.n	800a82c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 f937 	bl	800ba98 <vPortFree>
	}
 800a82a:	e011      	b.n	800a850 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a832:	2b02      	cmp	r3, #2
 800a834:	d00c      	beq.n	800a850 <prvDeleteTCB+0x64>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	b672      	cpsid	i
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	b662      	cpsie	i
 800a84a:	60fb      	str	r3, [r7, #12]
}
 800a84c:	bf00      	nop
 800a84e:	e7fe      	b.n	800a84e <prvDeleteTCB+0x62>
	}
 800a850:	bf00      	nop
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a85e:	4b0c      	ldr	r3, [pc, #48]	; (800a890 <prvResetNextTaskUnblockTime+0x38>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d104      	bne.n	800a872 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a868:	4b0a      	ldr	r3, [pc, #40]	; (800a894 <prvResetNextTaskUnblockTime+0x3c>)
 800a86a:	f04f 32ff 	mov.w	r2, #4294967295
 800a86e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a870:	e008      	b.n	800a884 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a872:	4b07      	ldr	r3, [pc, #28]	; (800a890 <prvResetNextTaskUnblockTime+0x38>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	4a04      	ldr	r2, [pc, #16]	; (800a894 <prvResetNextTaskUnblockTime+0x3c>)
 800a882:	6013      	str	r3, [r2, #0]
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	200017b4 	.word	0x200017b4
 800a894:	2000181c 	.word	0x2000181c

0800a898 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a89e:	4b0b      	ldr	r3, [pc, #44]	; (800a8cc <xTaskGetSchedulerState+0x34>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d102      	bne.n	800a8ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	607b      	str	r3, [r7, #4]
 800a8aa:	e008      	b.n	800a8be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ac:	4b08      	ldr	r3, [pc, #32]	; (800a8d0 <xTaskGetSchedulerState+0x38>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d102      	bne.n	800a8ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	607b      	str	r3, [r7, #4]
 800a8b8:	e001      	b.n	800a8be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a8be:	687b      	ldr	r3, [r7, #4]
	}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	20001808 	.word	0x20001808
 800a8d0:	20001824 	.word	0x20001824

0800a8d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d051      	beq.n	800a98e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ee:	4b2a      	ldr	r3, [pc, #168]	; (800a998 <xTaskPriorityInherit+0xc4>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d241      	bcs.n	800a97c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	db06      	blt.n	800a90e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a900:	4b25      	ldr	r3, [pc, #148]	; (800a998 <xTaskPriorityInherit+0xc4>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a906:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	6959      	ldr	r1, [r3, #20]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4a1f      	ldr	r2, [pc, #124]	; (800a99c <xTaskPriorityInherit+0xc8>)
 800a920:	4413      	add	r3, r2
 800a922:	4299      	cmp	r1, r3
 800a924:	d122      	bne.n	800a96c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	3304      	adds	r3, #4
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fd fe70 	bl	8008610 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a930:	4b19      	ldr	r3, [pc, #100]	; (800a998 <xTaskPriorityInherit+0xc4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93e:	4b18      	ldr	r3, [pc, #96]	; (800a9a0 <xTaskPriorityInherit+0xcc>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	429a      	cmp	r2, r3
 800a944:	d903      	bls.n	800a94e <xTaskPriorityInherit+0x7a>
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94a:	4a15      	ldr	r2, [pc, #84]	; (800a9a0 <xTaskPriorityInherit+0xcc>)
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a952:	4613      	mov	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4413      	add	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4a10      	ldr	r2, [pc, #64]	; (800a99c <xTaskPriorityInherit+0xc8>)
 800a95c:	441a      	add	r2, r3
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	3304      	adds	r3, #4
 800a962:	4619      	mov	r1, r3
 800a964:	4610      	mov	r0, r2
 800a966:	f7fd fdf6 	bl	8008556 <vListInsertEnd>
 800a96a:	e004      	b.n	800a976 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a96c:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <xTaskPriorityInherit+0xc4>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a976:	2301      	movs	r3, #1
 800a978:	60fb      	str	r3, [r7, #12]
 800a97a:	e008      	b.n	800a98e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a980:	4b05      	ldr	r3, [pc, #20]	; (800a998 <xTaskPriorityInherit+0xc4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	429a      	cmp	r2, r3
 800a988:	d201      	bcs.n	800a98e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a98a:	2301      	movs	r3, #1
 800a98c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a98e:	68fb      	ldr	r3, [r7, #12]
	}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	20001328 	.word	0x20001328
 800a99c:	2000132c 	.word	0x2000132c
 800a9a0:	20001804 	.word	0x20001804

0800a9a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d05a      	beq.n	800aa70 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9ba:	4b30      	ldr	r3, [pc, #192]	; (800aa7c <xTaskPriorityDisinherit+0xd8>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d00c      	beq.n	800a9de <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c8:	b672      	cpsid	i
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	b662      	cpsie	i
 800a9d8:	60fb      	str	r3, [r7, #12]
}
 800a9da:	bf00      	nop
 800a9dc:	e7fe      	b.n	800a9dc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10c      	bne.n	800aa00 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ea:	b672      	cpsid	i
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	b662      	cpsie	i
 800a9fa:	60bb      	str	r3, [r7, #8]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa04:	1e5a      	subs	r2, r3, #1
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d02c      	beq.n	800aa70 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d128      	bne.n	800aa70 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3304      	adds	r3, #4
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fd fdf4 	bl	8008610 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa40:	4b0f      	ldr	r3, [pc, #60]	; (800aa80 <xTaskPriorityDisinherit+0xdc>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d903      	bls.n	800aa50 <xTaskPriorityDisinherit+0xac>
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	4a0c      	ldr	r2, [pc, #48]	; (800aa80 <xTaskPriorityDisinherit+0xdc>)
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4a09      	ldr	r2, [pc, #36]	; (800aa84 <xTaskPriorityDisinherit+0xe0>)
 800aa5e:	441a      	add	r2, r3
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	3304      	adds	r3, #4
 800aa64:	4619      	mov	r1, r3
 800aa66:	4610      	mov	r0, r2
 800aa68:	f7fd fd75 	bl	8008556 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa70:	697b      	ldr	r3, [r7, #20]
	}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3718      	adds	r7, #24
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20001328 	.word	0x20001328
 800aa80:	20001804 	.word	0x20001804
 800aa84:	2000132c 	.word	0x2000132c

0800aa88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b088      	sub	sp, #32
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa96:	2301      	movs	r3, #1
 800aa98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d06e      	beq.n	800ab7e <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10c      	bne.n	800aac2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaac:	b672      	cpsid	i
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	b662      	cpsie	i
 800aabc:	60fb      	str	r3, [r7, #12]
}
 800aabe:	bf00      	nop
 800aac0:	e7fe      	b.n	800aac0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d902      	bls.n	800aad2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	61fb      	str	r3, [r7, #28]
 800aad0:	e002      	b.n	800aad8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aad6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aadc:	69fa      	ldr	r2, [r7, #28]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d04d      	beq.n	800ab7e <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d148      	bne.n	800ab7e <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aaec:	4b26      	ldr	r3, [pc, #152]	; (800ab88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d10c      	bne.n	800ab10 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafa:	b672      	cpsid	i
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	b662      	cpsie	i
 800ab0a:	60bb      	str	r3, [r7, #8]
}
 800ab0c:	bf00      	nop
 800ab0e:	e7fe      	b.n	800ab0e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	69fa      	ldr	r2, [r7, #28]
 800ab1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	db04      	blt.n	800ab2e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	6959      	ldr	r1, [r3, #20]
 800ab32:	693a      	ldr	r2, [r7, #16]
 800ab34:	4613      	mov	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4a13      	ldr	r2, [pc, #76]	; (800ab8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ab3e:	4413      	add	r3, r2
 800ab40:	4299      	cmp	r1, r3
 800ab42:	d11c      	bne.n	800ab7e <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	3304      	adds	r3, #4
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fd fd61 	bl	8008610 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab52:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d903      	bls.n	800ab62 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5e:	4a0c      	ldr	r2, [pc, #48]	; (800ab90 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ab60:	6013      	str	r3, [r2, #0]
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab66:	4613      	mov	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	4a07      	ldr	r2, [pc, #28]	; (800ab8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ab70:	441a      	add	r2, r3
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	3304      	adds	r3, #4
 800ab76:	4619      	mov	r1, r3
 800ab78:	4610      	mov	r0, r2
 800ab7a:	f7fd fcec 	bl	8008556 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab7e:	bf00      	nop
 800ab80:	3720      	adds	r7, #32
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20001328 	.word	0x20001328
 800ab8c:	2000132c 	.word	0x2000132c
 800ab90:	20001804 	.word	0x20001804

0800ab94 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f001 fcc1 	bl	800c528 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f7f7 f95a 	bl	8001e60 <strlen>
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	e007      	b.n	800abc0 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	4413      	add	r3, r2
 800abb6:	2220      	movs	r2, #32
 800abb8:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3301      	adds	r3, #1
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2b0e      	cmp	r3, #14
 800abc4:	d9f4      	bls.n	800abb0 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4413      	add	r3, r2
 800abcc:	2200      	movs	r2, #0
 800abce:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	4413      	add	r3, r2
	}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
	...

0800abe0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800abe0:	b590      	push	{r4, r7, lr}
 800abe2:	b089      	sub	sp, #36	; 0x24
 800abe4:	af02      	add	r7, sp, #8
 800abe6:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800abee:	4b45      	ldr	r3, [pc, #276]	; (800ad04 <vTaskList+0x124>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800abf4:	4b43      	ldr	r3, [pc, #268]	; (800ad04 <vTaskList+0x124>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	4613      	mov	r3, r2
 800abfa:	00db      	lsls	r3, r3, #3
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 fe7f 	bl	800b904 <pvPortMalloc>
 800ac06:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d076      	beq.n	800acfc <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ac0e:	2200      	movs	r2, #0
 800ac10:	68f9      	ldr	r1, [r7, #12]
 800ac12:	68b8      	ldr	r0, [r7, #8]
 800ac14:	f7ff f99e 	bl	8009f54 <uxTaskGetSystemState>
 800ac18:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	617b      	str	r3, [r7, #20]
 800ac1e:	e066      	b.n	800acee <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	4613      	mov	r3, r2
 800ac24:	00db      	lsls	r3, r3, #3
 800ac26:	4413      	add	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	4413      	add	r3, r2
 800ac30:	7b1b      	ldrb	r3, [r3, #12]
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	d81b      	bhi.n	800ac6e <vTaskList+0x8e>
 800ac36:	a201      	add	r2, pc, #4	; (adr r2, 800ac3c <vTaskList+0x5c>)
 800ac38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3c:	0800ac51 	.word	0x0800ac51
 800ac40:	0800ac57 	.word	0x0800ac57
 800ac44:	0800ac5d 	.word	0x0800ac5d
 800ac48:	0800ac63 	.word	0x0800ac63
 800ac4c:	0800ac69 	.word	0x0800ac69
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800ac50:	2358      	movs	r3, #88	; 0x58
 800ac52:	74fb      	strb	r3, [r7, #19]
										break;
 800ac54:	e00e      	b.n	800ac74 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800ac56:	2352      	movs	r3, #82	; 0x52
 800ac58:	74fb      	strb	r3, [r7, #19]
										break;
 800ac5a:	e00b      	b.n	800ac74 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ac5c:	2342      	movs	r3, #66	; 0x42
 800ac5e:	74fb      	strb	r3, [r7, #19]
										break;
 800ac60:	e008      	b.n	800ac74 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ac62:	2353      	movs	r3, #83	; 0x53
 800ac64:	74fb      	strb	r3, [r7, #19]
										break;
 800ac66:	e005      	b.n	800ac74 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ac68:	2344      	movs	r3, #68	; 0x44
 800ac6a:	74fb      	strb	r3, [r7, #19]
										break;
 800ac6c:	e002      	b.n	800ac74 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	74fb      	strb	r3, [r7, #19]
										break;
 800ac72:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	4613      	mov	r3, r2
 800ac78:	00db      	lsls	r3, r3, #3
 800ac7a:	4413      	add	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	461a      	mov	r2, r3
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	4413      	add	r3, r2
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff ff83 	bl	800ab94 <prvWriteNameToBuffer>
 800ac8e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ac90:	7cf9      	ldrb	r1, [r7, #19]
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	4613      	mov	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	4413      	add	r3, r2
 800aca2:	6918      	ldr	r0, [r3, #16]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	4613      	mov	r3, r2
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	4413      	add	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	461a      	mov	r2, r3
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	4413      	add	r3, r2
 800acb4:	8c1b      	ldrh	r3, [r3, #32]
 800acb6:	461c      	mov	r4, r3
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	4613      	mov	r3, r2
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	4413      	add	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	461a      	mov	r2, r3
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	4413      	add	r3, r2
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	9301      	str	r3, [sp, #4]
 800accc:	9400      	str	r4, [sp, #0]
 800acce:	4603      	mov	r3, r0
 800acd0:	460a      	mov	r2, r1
 800acd2:	490d      	ldr	r1, [pc, #52]	; (800ad08 <vTaskList+0x128>)
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f001 fb7b 	bl	800c3d0 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7f7 f8c0 	bl	8001e60 <strlen>
 800ace0:	4602      	mov	r2, r0
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4413      	add	r3, r2
 800ace6:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	3301      	adds	r3, #1
 800acec:	617b      	str	r3, [r7, #20]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d394      	bcc.n	800ac20 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800acf6:	68b8      	ldr	r0, [r7, #8]
 800acf8:	f000 fece 	bl	800ba98 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acfc:	bf00      	nop
 800acfe:	371c      	adds	r7, #28
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd90      	pop	{r4, r7, pc}
 800ad04:	200017fc 	.word	0x200017fc
 800ad08:	0800e278 	.word	0x0800e278

0800ad0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ad0c:	b480      	push	{r7}
 800ad0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad10:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d004      	beq.n	800ad22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ad18:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad1e:	3201      	adds	r2, #1
 800ad20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ad22:	4b03      	ldr	r3, [pc, #12]	; (800ad30 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad24:	681b      	ldr	r3, [r3, #0]
	}
 800ad26:	4618      	mov	r0, r3
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	20001328 	.word	0x20001328

0800ad34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad3e:	4b21      	ldr	r3, [pc, #132]	; (800adc4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad44:	4b20      	ldr	r3, [pc, #128]	; (800adc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	3304      	adds	r3, #4
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fd fc60 	bl	8008610 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad56:	d10a      	bne.n	800ad6e <prvAddCurrentTaskToDelayedList+0x3a>
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d007      	beq.n	800ad6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad5e:	4b1a      	ldr	r3, [pc, #104]	; (800adc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3304      	adds	r3, #4
 800ad64:	4619      	mov	r1, r3
 800ad66:	4819      	ldr	r0, [pc, #100]	; (800adcc <prvAddCurrentTaskToDelayedList+0x98>)
 800ad68:	f7fd fbf5 	bl	8008556 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad6c:	e026      	b.n	800adbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4413      	add	r3, r2
 800ad74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad76:	4b14      	ldr	r3, [pc, #80]	; (800adc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d209      	bcs.n	800ad9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad86:	4b12      	ldr	r3, [pc, #72]	; (800add0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	4b0f      	ldr	r3, [pc, #60]	; (800adc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	4619      	mov	r1, r3
 800ad92:	4610      	mov	r0, r2
 800ad94:	f7fd fc03 	bl	800859e <vListInsert>
}
 800ad98:	e010      	b.n	800adbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad9a:	4b0e      	ldr	r3, [pc, #56]	; (800add4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	4b0a      	ldr	r3, [pc, #40]	; (800adc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3304      	adds	r3, #4
 800ada4:	4619      	mov	r1, r3
 800ada6:	4610      	mov	r0, r2
 800ada8:	f7fd fbf9 	bl	800859e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adac:	4b0a      	ldr	r3, [pc, #40]	; (800add8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d202      	bcs.n	800adbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adb6:	4a08      	ldr	r2, [pc, #32]	; (800add8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	6013      	str	r3, [r2, #0]
}
 800adbc:	bf00      	nop
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	20001800 	.word	0x20001800
 800adc8:	20001328 	.word	0x20001328
 800adcc:	200017e8 	.word	0x200017e8
 800add0:	200017b8 	.word	0x200017b8
 800add4:	200017b4 	.word	0x200017b4
 800add8:	2000181c 	.word	0x2000181c

0800addc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08a      	sub	sp, #40	; 0x28
 800ade0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ade2:	2300      	movs	r3, #0
 800ade4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ade6:	f000 fb15 	bl	800b414 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adea:	4b1d      	ldr	r3, [pc, #116]	; (800ae60 <xTimerCreateTimerTask+0x84>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d021      	beq.n	800ae36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800adf2:	2300      	movs	r3, #0
 800adf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800adf6:	2300      	movs	r3, #0
 800adf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800adfa:	1d3a      	adds	r2, r7, #4
 800adfc:	f107 0108 	add.w	r1, r7, #8
 800ae00:	f107 030c 	add.w	r3, r7, #12
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fd fb5f 	bl	80084c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae0a:	6879      	ldr	r1, [r7, #4]
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	9202      	str	r2, [sp, #8]
 800ae12:	9301      	str	r3, [sp, #4]
 800ae14:	2302      	movs	r3, #2
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	2300      	movs	r3, #0
 800ae1a:	460a      	mov	r2, r1
 800ae1c:	4911      	ldr	r1, [pc, #68]	; (800ae64 <xTimerCreateTimerTask+0x88>)
 800ae1e:	4812      	ldr	r0, [pc, #72]	; (800ae68 <xTimerCreateTimerTask+0x8c>)
 800ae20:	f7fe fc76 	bl	8009710 <xTaskCreateStatic>
 800ae24:	4603      	mov	r3, r0
 800ae26:	4a11      	ldr	r2, [pc, #68]	; (800ae6c <xTimerCreateTimerTask+0x90>)
 800ae28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae2a:	4b10      	ldr	r3, [pc, #64]	; (800ae6c <xTimerCreateTimerTask+0x90>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae32:	2301      	movs	r3, #1
 800ae34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10c      	bne.n	800ae56 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	b672      	cpsid	i
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	b662      	cpsie	i
 800ae50:	613b      	str	r3, [r7, #16]
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ae56:	697b      	ldr	r3, [r7, #20]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3718      	adds	r7, #24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	20001858 	.word	0x20001858
 800ae64:	0800e288 	.word	0x0800e288
 800ae68:	0800afad 	.word	0x0800afad
 800ae6c:	2000185c 	.word	0x2000185c

0800ae70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08a      	sub	sp, #40	; 0x28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10c      	bne.n	800aea2 <xTimerGenericCommand+0x32>
	__asm volatile
 800ae88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8c:	b672      	cpsid	i
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	b662      	cpsie	i
 800ae9c:	623b      	str	r3, [r7, #32]
}
 800ae9e:	bf00      	nop
 800aea0:	e7fe      	b.n	800aea0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aea2:	4b1a      	ldr	r3, [pc, #104]	; (800af0c <xTimerGenericCommand+0x9c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d02a      	beq.n	800af00 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	2b05      	cmp	r3, #5
 800aeba:	dc18      	bgt.n	800aeee <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aebc:	f7ff fcec 	bl	800a898 <xTaskGetSchedulerState>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d109      	bne.n	800aeda <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aec6:	4b11      	ldr	r3, [pc, #68]	; (800af0c <xTimerGenericCommand+0x9c>)
 800aec8:	6818      	ldr	r0, [r3, #0]
 800aeca:	f107 0110 	add.w	r1, r7, #16
 800aece:	2300      	movs	r3, #0
 800aed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aed2:	f7fd fd4b 	bl	800896c <xQueueGenericSend>
 800aed6:	6278      	str	r0, [r7, #36]	; 0x24
 800aed8:	e012      	b.n	800af00 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aeda:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <xTimerGenericCommand+0x9c>)
 800aedc:	6818      	ldr	r0, [r3, #0]
 800aede:	f107 0110 	add.w	r1, r7, #16
 800aee2:	2300      	movs	r3, #0
 800aee4:	2200      	movs	r2, #0
 800aee6:	f7fd fd41 	bl	800896c <xQueueGenericSend>
 800aeea:	6278      	str	r0, [r7, #36]	; 0x24
 800aeec:	e008      	b.n	800af00 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aeee:	4b07      	ldr	r3, [pc, #28]	; (800af0c <xTimerGenericCommand+0x9c>)
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	f107 0110 	add.w	r1, r7, #16
 800aef6:	2300      	movs	r3, #0
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	f7fd fe3d 	bl	8008b78 <xQueueGenericSendFromISR>
 800aefe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af02:	4618      	mov	r0, r3
 800af04:	3728      	adds	r7, #40	; 0x28
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	20001858 	.word	0x20001858

0800af10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b088      	sub	sp, #32
 800af14:	af02      	add	r7, sp, #8
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af1a:	4b23      	ldr	r3, [pc, #140]	; (800afa8 <prvProcessExpiredTimer+0x98>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	3304      	adds	r3, #4
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fd fb71 	bl	8008610 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af34:	f003 0304 	and.w	r3, r3, #4
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d024      	beq.n	800af86 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	699a      	ldr	r2, [r3, #24]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	18d1      	adds	r1, r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	6978      	ldr	r0, [r7, #20]
 800af4a:	f000 f8d3 	bl	800b0f4 <prvInsertTimerInActiveList>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d021      	beq.n	800af98 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af54:	2300      	movs	r3, #0
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	2300      	movs	r3, #0
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	2100      	movs	r1, #0
 800af5e:	6978      	ldr	r0, [r7, #20]
 800af60:	f7ff ff86 	bl	800ae70 <xTimerGenericCommand>
 800af64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d115      	bne.n	800af98 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af70:	b672      	cpsid	i
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	b662      	cpsie	i
 800af80:	60fb      	str	r3, [r7, #12]
}
 800af82:	bf00      	nop
 800af84:	e7fe      	b.n	800af84 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af8c:	f023 0301 	bic.w	r3, r3, #1
 800af90:	b2da      	uxtb	r2, r3
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	6978      	ldr	r0, [r7, #20]
 800af9e:	4798      	blx	r3
}
 800afa0:	bf00      	nop
 800afa2:	3718      	adds	r7, #24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	20001850 	.word	0x20001850

0800afac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afb4:	f107 0308 	add.w	r3, r7, #8
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 f857 	bl	800b06c <prvGetNextExpireTime>
 800afbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	4619      	mov	r1, r3
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 f803 	bl	800afd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afca:	f000 f8d5 	bl	800b178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afce:	e7f1      	b.n	800afb4 <prvTimerTask+0x8>

0800afd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afda:	f7fe fedf 	bl	8009d9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afde:	f107 0308 	add.w	r3, r7, #8
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 f866 	bl	800b0b4 <prvSampleTimeNow>
 800afe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d130      	bne.n	800b052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10a      	bne.n	800b00c <prvProcessTimerOrBlockTask+0x3c>
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	429a      	cmp	r2, r3
 800affc:	d806      	bhi.n	800b00c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800affe:	f7fe fedb 	bl	8009db8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b002:	68f9      	ldr	r1, [r7, #12]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff ff83 	bl	800af10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b00a:	e024      	b.n	800b056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d008      	beq.n	800b024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b012:	4b13      	ldr	r3, [pc, #76]	; (800b060 <prvProcessTimerOrBlockTask+0x90>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <prvProcessTimerOrBlockTask+0x50>
 800b01c:	2301      	movs	r3, #1
 800b01e:	e000      	b.n	800b022 <prvProcessTimerOrBlockTask+0x52>
 800b020:	2300      	movs	r3, #0
 800b022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b024:	4b0f      	ldr	r3, [pc, #60]	; (800b064 <prvProcessTimerOrBlockTask+0x94>)
 800b026:	6818      	ldr	r0, [r3, #0]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	4619      	mov	r1, r3
 800b032:	f7fe fb39 	bl	80096a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b036:	f7fe febf 	bl	8009db8 <xTaskResumeAll>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10a      	bne.n	800b056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b040:	4b09      	ldr	r3, [pc, #36]	; (800b068 <prvProcessTimerOrBlockTask+0x98>)
 800b042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	f3bf 8f6f 	isb	sy
}
 800b050:	e001      	b.n	800b056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b052:	f7fe feb1 	bl	8009db8 <xTaskResumeAll>
}
 800b056:	bf00      	nop
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	20001854 	.word	0x20001854
 800b064:	20001858 	.word	0x20001858
 800b068:	e000ed04 	.word	0xe000ed04

0800b06c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b074:	4b0e      	ldr	r3, [pc, #56]	; (800b0b0 <prvGetNextExpireTime+0x44>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <prvGetNextExpireTime+0x16>
 800b07e:	2201      	movs	r2, #1
 800b080:	e000      	b.n	800b084 <prvGetNextExpireTime+0x18>
 800b082:	2200      	movs	r2, #0
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d105      	bne.n	800b09c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b090:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <prvGetNextExpireTime+0x44>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	60fb      	str	r3, [r7, #12]
 800b09a:	e001      	b.n	800b0a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b09c:	2300      	movs	r3, #0
 800b09e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	20001850 	.word	0x20001850

0800b0b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0bc:	f7fe ff1c 	bl	8009ef8 <xTaskGetTickCount>
 800b0c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <prvSampleTimeNow+0x3c>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d205      	bcs.n	800b0d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0cc:	f000 f93c 	bl	800b348 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	e002      	b.n	800b0de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0de:	4a04      	ldr	r2, [pc, #16]	; (800b0f0 <prvSampleTimeNow+0x3c>)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20001860 	.word	0x20001860

0800b0f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b102:	2300      	movs	r3, #0
 800b104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	429a      	cmp	r2, r3
 800b118:	d812      	bhi.n	800b140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	1ad2      	subs	r2, r2, r3
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	429a      	cmp	r2, r3
 800b126:	d302      	bcc.n	800b12e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b128:	2301      	movs	r3, #1
 800b12a:	617b      	str	r3, [r7, #20]
 800b12c:	e01b      	b.n	800b166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b12e:	4b10      	ldr	r3, [pc, #64]	; (800b170 <prvInsertTimerInActiveList+0x7c>)
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3304      	adds	r3, #4
 800b136:	4619      	mov	r1, r3
 800b138:	4610      	mov	r0, r2
 800b13a:	f7fd fa30 	bl	800859e <vListInsert>
 800b13e:	e012      	b.n	800b166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d206      	bcs.n	800b156 <prvInsertTimerInActiveList+0x62>
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d302      	bcc.n	800b156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b150:	2301      	movs	r3, #1
 800b152:	617b      	str	r3, [r7, #20]
 800b154:	e007      	b.n	800b166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b156:	4b07      	ldr	r3, [pc, #28]	; (800b174 <prvInsertTimerInActiveList+0x80>)
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	3304      	adds	r3, #4
 800b15e:	4619      	mov	r1, r3
 800b160:	4610      	mov	r0, r2
 800b162:	f7fd fa1c 	bl	800859e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b166:	697b      	ldr	r3, [r7, #20]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3718      	adds	r7, #24
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	20001854 	.word	0x20001854
 800b174:	20001850 	.word	0x20001850

0800b178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b08e      	sub	sp, #56	; 0x38
 800b17c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b17e:	e0d0      	b.n	800b322 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2b00      	cmp	r3, #0
 800b184:	da1a      	bge.n	800b1bc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b186:	1d3b      	adds	r3, r7, #4
 800b188:	3304      	adds	r3, #4
 800b18a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10c      	bne.n	800b1ac <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	b672      	cpsid	i
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	b662      	cpsie	i
 800b1a6:	61fb      	str	r3, [r7, #28]
}
 800b1a8:	bf00      	nop
 800b1aa:	e7fe      	b.n	800b1aa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1b2:	6850      	ldr	r0, [r2, #4]
 800b1b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1b6:	6892      	ldr	r2, [r2, #8]
 800b1b8:	4611      	mov	r1, r2
 800b1ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f2c0 80ae 	blt.w	800b320 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ca:	695b      	ldr	r3, [r3, #20]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d004      	beq.n	800b1da <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	3304      	adds	r3, #4
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fd fa1b 	bl	8008610 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1da:	463b      	mov	r3, r7
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7ff ff69 	bl	800b0b4 <prvSampleTimeNow>
 800b1e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b09      	cmp	r3, #9
 800b1e8:	f200 809b 	bhi.w	800b322 <prvProcessReceivedCommands+0x1aa>
 800b1ec:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <prvProcessReceivedCommands+0x7c>)
 800b1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f2:	bf00      	nop
 800b1f4:	0800b21d 	.word	0x0800b21d
 800b1f8:	0800b21d 	.word	0x0800b21d
 800b1fc:	0800b21d 	.word	0x0800b21d
 800b200:	0800b295 	.word	0x0800b295
 800b204:	0800b2a9 	.word	0x0800b2a9
 800b208:	0800b2f7 	.word	0x0800b2f7
 800b20c:	0800b21d 	.word	0x0800b21d
 800b210:	0800b21d 	.word	0x0800b21d
 800b214:	0800b295 	.word	0x0800b295
 800b218:	0800b2a9 	.word	0x0800b2a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b222:	f043 0301 	orr.w	r3, r3, #1
 800b226:	b2da      	uxtb	r2, r3
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	18d1      	adds	r1, r2, r3
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b23a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b23c:	f7ff ff5a 	bl	800b0f4 <prvInsertTimerInActiveList>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d06d      	beq.n	800b322 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b24c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b254:	f003 0304 	and.w	r3, r3, #4
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d062      	beq.n	800b322 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	441a      	add	r2, r3
 800b264:	2300      	movs	r3, #0
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	2300      	movs	r3, #0
 800b26a:	2100      	movs	r1, #0
 800b26c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b26e:	f7ff fdff 	bl	800ae70 <xTimerGenericCommand>
 800b272:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d153      	bne.n	800b322 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27e:	b672      	cpsid	i
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	b662      	cpsie	i
 800b28e:	61bb      	str	r3, [r7, #24]
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b29a:	f023 0301 	bic.w	r3, r3, #1
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b2a6:	e03c      	b.n	800b322 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2ae:	f043 0301 	orr.w	r3, r3, #1
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10c      	bne.n	800b2e2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2cc:	b672      	cpsid	i
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	b662      	cpsie	i
 800b2dc:	617b      	str	r3, [r7, #20]
}
 800b2de:	bf00      	nop
 800b2e0:	e7fe      	b.n	800b2e0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e4:	699a      	ldr	r2, [r3, #24]
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	18d1      	adds	r1, r2, r3
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2f0:	f7ff ff00 	bl	800b0f4 <prvInsertTimerInActiveList>
					break;
 800b2f4:	e015      	b.n	800b322 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2fc:	f003 0302 	and.w	r3, r3, #2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d103      	bne.n	800b30c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b306:	f000 fbc7 	bl	800ba98 <vPortFree>
 800b30a:	e00a      	b.n	800b322 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b312:	f023 0301 	bic.w	r3, r3, #1
 800b316:	b2da      	uxtb	r2, r3
 800b318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b31e:	e000      	b.n	800b322 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b320:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b322:	4b08      	ldr	r3, [pc, #32]	; (800b344 <prvProcessReceivedCommands+0x1cc>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	1d39      	adds	r1, r7, #4
 800b328:	2200      	movs	r2, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fd fd5a 	bl	8008de4 <xQueueReceive>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	f47f af24 	bne.w	800b180 <prvProcessReceivedCommands+0x8>
	}
}
 800b338:	bf00      	nop
 800b33a:	bf00      	nop
 800b33c:	3730      	adds	r7, #48	; 0x30
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20001858 	.word	0x20001858

0800b348 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b34e:	e04a      	b.n	800b3e6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b350:	4b2e      	ldr	r3, [pc, #184]	; (800b40c <prvSwitchTimerLists+0xc4>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b35a:	4b2c      	ldr	r3, [pc, #176]	; (800b40c <prvSwitchTimerLists+0xc4>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3304      	adds	r3, #4
 800b368:	4618      	mov	r0, r3
 800b36a:	f7fd f951 	bl	8008610 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b00      	cmp	r3, #0
 800b382:	d030      	beq.n	800b3e6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	699b      	ldr	r3, [r3, #24]
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	4413      	add	r3, r2
 800b38c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	429a      	cmp	r2, r3
 800b394:	d90e      	bls.n	800b3b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3a2:	4b1a      	ldr	r3, [pc, #104]	; (800b40c <prvSwitchTimerLists+0xc4>)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	f7fd f8f6 	bl	800859e <vListInsert>
 800b3b2:	e018      	b.n	800b3e6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	2100      	movs	r1, #0
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f7ff fd56 	bl	800ae70 <xTimerGenericCommand>
 800b3c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10c      	bne.n	800b3e6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	b672      	cpsid	i
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	b662      	cpsie	i
 800b3e0:	603b      	str	r3, [r7, #0]
}
 800b3e2:	bf00      	nop
 800b3e4:	e7fe      	b.n	800b3e4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3e6:	4b09      	ldr	r3, [pc, #36]	; (800b40c <prvSwitchTimerLists+0xc4>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1af      	bne.n	800b350 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3f0:	4b06      	ldr	r3, [pc, #24]	; (800b40c <prvSwitchTimerLists+0xc4>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3f6:	4b06      	ldr	r3, [pc, #24]	; (800b410 <prvSwitchTimerLists+0xc8>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a04      	ldr	r2, [pc, #16]	; (800b40c <prvSwitchTimerLists+0xc4>)
 800b3fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3fe:	4a04      	ldr	r2, [pc, #16]	; (800b410 <prvSwitchTimerLists+0xc8>)
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	6013      	str	r3, [r2, #0]
}
 800b404:	bf00      	nop
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	20001850 	.word	0x20001850
 800b410:	20001854 	.word	0x20001854

0800b414 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b41a:	f000 f947 	bl	800b6ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b41e:	4b15      	ldr	r3, [pc, #84]	; (800b474 <prvCheckForValidListAndQueue+0x60>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d120      	bne.n	800b468 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b426:	4814      	ldr	r0, [pc, #80]	; (800b478 <prvCheckForValidListAndQueue+0x64>)
 800b428:	f7fd f868 	bl	80084fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b42c:	4813      	ldr	r0, [pc, #76]	; (800b47c <prvCheckForValidListAndQueue+0x68>)
 800b42e:	f7fd f865 	bl	80084fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b432:	4b13      	ldr	r3, [pc, #76]	; (800b480 <prvCheckForValidListAndQueue+0x6c>)
 800b434:	4a10      	ldr	r2, [pc, #64]	; (800b478 <prvCheckForValidListAndQueue+0x64>)
 800b436:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b438:	4b12      	ldr	r3, [pc, #72]	; (800b484 <prvCheckForValidListAndQueue+0x70>)
 800b43a:	4a10      	ldr	r2, [pc, #64]	; (800b47c <prvCheckForValidListAndQueue+0x68>)
 800b43c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b43e:	2300      	movs	r3, #0
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	4b11      	ldr	r3, [pc, #68]	; (800b488 <prvCheckForValidListAndQueue+0x74>)
 800b444:	4a11      	ldr	r2, [pc, #68]	; (800b48c <prvCheckForValidListAndQueue+0x78>)
 800b446:	2110      	movs	r1, #16
 800b448:	200a      	movs	r0, #10
 800b44a:	f7fd f975 	bl	8008738 <xQueueGenericCreateStatic>
 800b44e:	4603      	mov	r3, r0
 800b450:	4a08      	ldr	r2, [pc, #32]	; (800b474 <prvCheckForValidListAndQueue+0x60>)
 800b452:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b454:	4b07      	ldr	r3, [pc, #28]	; (800b474 <prvCheckForValidListAndQueue+0x60>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d005      	beq.n	800b468 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b45c:	4b05      	ldr	r3, [pc, #20]	; (800b474 <prvCheckForValidListAndQueue+0x60>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	490b      	ldr	r1, [pc, #44]	; (800b490 <prvCheckForValidListAndQueue+0x7c>)
 800b462:	4618      	mov	r0, r3
 800b464:	f7fe f8cc 	bl	8009600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b468:	f000 f954 	bl	800b714 <vPortExitCritical>
}
 800b46c:	bf00      	nop
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20001858 	.word	0x20001858
 800b478:	20001828 	.word	0x20001828
 800b47c:	2000183c 	.word	0x2000183c
 800b480:	20001850 	.word	0x20001850
 800b484:	20001854 	.word	0x20001854
 800b488:	20001904 	.word	0x20001904
 800b48c:	20001864 	.word	0x20001864
 800b490:	0800e290 	.word	0x0800e290

0800b494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	3b04      	subs	r3, #4
 800b4a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f023 0201 	bic.w	r2, r3, #1
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3b04      	subs	r3, #4
 800b4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4c4:	4a0c      	ldr	r2, [pc, #48]	; (800b4f8 <pxPortInitialiseStack+0x64>)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3b14      	subs	r3, #20
 800b4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3b04      	subs	r3, #4
 800b4da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f06f 0202 	mvn.w	r2, #2
 800b4e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3b20      	subs	r3, #32
 800b4e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	0800b4fd 	.word	0x0800b4fd

0800b4fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b502:	2300      	movs	r3, #0
 800b504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b506:	4b14      	ldr	r3, [pc, #80]	; (800b558 <prvTaskExitError+0x5c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b50e:	d00c      	beq.n	800b52a <prvTaskExitError+0x2e>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	b672      	cpsid	i
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	b662      	cpsie	i
 800b524:	60fb      	str	r3, [r7, #12]
}
 800b526:	bf00      	nop
 800b528:	e7fe      	b.n	800b528 <prvTaskExitError+0x2c>
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52e:	b672      	cpsid	i
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	b662      	cpsie	i
 800b53e:	60bb      	str	r3, [r7, #8]
}
 800b540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b542:	bf00      	nop
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d0fc      	beq.n	800b544 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b54a:	bf00      	nop
 800b54c:	bf00      	nop
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	200000a0 	.word	0x200000a0
 800b55c:	00000000 	.word	0x00000000

0800b560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <pxCurrentTCBConst2>)
 800b562:	6819      	ldr	r1, [r3, #0]
 800b564:	6808      	ldr	r0, [r1, #0]
 800b566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56a:	f380 8809 	msr	PSP, r0
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	f380 8811 	msr	BASEPRI, r0
 800b57a:	4770      	bx	lr
 800b57c:	f3af 8000 	nop.w

0800b580 <pxCurrentTCBConst2>:
 800b580:	20001328 	.word	0x20001328
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop

0800b588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b588:	4808      	ldr	r0, [pc, #32]	; (800b5ac <prvPortStartFirstTask+0x24>)
 800b58a:	6800      	ldr	r0, [r0, #0]
 800b58c:	6800      	ldr	r0, [r0, #0]
 800b58e:	f380 8808 	msr	MSP, r0
 800b592:	f04f 0000 	mov.w	r0, #0
 800b596:	f380 8814 	msr	CONTROL, r0
 800b59a:	b662      	cpsie	i
 800b59c:	b661      	cpsie	f
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	df00      	svc	0
 800b5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5aa:	bf00      	nop
 800b5ac:	e000ed08 	.word	0xe000ed08

0800b5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5b6:	4b37      	ldr	r3, [pc, #220]	; (800b694 <xPortStartScheduler+0xe4>)
 800b5b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	22ff      	movs	r2, #255	; 0xff
 800b5c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5d0:	78fb      	ldrb	r3, [r7, #3]
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	4b2f      	ldr	r3, [pc, #188]	; (800b698 <xPortStartScheduler+0xe8>)
 800b5dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5de:	4b2f      	ldr	r3, [pc, #188]	; (800b69c <xPortStartScheduler+0xec>)
 800b5e0:	2207      	movs	r2, #7
 800b5e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5e4:	e009      	b.n	800b5fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b5e6:	4b2d      	ldr	r3, [pc, #180]	; (800b69c <xPortStartScheduler+0xec>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	4a2b      	ldr	r2, [pc, #172]	; (800b69c <xPortStartScheduler+0xec>)
 800b5ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5f0:	78fb      	ldrb	r3, [r7, #3]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5fa:	78fb      	ldrb	r3, [r7, #3]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b602:	2b80      	cmp	r3, #128	; 0x80
 800b604:	d0ef      	beq.n	800b5e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b606:	4b25      	ldr	r3, [pc, #148]	; (800b69c <xPortStartScheduler+0xec>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f1c3 0307 	rsb	r3, r3, #7
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d00c      	beq.n	800b62c <xPortStartScheduler+0x7c>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	b672      	cpsid	i
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	b662      	cpsie	i
 800b626:	60bb      	str	r3, [r7, #8]
}
 800b628:	bf00      	nop
 800b62a:	e7fe      	b.n	800b62a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b62c:	4b1b      	ldr	r3, [pc, #108]	; (800b69c <xPortStartScheduler+0xec>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	021b      	lsls	r3, r3, #8
 800b632:	4a1a      	ldr	r2, [pc, #104]	; (800b69c <xPortStartScheduler+0xec>)
 800b634:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b636:	4b19      	ldr	r3, [pc, #100]	; (800b69c <xPortStartScheduler+0xec>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b63e:	4a17      	ldr	r2, [pc, #92]	; (800b69c <xPortStartScheduler+0xec>)
 800b640:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	b2da      	uxtb	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b64a:	4b15      	ldr	r3, [pc, #84]	; (800b6a0 <xPortStartScheduler+0xf0>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a14      	ldr	r2, [pc, #80]	; (800b6a0 <xPortStartScheduler+0xf0>)
 800b650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b654:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b656:	4b12      	ldr	r3, [pc, #72]	; (800b6a0 <xPortStartScheduler+0xf0>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a11      	ldr	r2, [pc, #68]	; (800b6a0 <xPortStartScheduler+0xf0>)
 800b65c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b660:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b662:	f000 f8dd 	bl	800b820 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b666:	4b0f      	ldr	r3, [pc, #60]	; (800b6a4 <xPortStartScheduler+0xf4>)
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b66c:	f000 f8fc 	bl	800b868 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b670:	4b0d      	ldr	r3, [pc, #52]	; (800b6a8 <xPortStartScheduler+0xf8>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a0c      	ldr	r2, [pc, #48]	; (800b6a8 <xPortStartScheduler+0xf8>)
 800b676:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b67a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b67c:	f7ff ff84 	bl	800b588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b680:	f7fe fdb2 	bl	800a1e8 <vTaskSwitchContext>
	prvTaskExitError();
 800b684:	f7ff ff3a 	bl	800b4fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	e000e400 	.word	0xe000e400
 800b698:	20001954 	.word	0x20001954
 800b69c:	20001958 	.word	0x20001958
 800b6a0:	e000ed20 	.word	0xe000ed20
 800b6a4:	200000a0 	.word	0x200000a0
 800b6a8:	e000ef34 	.word	0xe000ef34

0800b6ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	b672      	cpsid	i
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	b662      	cpsie	i
 800b6c6:	607b      	str	r3, [r7, #4]
}
 800b6c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6ca:	4b10      	ldr	r3, [pc, #64]	; (800b70c <vPortEnterCritical+0x60>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	4a0e      	ldr	r2, [pc, #56]	; (800b70c <vPortEnterCritical+0x60>)
 800b6d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6d4:	4b0d      	ldr	r3, [pc, #52]	; (800b70c <vPortEnterCritical+0x60>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d111      	bne.n	800b700 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6dc:	4b0c      	ldr	r3, [pc, #48]	; (800b710 <vPortEnterCritical+0x64>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00c      	beq.n	800b700 <vPortEnterCritical+0x54>
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ea:	b672      	cpsid	i
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	b662      	cpsie	i
 800b6fa:	603b      	str	r3, [r7, #0]
}
 800b6fc:	bf00      	nop
 800b6fe:	e7fe      	b.n	800b6fe <vPortEnterCritical+0x52>
	}
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	200000a0 	.word	0x200000a0
 800b710:	e000ed04 	.word	0xe000ed04

0800b714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b71a:	4b13      	ldr	r3, [pc, #76]	; (800b768 <vPortExitCritical+0x54>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10c      	bne.n	800b73c <vPortExitCritical+0x28>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	b672      	cpsid	i
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	b662      	cpsie	i
 800b736:	607b      	str	r3, [r7, #4]
}
 800b738:	bf00      	nop
 800b73a:	e7fe      	b.n	800b73a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b73c:	4b0a      	ldr	r3, [pc, #40]	; (800b768 <vPortExitCritical+0x54>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3b01      	subs	r3, #1
 800b742:	4a09      	ldr	r2, [pc, #36]	; (800b768 <vPortExitCritical+0x54>)
 800b744:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b746:	4b08      	ldr	r3, [pc, #32]	; (800b768 <vPortExitCritical+0x54>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d105      	bne.n	800b75a <vPortExitCritical+0x46>
 800b74e:	2300      	movs	r3, #0
 800b750:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	f383 8811 	msr	BASEPRI, r3
}
 800b758:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b75a:	bf00      	nop
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	200000a0 	.word	0x200000a0
 800b76c:	00000000 	.word	0x00000000

0800b770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b770:	f3ef 8009 	mrs	r0, PSP
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	4b15      	ldr	r3, [pc, #84]	; (800b7d0 <pxCurrentTCBConst>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	f01e 0f10 	tst.w	lr, #16
 800b780:	bf08      	it	eq
 800b782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78a:	6010      	str	r0, [r2, #0]
 800b78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b790:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b794:	b672      	cpsid	i
 800b796:	f380 8811 	msr	BASEPRI, r0
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	b662      	cpsie	i
 800b7a4:	f7fe fd20 	bl	800a1e8 <vTaskSwitchContext>
 800b7a8:	f04f 0000 	mov.w	r0, #0
 800b7ac:	f380 8811 	msr	BASEPRI, r0
 800b7b0:	bc09      	pop	{r0, r3}
 800b7b2:	6819      	ldr	r1, [r3, #0]
 800b7b4:	6808      	ldr	r0, [r1, #0]
 800b7b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	f01e 0f10 	tst.w	lr, #16
 800b7be:	bf08      	it	eq
 800b7c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7c4:	f380 8809 	msr	PSP, r0
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop

0800b7d0 <pxCurrentTCBConst>:
 800b7d0:	20001328 	.word	0x20001328
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop

0800b7d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	b672      	cpsid	i
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	b662      	cpsie	i
 800b7f2:	607b      	str	r3, [r7, #4]
}
 800b7f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7f6:	f7fe fc3b 	bl	800a070 <xTaskIncrementTick>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d003      	beq.n	800b808 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b800:	4b06      	ldr	r3, [pc, #24]	; (800b81c <SysTick_Handler+0x44>)
 800b802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	2300      	movs	r3, #0
 800b80a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	f383 8811 	msr	BASEPRI, r3
}
 800b812:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	e000ed04 	.word	0xe000ed04

0800b820 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b820:	b480      	push	{r7}
 800b822:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b824:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <vPortSetupTimerInterrupt+0x34>)
 800b826:	2200      	movs	r2, #0
 800b828:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b82a:	4b0b      	ldr	r3, [pc, #44]	; (800b858 <vPortSetupTimerInterrupt+0x38>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b830:	4b0a      	ldr	r3, [pc, #40]	; (800b85c <vPortSetupTimerInterrupt+0x3c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a0a      	ldr	r2, [pc, #40]	; (800b860 <vPortSetupTimerInterrupt+0x40>)
 800b836:	fba2 2303 	umull	r2, r3, r2, r3
 800b83a:	099b      	lsrs	r3, r3, #6
 800b83c:	4a09      	ldr	r2, [pc, #36]	; (800b864 <vPortSetupTimerInterrupt+0x44>)
 800b83e:	3b01      	subs	r3, #1
 800b840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b842:	4b04      	ldr	r3, [pc, #16]	; (800b854 <vPortSetupTimerInterrupt+0x34>)
 800b844:	2207      	movs	r2, #7
 800b846:	601a      	str	r2, [r3, #0]
}
 800b848:	bf00      	nop
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	e000e010 	.word	0xe000e010
 800b858:	e000e018 	.word	0xe000e018
 800b85c:	20000094 	.word	0x20000094
 800b860:	10624dd3 	.word	0x10624dd3
 800b864:	e000e014 	.word	0xe000e014

0800b868 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b868:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b878 <vPortEnableVFP+0x10>
 800b86c:	6801      	ldr	r1, [r0, #0]
 800b86e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b872:	6001      	str	r1, [r0, #0]
 800b874:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b876:	bf00      	nop
 800b878:	e000ed88 	.word	0xe000ed88

0800b87c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b882:	f3ef 8305 	mrs	r3, IPSR
 800b886:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b0f      	cmp	r3, #15
 800b88c:	d916      	bls.n	800b8bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b88e:	4a19      	ldr	r2, [pc, #100]	; (800b8f4 <vPortValidateInterruptPriority+0x78>)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	4413      	add	r3, r2
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b898:	4b17      	ldr	r3, [pc, #92]	; (800b8f8 <vPortValidateInterruptPriority+0x7c>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	7afa      	ldrb	r2, [r7, #11]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d20c      	bcs.n	800b8bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a6:	b672      	cpsid	i
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	b662      	cpsie	i
 800b8b6:	607b      	str	r3, [r7, #4]
}
 800b8b8:	bf00      	nop
 800b8ba:	e7fe      	b.n	800b8ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8bc:	4b0f      	ldr	r3, [pc, #60]	; (800b8fc <vPortValidateInterruptPriority+0x80>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8c4:	4b0e      	ldr	r3, [pc, #56]	; (800b900 <vPortValidateInterruptPriority+0x84>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d90c      	bls.n	800b8e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d0:	b672      	cpsid	i
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	b662      	cpsie	i
 800b8e0:	603b      	str	r3, [r7, #0]
}
 800b8e2:	bf00      	nop
 800b8e4:	e7fe      	b.n	800b8e4 <vPortValidateInterruptPriority+0x68>
	}
 800b8e6:	bf00      	nop
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	e000e3f0 	.word	0xe000e3f0
 800b8f8:	20001954 	.word	0x20001954
 800b8fc:	e000ed0c 	.word	0xe000ed0c
 800b900:	20001958 	.word	0x20001958

0800b904 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08a      	sub	sp, #40	; 0x28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b90c:	2300      	movs	r3, #0
 800b90e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b910:	f7fe fa44 	bl	8009d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b914:	4b5b      	ldr	r3, [pc, #364]	; (800ba84 <pvPortMalloc+0x180>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b91c:	f000 f926 	bl	800bb6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b920:	4b59      	ldr	r3, [pc, #356]	; (800ba88 <pvPortMalloc+0x184>)
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4013      	ands	r3, r2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f040 8092 	bne.w	800ba52 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d01f      	beq.n	800b974 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b934:	2208      	movs	r2, #8
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	4413      	add	r3, r2
 800b93a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f003 0307 	and.w	r3, r3, #7
 800b942:	2b00      	cmp	r3, #0
 800b944:	d016      	beq.n	800b974 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f023 0307 	bic.w	r3, r3, #7
 800b94c:	3308      	adds	r3, #8
 800b94e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f003 0307 	and.w	r3, r3, #7
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00c      	beq.n	800b974 <pvPortMalloc+0x70>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	b672      	cpsid	i
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	b662      	cpsie	i
 800b96e:	617b      	str	r3, [r7, #20]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d06b      	beq.n	800ba52 <pvPortMalloc+0x14e>
 800b97a:	4b44      	ldr	r3, [pc, #272]	; (800ba8c <pvPortMalloc+0x188>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	429a      	cmp	r2, r3
 800b982:	d866      	bhi.n	800ba52 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b984:	4b42      	ldr	r3, [pc, #264]	; (800ba90 <pvPortMalloc+0x18c>)
 800b986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b988:	4b41      	ldr	r3, [pc, #260]	; (800ba90 <pvPortMalloc+0x18c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b98e:	e004      	b.n	800b99a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d903      	bls.n	800b9ac <pvPortMalloc+0xa8>
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1f1      	bne.n	800b990 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9ac:	4b35      	ldr	r3, [pc, #212]	; (800ba84 <pvPortMalloc+0x180>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d04d      	beq.n	800ba52 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2208      	movs	r2, #8
 800b9bc:	4413      	add	r3, r2
 800b9be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	1ad2      	subs	r2, r2, r3
 800b9d0:	2308      	movs	r3, #8
 800b9d2:	005b      	lsls	r3, r3, #1
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d921      	bls.n	800ba1c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4413      	add	r3, r2
 800b9de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	f003 0307 	and.w	r3, r3, #7
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00c      	beq.n	800ba04 <pvPortMalloc+0x100>
	__asm volatile
 800b9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ee:	b672      	cpsid	i
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	b662      	cpsie	i
 800b9fe:	613b      	str	r3, [r7, #16]
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	1ad2      	subs	r2, r2, r3
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba16:	69b8      	ldr	r0, [r7, #24]
 800ba18:	f000 f90a 	bl	800bc30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba1c:	4b1b      	ldr	r3, [pc, #108]	; (800ba8c <pvPortMalloc+0x188>)
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	4a19      	ldr	r2, [pc, #100]	; (800ba8c <pvPortMalloc+0x188>)
 800ba28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba2a:	4b18      	ldr	r3, [pc, #96]	; (800ba8c <pvPortMalloc+0x188>)
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	4b19      	ldr	r3, [pc, #100]	; (800ba94 <pvPortMalloc+0x190>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d203      	bcs.n	800ba3e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba36:	4b15      	ldr	r3, [pc, #84]	; (800ba8c <pvPortMalloc+0x188>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a16      	ldr	r2, [pc, #88]	; (800ba94 <pvPortMalloc+0x190>)
 800ba3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba40:	685a      	ldr	r2, [r3, #4]
 800ba42:	4b11      	ldr	r3, [pc, #68]	; (800ba88 <pvPortMalloc+0x184>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	431a      	orrs	r2, r3
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4e:	2200      	movs	r2, #0
 800ba50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba52:	f7fe f9b1 	bl	8009db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	f003 0307 	and.w	r3, r3, #7
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00c      	beq.n	800ba7a <pvPortMalloc+0x176>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	b672      	cpsid	i
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	b662      	cpsie	i
 800ba74:	60fb      	str	r3, [r7, #12]
}
 800ba76:	bf00      	nop
 800ba78:	e7fe      	b.n	800ba78 <pvPortMalloc+0x174>
	return pvReturn;
 800ba7a:	69fb      	ldr	r3, [r7, #28]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3728      	adds	r7, #40	; 0x28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	20005564 	.word	0x20005564
 800ba88:	20005570 	.word	0x20005570
 800ba8c:	20005568 	.word	0x20005568
 800ba90:	2000555c 	.word	0x2000555c
 800ba94:	2000556c 	.word	0x2000556c

0800ba98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d04c      	beq.n	800bb44 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800baaa:	2308      	movs	r3, #8
 800baac:	425b      	negs	r3, r3
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	4413      	add	r3, r2
 800bab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	4b23      	ldr	r3, [pc, #140]	; (800bb4c <vPortFree+0xb4>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4013      	ands	r3, r2
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10c      	bne.n	800bae0 <vPortFree+0x48>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	b672      	cpsid	i
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	b662      	cpsie	i
 800bada:	60fb      	str	r3, [r7, #12]
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00c      	beq.n	800bb02 <vPortFree+0x6a>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	b672      	cpsid	i
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	b662      	cpsie	i
 800bafc:	60bb      	str	r3, [r7, #8]
}
 800bafe:	bf00      	nop
 800bb00:	e7fe      	b.n	800bb00 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <vPortFree+0xb4>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d019      	beq.n	800bb44 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d115      	bne.n	800bb44 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	4b0b      	ldr	r3, [pc, #44]	; (800bb4c <vPortFree+0xb4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	43db      	mvns	r3, r3
 800bb22:	401a      	ands	r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb28:	f7fe f938 	bl	8009d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <vPortFree+0xb8>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4413      	add	r3, r2
 800bb36:	4a06      	ldr	r2, [pc, #24]	; (800bb50 <vPortFree+0xb8>)
 800bb38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb3a:	6938      	ldr	r0, [r7, #16]
 800bb3c:	f000 f878 	bl	800bc30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bb40:	f7fe f93a 	bl	8009db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb44:	bf00      	nop
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20005570 	.word	0x20005570
 800bb50:	20005568 	.word	0x20005568

0800bb54 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800bb58:	4b03      	ldr	r3, [pc, #12]	; (800bb68 <xPortGetFreeHeapSize+0x14>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	20005568 	.word	0x20005568

0800bb6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb72:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb78:	4b27      	ldr	r3, [pc, #156]	; (800bc18 <prvHeapInit+0xac>)
 800bb7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f003 0307 	and.w	r3, r3, #7
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00c      	beq.n	800bba0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3307      	adds	r3, #7
 800bb8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f023 0307 	bic.w	r3, r3, #7
 800bb92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb94:	68ba      	ldr	r2, [r7, #8]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	4a1f      	ldr	r2, [pc, #124]	; (800bc18 <prvHeapInit+0xac>)
 800bb9c:	4413      	add	r3, r2
 800bb9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bba4:	4a1d      	ldr	r2, [pc, #116]	; (800bc1c <prvHeapInit+0xb0>)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbaa:	4b1c      	ldr	r3, [pc, #112]	; (800bc1c <prvHeapInit+0xb0>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbb8:	2208      	movs	r2, #8
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	1a9b      	subs	r3, r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f023 0307 	bic.w	r3, r3, #7
 800bbc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4a15      	ldr	r2, [pc, #84]	; (800bc20 <prvHeapInit+0xb4>)
 800bbcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbce:	4b14      	ldr	r3, [pc, #80]	; (800bc20 <prvHeapInit+0xb4>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbd6:	4b12      	ldr	r3, [pc, #72]	; (800bc20 <prvHeapInit+0xb4>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	1ad2      	subs	r2, r2, r3
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbec:	4b0c      	ldr	r3, [pc, #48]	; (800bc20 <prvHeapInit+0xb4>)
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	4a0a      	ldr	r2, [pc, #40]	; (800bc24 <prvHeapInit+0xb8>)
 800bbfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	4a09      	ldr	r2, [pc, #36]	; (800bc28 <prvHeapInit+0xbc>)
 800bc02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc04:	4b09      	ldr	r3, [pc, #36]	; (800bc2c <prvHeapInit+0xc0>)
 800bc06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc0a:	601a      	str	r2, [r3, #0]
}
 800bc0c:	bf00      	nop
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	2000195c 	.word	0x2000195c
 800bc1c:	2000555c 	.word	0x2000555c
 800bc20:	20005564 	.word	0x20005564
 800bc24:	2000556c 	.word	0x2000556c
 800bc28:	20005568 	.word	0x20005568
 800bc2c:	20005570 	.word	0x20005570

0800bc30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc38:	4b28      	ldr	r3, [pc, #160]	; (800bcdc <prvInsertBlockIntoFreeList+0xac>)
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	e002      	b.n	800bc44 <prvInsertBlockIntoFreeList+0x14>
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	60fb      	str	r3, [r7, #12]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d8f7      	bhi.n	800bc3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	4413      	add	r3, r2
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d108      	bne.n	800bc72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	685a      	ldr	r2, [r3, #4]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	441a      	add	r2, r3
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	441a      	add	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d118      	bne.n	800bcb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	4b15      	ldr	r3, [pc, #84]	; (800bce0 <prvInsertBlockIntoFreeList+0xb0>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d00d      	beq.n	800bcae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	441a      	add	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	601a      	str	r2, [r3, #0]
 800bcac:	e008      	b.n	800bcc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcae:	4b0c      	ldr	r3, [pc, #48]	; (800bce0 <prvInsertBlockIntoFreeList+0xb0>)
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	601a      	str	r2, [r3, #0]
 800bcb6:	e003      	b.n	800bcc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d002      	beq.n	800bcce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcce:	bf00      	nop
 800bcd0:	3714      	adds	r7, #20
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	2000555c 	.word	0x2000555c
 800bce0:	20005564 	.word	0x20005564

0800bce4 <__errno>:
 800bce4:	4b01      	ldr	r3, [pc, #4]	; (800bcec <__errno+0x8>)
 800bce6:	6818      	ldr	r0, [r3, #0]
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	200000a4 	.word	0x200000a4

0800bcf0 <std>:
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	b510      	push	{r4, lr}
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	e9c0 3300 	strd	r3, r3, [r0]
 800bcfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcfe:	6083      	str	r3, [r0, #8]
 800bd00:	8181      	strh	r1, [r0, #12]
 800bd02:	6643      	str	r3, [r0, #100]	; 0x64
 800bd04:	81c2      	strh	r2, [r0, #14]
 800bd06:	6183      	str	r3, [r0, #24]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	2208      	movs	r2, #8
 800bd0c:	305c      	adds	r0, #92	; 0x5c
 800bd0e:	f000 f91a 	bl	800bf46 <memset>
 800bd12:	4b05      	ldr	r3, [pc, #20]	; (800bd28 <std+0x38>)
 800bd14:	6263      	str	r3, [r4, #36]	; 0x24
 800bd16:	4b05      	ldr	r3, [pc, #20]	; (800bd2c <std+0x3c>)
 800bd18:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd1a:	4b05      	ldr	r3, [pc, #20]	; (800bd30 <std+0x40>)
 800bd1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd1e:	4b05      	ldr	r3, [pc, #20]	; (800bd34 <std+0x44>)
 800bd20:	6224      	str	r4, [r4, #32]
 800bd22:	6323      	str	r3, [r4, #48]	; 0x30
 800bd24:	bd10      	pop	{r4, pc}
 800bd26:	bf00      	nop
 800bd28:	0800c469 	.word	0x0800c469
 800bd2c:	0800c48f 	.word	0x0800c48f
 800bd30:	0800c4c7 	.word	0x0800c4c7
 800bd34:	0800c4eb 	.word	0x0800c4eb

0800bd38 <_cleanup_r>:
 800bd38:	4901      	ldr	r1, [pc, #4]	; (800bd40 <_cleanup_r+0x8>)
 800bd3a:	f000 b8af 	b.w	800be9c <_fwalk_reent>
 800bd3e:	bf00      	nop
 800bd40:	0800c975 	.word	0x0800c975

0800bd44 <__sfmoreglue>:
 800bd44:	b570      	push	{r4, r5, r6, lr}
 800bd46:	2268      	movs	r2, #104	; 0x68
 800bd48:	1e4d      	subs	r5, r1, #1
 800bd4a:	4355      	muls	r5, r2
 800bd4c:	460e      	mov	r6, r1
 800bd4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd52:	f000 f921 	bl	800bf98 <_malloc_r>
 800bd56:	4604      	mov	r4, r0
 800bd58:	b140      	cbz	r0, 800bd6c <__sfmoreglue+0x28>
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	e9c0 1600 	strd	r1, r6, [r0]
 800bd60:	300c      	adds	r0, #12
 800bd62:	60a0      	str	r0, [r4, #8]
 800bd64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd68:	f000 f8ed 	bl	800bf46 <memset>
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	bd70      	pop	{r4, r5, r6, pc}

0800bd70 <__sfp_lock_acquire>:
 800bd70:	4801      	ldr	r0, [pc, #4]	; (800bd78 <__sfp_lock_acquire+0x8>)
 800bd72:	f000 b8d8 	b.w	800bf26 <__retarget_lock_acquire_recursive>
 800bd76:	bf00      	nop
 800bd78:	20005575 	.word	0x20005575

0800bd7c <__sfp_lock_release>:
 800bd7c:	4801      	ldr	r0, [pc, #4]	; (800bd84 <__sfp_lock_release+0x8>)
 800bd7e:	f000 b8d3 	b.w	800bf28 <__retarget_lock_release_recursive>
 800bd82:	bf00      	nop
 800bd84:	20005575 	.word	0x20005575

0800bd88 <__sinit_lock_acquire>:
 800bd88:	4801      	ldr	r0, [pc, #4]	; (800bd90 <__sinit_lock_acquire+0x8>)
 800bd8a:	f000 b8cc 	b.w	800bf26 <__retarget_lock_acquire_recursive>
 800bd8e:	bf00      	nop
 800bd90:	20005576 	.word	0x20005576

0800bd94 <__sinit_lock_release>:
 800bd94:	4801      	ldr	r0, [pc, #4]	; (800bd9c <__sinit_lock_release+0x8>)
 800bd96:	f000 b8c7 	b.w	800bf28 <__retarget_lock_release_recursive>
 800bd9a:	bf00      	nop
 800bd9c:	20005576 	.word	0x20005576

0800bda0 <__sinit>:
 800bda0:	b510      	push	{r4, lr}
 800bda2:	4604      	mov	r4, r0
 800bda4:	f7ff fff0 	bl	800bd88 <__sinit_lock_acquire>
 800bda8:	69a3      	ldr	r3, [r4, #24]
 800bdaa:	b11b      	cbz	r3, 800bdb4 <__sinit+0x14>
 800bdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdb0:	f7ff bff0 	b.w	800bd94 <__sinit_lock_release>
 800bdb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bdb8:	6523      	str	r3, [r4, #80]	; 0x50
 800bdba:	4b13      	ldr	r3, [pc, #76]	; (800be08 <__sinit+0x68>)
 800bdbc:	4a13      	ldr	r2, [pc, #76]	; (800be0c <__sinit+0x6c>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bdc2:	42a3      	cmp	r3, r4
 800bdc4:	bf04      	itt	eq
 800bdc6:	2301      	moveq	r3, #1
 800bdc8:	61a3      	streq	r3, [r4, #24]
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f000 f820 	bl	800be10 <__sfp>
 800bdd0:	6060      	str	r0, [r4, #4]
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f000 f81c 	bl	800be10 <__sfp>
 800bdd8:	60a0      	str	r0, [r4, #8]
 800bdda:	4620      	mov	r0, r4
 800bddc:	f000 f818 	bl	800be10 <__sfp>
 800bde0:	2200      	movs	r2, #0
 800bde2:	60e0      	str	r0, [r4, #12]
 800bde4:	2104      	movs	r1, #4
 800bde6:	6860      	ldr	r0, [r4, #4]
 800bde8:	f7ff ff82 	bl	800bcf0 <std>
 800bdec:	68a0      	ldr	r0, [r4, #8]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	2109      	movs	r1, #9
 800bdf2:	f7ff ff7d 	bl	800bcf0 <std>
 800bdf6:	68e0      	ldr	r0, [r4, #12]
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	2112      	movs	r1, #18
 800bdfc:	f7ff ff78 	bl	800bcf0 <std>
 800be00:	2301      	movs	r3, #1
 800be02:	61a3      	str	r3, [r4, #24]
 800be04:	e7d2      	b.n	800bdac <__sinit+0xc>
 800be06:	bf00      	nop
 800be08:	0800f1b0 	.word	0x0800f1b0
 800be0c:	0800bd39 	.word	0x0800bd39

0800be10 <__sfp>:
 800be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be12:	4607      	mov	r7, r0
 800be14:	f7ff ffac 	bl	800bd70 <__sfp_lock_acquire>
 800be18:	4b1e      	ldr	r3, [pc, #120]	; (800be94 <__sfp+0x84>)
 800be1a:	681e      	ldr	r6, [r3, #0]
 800be1c:	69b3      	ldr	r3, [r6, #24]
 800be1e:	b913      	cbnz	r3, 800be26 <__sfp+0x16>
 800be20:	4630      	mov	r0, r6
 800be22:	f7ff ffbd 	bl	800bda0 <__sinit>
 800be26:	3648      	adds	r6, #72	; 0x48
 800be28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	d503      	bpl.n	800be38 <__sfp+0x28>
 800be30:	6833      	ldr	r3, [r6, #0]
 800be32:	b30b      	cbz	r3, 800be78 <__sfp+0x68>
 800be34:	6836      	ldr	r6, [r6, #0]
 800be36:	e7f7      	b.n	800be28 <__sfp+0x18>
 800be38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be3c:	b9d5      	cbnz	r5, 800be74 <__sfp+0x64>
 800be3e:	4b16      	ldr	r3, [pc, #88]	; (800be98 <__sfp+0x88>)
 800be40:	60e3      	str	r3, [r4, #12]
 800be42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be46:	6665      	str	r5, [r4, #100]	; 0x64
 800be48:	f000 f86c 	bl	800bf24 <__retarget_lock_init_recursive>
 800be4c:	f7ff ff96 	bl	800bd7c <__sfp_lock_release>
 800be50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be58:	6025      	str	r5, [r4, #0]
 800be5a:	61a5      	str	r5, [r4, #24]
 800be5c:	2208      	movs	r2, #8
 800be5e:	4629      	mov	r1, r5
 800be60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be64:	f000 f86f 	bl	800bf46 <memset>
 800be68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be70:	4620      	mov	r0, r4
 800be72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be74:	3468      	adds	r4, #104	; 0x68
 800be76:	e7d9      	b.n	800be2c <__sfp+0x1c>
 800be78:	2104      	movs	r1, #4
 800be7a:	4638      	mov	r0, r7
 800be7c:	f7ff ff62 	bl	800bd44 <__sfmoreglue>
 800be80:	4604      	mov	r4, r0
 800be82:	6030      	str	r0, [r6, #0]
 800be84:	2800      	cmp	r0, #0
 800be86:	d1d5      	bne.n	800be34 <__sfp+0x24>
 800be88:	f7ff ff78 	bl	800bd7c <__sfp_lock_release>
 800be8c:	230c      	movs	r3, #12
 800be8e:	603b      	str	r3, [r7, #0]
 800be90:	e7ee      	b.n	800be70 <__sfp+0x60>
 800be92:	bf00      	nop
 800be94:	0800f1b0 	.word	0x0800f1b0
 800be98:	ffff0001 	.word	0xffff0001

0800be9c <_fwalk_reent>:
 800be9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bea0:	4606      	mov	r6, r0
 800bea2:	4688      	mov	r8, r1
 800bea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bea8:	2700      	movs	r7, #0
 800beaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800beae:	f1b9 0901 	subs.w	r9, r9, #1
 800beb2:	d505      	bpl.n	800bec0 <_fwalk_reent+0x24>
 800beb4:	6824      	ldr	r4, [r4, #0]
 800beb6:	2c00      	cmp	r4, #0
 800beb8:	d1f7      	bne.n	800beaa <_fwalk_reent+0xe>
 800beba:	4638      	mov	r0, r7
 800bebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bec0:	89ab      	ldrh	r3, [r5, #12]
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d907      	bls.n	800bed6 <_fwalk_reent+0x3a>
 800bec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800beca:	3301      	adds	r3, #1
 800becc:	d003      	beq.n	800bed6 <_fwalk_reent+0x3a>
 800bece:	4629      	mov	r1, r5
 800bed0:	4630      	mov	r0, r6
 800bed2:	47c0      	blx	r8
 800bed4:	4307      	orrs	r7, r0
 800bed6:	3568      	adds	r5, #104	; 0x68
 800bed8:	e7e9      	b.n	800beae <_fwalk_reent+0x12>
	...

0800bedc <__libc_init_array>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	4d0d      	ldr	r5, [pc, #52]	; (800bf14 <__libc_init_array+0x38>)
 800bee0:	4c0d      	ldr	r4, [pc, #52]	; (800bf18 <__libc_init_array+0x3c>)
 800bee2:	1b64      	subs	r4, r4, r5
 800bee4:	10a4      	asrs	r4, r4, #2
 800bee6:	2600      	movs	r6, #0
 800bee8:	42a6      	cmp	r6, r4
 800beea:	d109      	bne.n	800bf00 <__libc_init_array+0x24>
 800beec:	4d0b      	ldr	r5, [pc, #44]	; (800bf1c <__libc_init_array+0x40>)
 800beee:	4c0c      	ldr	r4, [pc, #48]	; (800bf20 <__libc_init_array+0x44>)
 800bef0:	f002 f810 	bl	800df14 <_init>
 800bef4:	1b64      	subs	r4, r4, r5
 800bef6:	10a4      	asrs	r4, r4, #2
 800bef8:	2600      	movs	r6, #0
 800befa:	42a6      	cmp	r6, r4
 800befc:	d105      	bne.n	800bf0a <__libc_init_array+0x2e>
 800befe:	bd70      	pop	{r4, r5, r6, pc}
 800bf00:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf04:	4798      	blx	r3
 800bf06:	3601      	adds	r6, #1
 800bf08:	e7ee      	b.n	800bee8 <__libc_init_array+0xc>
 800bf0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf0e:	4798      	blx	r3
 800bf10:	3601      	adds	r6, #1
 800bf12:	e7f2      	b.n	800befa <__libc_init_array+0x1e>
 800bf14:	0800f3bc 	.word	0x0800f3bc
 800bf18:	0800f3bc 	.word	0x0800f3bc
 800bf1c:	0800f3bc 	.word	0x0800f3bc
 800bf20:	0800f3c0 	.word	0x0800f3c0

0800bf24 <__retarget_lock_init_recursive>:
 800bf24:	4770      	bx	lr

0800bf26 <__retarget_lock_acquire_recursive>:
 800bf26:	4770      	bx	lr

0800bf28 <__retarget_lock_release_recursive>:
 800bf28:	4770      	bx	lr

0800bf2a <memcpy>:
 800bf2a:	440a      	add	r2, r1
 800bf2c:	4291      	cmp	r1, r2
 800bf2e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf32:	d100      	bne.n	800bf36 <memcpy+0xc>
 800bf34:	4770      	bx	lr
 800bf36:	b510      	push	{r4, lr}
 800bf38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf40:	4291      	cmp	r1, r2
 800bf42:	d1f9      	bne.n	800bf38 <memcpy+0xe>
 800bf44:	bd10      	pop	{r4, pc}

0800bf46 <memset>:
 800bf46:	4402      	add	r2, r0
 800bf48:	4603      	mov	r3, r0
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d100      	bne.n	800bf50 <memset+0xa>
 800bf4e:	4770      	bx	lr
 800bf50:	f803 1b01 	strb.w	r1, [r3], #1
 800bf54:	e7f9      	b.n	800bf4a <memset+0x4>
	...

0800bf58 <sbrk_aligned>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	4e0e      	ldr	r6, [pc, #56]	; (800bf94 <sbrk_aligned+0x3c>)
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	6831      	ldr	r1, [r6, #0]
 800bf60:	4605      	mov	r5, r0
 800bf62:	b911      	cbnz	r1, 800bf6a <sbrk_aligned+0x12>
 800bf64:	f000 f9f0 	bl	800c348 <_sbrk_r>
 800bf68:	6030      	str	r0, [r6, #0]
 800bf6a:	4621      	mov	r1, r4
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	f000 f9eb 	bl	800c348 <_sbrk_r>
 800bf72:	1c43      	adds	r3, r0, #1
 800bf74:	d00a      	beq.n	800bf8c <sbrk_aligned+0x34>
 800bf76:	1cc4      	adds	r4, r0, #3
 800bf78:	f024 0403 	bic.w	r4, r4, #3
 800bf7c:	42a0      	cmp	r0, r4
 800bf7e:	d007      	beq.n	800bf90 <sbrk_aligned+0x38>
 800bf80:	1a21      	subs	r1, r4, r0
 800bf82:	4628      	mov	r0, r5
 800bf84:	f000 f9e0 	bl	800c348 <_sbrk_r>
 800bf88:	3001      	adds	r0, #1
 800bf8a:	d101      	bne.n	800bf90 <sbrk_aligned+0x38>
 800bf8c:	f04f 34ff 	mov.w	r4, #4294967295
 800bf90:	4620      	mov	r0, r4
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	2000557c 	.word	0x2000557c

0800bf98 <_malloc_r>:
 800bf98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9c:	1ccd      	adds	r5, r1, #3
 800bf9e:	f025 0503 	bic.w	r5, r5, #3
 800bfa2:	3508      	adds	r5, #8
 800bfa4:	2d0c      	cmp	r5, #12
 800bfa6:	bf38      	it	cc
 800bfa8:	250c      	movcc	r5, #12
 800bfaa:	2d00      	cmp	r5, #0
 800bfac:	4607      	mov	r7, r0
 800bfae:	db01      	blt.n	800bfb4 <_malloc_r+0x1c>
 800bfb0:	42a9      	cmp	r1, r5
 800bfb2:	d905      	bls.n	800bfc0 <_malloc_r+0x28>
 800bfb4:	230c      	movs	r3, #12
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	2600      	movs	r6, #0
 800bfba:	4630      	mov	r0, r6
 800bfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc0:	4e2e      	ldr	r6, [pc, #184]	; (800c07c <_malloc_r+0xe4>)
 800bfc2:	f000 fda5 	bl	800cb10 <__malloc_lock>
 800bfc6:	6833      	ldr	r3, [r6, #0]
 800bfc8:	461c      	mov	r4, r3
 800bfca:	bb34      	cbnz	r4, 800c01a <_malloc_r+0x82>
 800bfcc:	4629      	mov	r1, r5
 800bfce:	4638      	mov	r0, r7
 800bfd0:	f7ff ffc2 	bl	800bf58 <sbrk_aligned>
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	d14d      	bne.n	800c076 <_malloc_r+0xde>
 800bfda:	6834      	ldr	r4, [r6, #0]
 800bfdc:	4626      	mov	r6, r4
 800bfde:	2e00      	cmp	r6, #0
 800bfe0:	d140      	bne.n	800c064 <_malloc_r+0xcc>
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	4631      	mov	r1, r6
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	eb04 0803 	add.w	r8, r4, r3
 800bfec:	f000 f9ac 	bl	800c348 <_sbrk_r>
 800bff0:	4580      	cmp	r8, r0
 800bff2:	d13a      	bne.n	800c06a <_malloc_r+0xd2>
 800bff4:	6821      	ldr	r1, [r4, #0]
 800bff6:	3503      	adds	r5, #3
 800bff8:	1a6d      	subs	r5, r5, r1
 800bffa:	f025 0503 	bic.w	r5, r5, #3
 800bffe:	3508      	adds	r5, #8
 800c000:	2d0c      	cmp	r5, #12
 800c002:	bf38      	it	cc
 800c004:	250c      	movcc	r5, #12
 800c006:	4629      	mov	r1, r5
 800c008:	4638      	mov	r0, r7
 800c00a:	f7ff ffa5 	bl	800bf58 <sbrk_aligned>
 800c00e:	3001      	adds	r0, #1
 800c010:	d02b      	beq.n	800c06a <_malloc_r+0xd2>
 800c012:	6823      	ldr	r3, [r4, #0]
 800c014:	442b      	add	r3, r5
 800c016:	6023      	str	r3, [r4, #0]
 800c018:	e00e      	b.n	800c038 <_malloc_r+0xa0>
 800c01a:	6822      	ldr	r2, [r4, #0]
 800c01c:	1b52      	subs	r2, r2, r5
 800c01e:	d41e      	bmi.n	800c05e <_malloc_r+0xc6>
 800c020:	2a0b      	cmp	r2, #11
 800c022:	d916      	bls.n	800c052 <_malloc_r+0xba>
 800c024:	1961      	adds	r1, r4, r5
 800c026:	42a3      	cmp	r3, r4
 800c028:	6025      	str	r5, [r4, #0]
 800c02a:	bf18      	it	ne
 800c02c:	6059      	strne	r1, [r3, #4]
 800c02e:	6863      	ldr	r3, [r4, #4]
 800c030:	bf08      	it	eq
 800c032:	6031      	streq	r1, [r6, #0]
 800c034:	5162      	str	r2, [r4, r5]
 800c036:	604b      	str	r3, [r1, #4]
 800c038:	4638      	mov	r0, r7
 800c03a:	f104 060b 	add.w	r6, r4, #11
 800c03e:	f000 fd6d 	bl	800cb1c <__malloc_unlock>
 800c042:	f026 0607 	bic.w	r6, r6, #7
 800c046:	1d23      	adds	r3, r4, #4
 800c048:	1af2      	subs	r2, r6, r3
 800c04a:	d0b6      	beq.n	800bfba <_malloc_r+0x22>
 800c04c:	1b9b      	subs	r3, r3, r6
 800c04e:	50a3      	str	r3, [r4, r2]
 800c050:	e7b3      	b.n	800bfba <_malloc_r+0x22>
 800c052:	6862      	ldr	r2, [r4, #4]
 800c054:	42a3      	cmp	r3, r4
 800c056:	bf0c      	ite	eq
 800c058:	6032      	streq	r2, [r6, #0]
 800c05a:	605a      	strne	r2, [r3, #4]
 800c05c:	e7ec      	b.n	800c038 <_malloc_r+0xa0>
 800c05e:	4623      	mov	r3, r4
 800c060:	6864      	ldr	r4, [r4, #4]
 800c062:	e7b2      	b.n	800bfca <_malloc_r+0x32>
 800c064:	4634      	mov	r4, r6
 800c066:	6876      	ldr	r6, [r6, #4]
 800c068:	e7b9      	b.n	800bfde <_malloc_r+0x46>
 800c06a:	230c      	movs	r3, #12
 800c06c:	603b      	str	r3, [r7, #0]
 800c06e:	4638      	mov	r0, r7
 800c070:	f000 fd54 	bl	800cb1c <__malloc_unlock>
 800c074:	e7a1      	b.n	800bfba <_malloc_r+0x22>
 800c076:	6025      	str	r5, [r4, #0]
 800c078:	e7de      	b.n	800c038 <_malloc_r+0xa0>
 800c07a:	bf00      	nop
 800c07c:	20005578 	.word	0x20005578

0800c080 <iprintf>:
 800c080:	b40f      	push	{r0, r1, r2, r3}
 800c082:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <iprintf+0x2c>)
 800c084:	b513      	push	{r0, r1, r4, lr}
 800c086:	681c      	ldr	r4, [r3, #0]
 800c088:	b124      	cbz	r4, 800c094 <iprintf+0x14>
 800c08a:	69a3      	ldr	r3, [r4, #24]
 800c08c:	b913      	cbnz	r3, 800c094 <iprintf+0x14>
 800c08e:	4620      	mov	r0, r4
 800c090:	f7ff fe86 	bl	800bda0 <__sinit>
 800c094:	ab05      	add	r3, sp, #20
 800c096:	9a04      	ldr	r2, [sp, #16]
 800c098:	68a1      	ldr	r1, [r4, #8]
 800c09a:	9301      	str	r3, [sp, #4]
 800c09c:	4620      	mov	r0, r4
 800c09e:	f001 f8e7 	bl	800d270 <_vfiprintf_r>
 800c0a2:	b002      	add	sp, #8
 800c0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0a8:	b004      	add	sp, #16
 800c0aa:	4770      	bx	lr
 800c0ac:	200000a4 	.word	0x200000a4

0800c0b0 <_puts_r>:
 800c0b0:	b570      	push	{r4, r5, r6, lr}
 800c0b2:	460e      	mov	r6, r1
 800c0b4:	4605      	mov	r5, r0
 800c0b6:	b118      	cbz	r0, 800c0c0 <_puts_r+0x10>
 800c0b8:	6983      	ldr	r3, [r0, #24]
 800c0ba:	b90b      	cbnz	r3, 800c0c0 <_puts_r+0x10>
 800c0bc:	f7ff fe70 	bl	800bda0 <__sinit>
 800c0c0:	69ab      	ldr	r3, [r5, #24]
 800c0c2:	68ac      	ldr	r4, [r5, #8]
 800c0c4:	b913      	cbnz	r3, 800c0cc <_puts_r+0x1c>
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f7ff fe6a 	bl	800bda0 <__sinit>
 800c0cc:	4b2c      	ldr	r3, [pc, #176]	; (800c180 <_puts_r+0xd0>)
 800c0ce:	429c      	cmp	r4, r3
 800c0d0:	d120      	bne.n	800c114 <_puts_r+0x64>
 800c0d2:	686c      	ldr	r4, [r5, #4]
 800c0d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0d6:	07db      	lsls	r3, r3, #31
 800c0d8:	d405      	bmi.n	800c0e6 <_puts_r+0x36>
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	0598      	lsls	r0, r3, #22
 800c0de:	d402      	bmi.n	800c0e6 <_puts_r+0x36>
 800c0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0e2:	f7ff ff20 	bl	800bf26 <__retarget_lock_acquire_recursive>
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	0719      	lsls	r1, r3, #28
 800c0ea:	d51d      	bpl.n	800c128 <_puts_r+0x78>
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	b1db      	cbz	r3, 800c128 <_puts_r+0x78>
 800c0f0:	3e01      	subs	r6, #1
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	60a3      	str	r3, [r4, #8]
 800c0fc:	bb39      	cbnz	r1, 800c14e <_puts_r+0x9e>
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	da38      	bge.n	800c174 <_puts_r+0xc4>
 800c102:	4622      	mov	r2, r4
 800c104:	210a      	movs	r1, #10
 800c106:	4628      	mov	r0, r5
 800c108:	f000 faae 	bl	800c668 <__swbuf_r>
 800c10c:	3001      	adds	r0, #1
 800c10e:	d011      	beq.n	800c134 <_puts_r+0x84>
 800c110:	250a      	movs	r5, #10
 800c112:	e011      	b.n	800c138 <_puts_r+0x88>
 800c114:	4b1b      	ldr	r3, [pc, #108]	; (800c184 <_puts_r+0xd4>)
 800c116:	429c      	cmp	r4, r3
 800c118:	d101      	bne.n	800c11e <_puts_r+0x6e>
 800c11a:	68ac      	ldr	r4, [r5, #8]
 800c11c:	e7da      	b.n	800c0d4 <_puts_r+0x24>
 800c11e:	4b1a      	ldr	r3, [pc, #104]	; (800c188 <_puts_r+0xd8>)
 800c120:	429c      	cmp	r4, r3
 800c122:	bf08      	it	eq
 800c124:	68ec      	ldreq	r4, [r5, #12]
 800c126:	e7d5      	b.n	800c0d4 <_puts_r+0x24>
 800c128:	4621      	mov	r1, r4
 800c12a:	4628      	mov	r0, r5
 800c12c:	f000 fb00 	bl	800c730 <__swsetup_r>
 800c130:	2800      	cmp	r0, #0
 800c132:	d0dd      	beq.n	800c0f0 <_puts_r+0x40>
 800c134:	f04f 35ff 	mov.w	r5, #4294967295
 800c138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c13a:	07da      	lsls	r2, r3, #31
 800c13c:	d405      	bmi.n	800c14a <_puts_r+0x9a>
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	059b      	lsls	r3, r3, #22
 800c142:	d402      	bmi.n	800c14a <_puts_r+0x9a>
 800c144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c146:	f7ff feef 	bl	800bf28 <__retarget_lock_release_recursive>
 800c14a:	4628      	mov	r0, r5
 800c14c:	bd70      	pop	{r4, r5, r6, pc}
 800c14e:	2b00      	cmp	r3, #0
 800c150:	da04      	bge.n	800c15c <_puts_r+0xac>
 800c152:	69a2      	ldr	r2, [r4, #24]
 800c154:	429a      	cmp	r2, r3
 800c156:	dc06      	bgt.n	800c166 <_puts_r+0xb6>
 800c158:	290a      	cmp	r1, #10
 800c15a:	d004      	beq.n	800c166 <_puts_r+0xb6>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	6022      	str	r2, [r4, #0]
 800c162:	7019      	strb	r1, [r3, #0]
 800c164:	e7c5      	b.n	800c0f2 <_puts_r+0x42>
 800c166:	4622      	mov	r2, r4
 800c168:	4628      	mov	r0, r5
 800c16a:	f000 fa7d 	bl	800c668 <__swbuf_r>
 800c16e:	3001      	adds	r0, #1
 800c170:	d1bf      	bne.n	800c0f2 <_puts_r+0x42>
 800c172:	e7df      	b.n	800c134 <_puts_r+0x84>
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	250a      	movs	r5, #10
 800c178:	1c5a      	adds	r2, r3, #1
 800c17a:	6022      	str	r2, [r4, #0]
 800c17c:	701d      	strb	r5, [r3, #0]
 800c17e:	e7db      	b.n	800c138 <_puts_r+0x88>
 800c180:	0800f170 	.word	0x0800f170
 800c184:	0800f190 	.word	0x0800f190
 800c188:	0800f150 	.word	0x0800f150

0800c18c <puts>:
 800c18c:	4b02      	ldr	r3, [pc, #8]	; (800c198 <puts+0xc>)
 800c18e:	4601      	mov	r1, r0
 800c190:	6818      	ldr	r0, [r3, #0]
 800c192:	f7ff bf8d 	b.w	800c0b0 <_puts_r>
 800c196:	bf00      	nop
 800c198:	200000a4 	.word	0x200000a4

0800c19c <srand>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	4b10      	ldr	r3, [pc, #64]	; (800c1e0 <srand+0x44>)
 800c1a0:	681d      	ldr	r5, [r3, #0]
 800c1a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	b9b3      	cbnz	r3, 800c1d6 <srand+0x3a>
 800c1a8:	2018      	movs	r0, #24
 800c1aa:	f000 fca9 	bl	800cb00 <malloc>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	63a8      	str	r0, [r5, #56]	; 0x38
 800c1b2:	b920      	cbnz	r0, 800c1be <srand+0x22>
 800c1b4:	4b0b      	ldr	r3, [pc, #44]	; (800c1e4 <srand+0x48>)
 800c1b6:	480c      	ldr	r0, [pc, #48]	; (800c1e8 <srand+0x4c>)
 800c1b8:	2142      	movs	r1, #66	; 0x42
 800c1ba:	f000 fb27 	bl	800c80c <__assert_func>
 800c1be:	490b      	ldr	r1, [pc, #44]	; (800c1ec <srand+0x50>)
 800c1c0:	4b0b      	ldr	r3, [pc, #44]	; (800c1f0 <srand+0x54>)
 800c1c2:	e9c0 1300 	strd	r1, r3, [r0]
 800c1c6:	4b0b      	ldr	r3, [pc, #44]	; (800c1f4 <srand+0x58>)
 800c1c8:	6083      	str	r3, [r0, #8]
 800c1ca:	230b      	movs	r3, #11
 800c1cc:	8183      	strh	r3, [r0, #12]
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	2001      	movs	r0, #1
 800c1d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c1d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c1d8:	2200      	movs	r2, #0
 800c1da:	611c      	str	r4, [r3, #16]
 800c1dc:	615a      	str	r2, [r3, #20]
 800c1de:	bd38      	pop	{r3, r4, r5, pc}
 800c1e0:	200000a4 	.word	0x200000a4
 800c1e4:	0800f1b4 	.word	0x0800f1b4
 800c1e8:	0800f1cb 	.word	0x0800f1cb
 800c1ec:	abcd330e 	.word	0xabcd330e
 800c1f0:	e66d1234 	.word	0xe66d1234
 800c1f4:	0005deec 	.word	0x0005deec

0800c1f8 <rand>:
 800c1f8:	4b16      	ldr	r3, [pc, #88]	; (800c254 <rand+0x5c>)
 800c1fa:	b510      	push	{r4, lr}
 800c1fc:	681c      	ldr	r4, [r3, #0]
 800c1fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c200:	b9b3      	cbnz	r3, 800c230 <rand+0x38>
 800c202:	2018      	movs	r0, #24
 800c204:	f000 fc7c 	bl	800cb00 <malloc>
 800c208:	63a0      	str	r0, [r4, #56]	; 0x38
 800c20a:	b928      	cbnz	r0, 800c218 <rand+0x20>
 800c20c:	4602      	mov	r2, r0
 800c20e:	4b12      	ldr	r3, [pc, #72]	; (800c258 <rand+0x60>)
 800c210:	4812      	ldr	r0, [pc, #72]	; (800c25c <rand+0x64>)
 800c212:	214e      	movs	r1, #78	; 0x4e
 800c214:	f000 fafa 	bl	800c80c <__assert_func>
 800c218:	4a11      	ldr	r2, [pc, #68]	; (800c260 <rand+0x68>)
 800c21a:	4b12      	ldr	r3, [pc, #72]	; (800c264 <rand+0x6c>)
 800c21c:	e9c0 2300 	strd	r2, r3, [r0]
 800c220:	4b11      	ldr	r3, [pc, #68]	; (800c268 <rand+0x70>)
 800c222:	6083      	str	r3, [r0, #8]
 800c224:	230b      	movs	r3, #11
 800c226:	8183      	strh	r3, [r0, #12]
 800c228:	2201      	movs	r2, #1
 800c22a:	2300      	movs	r3, #0
 800c22c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c230:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800c232:	4a0e      	ldr	r2, [pc, #56]	; (800c26c <rand+0x74>)
 800c234:	6920      	ldr	r0, [r4, #16]
 800c236:	6963      	ldr	r3, [r4, #20]
 800c238:	490d      	ldr	r1, [pc, #52]	; (800c270 <rand+0x78>)
 800c23a:	4342      	muls	r2, r0
 800c23c:	fb01 2203 	mla	r2, r1, r3, r2
 800c240:	fba0 0101 	umull	r0, r1, r0, r1
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	eb42 0001 	adc.w	r0, r2, r1
 800c24a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800c24e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c252:	bd10      	pop	{r4, pc}
 800c254:	200000a4 	.word	0x200000a4
 800c258:	0800f1b4 	.word	0x0800f1b4
 800c25c:	0800f1cb 	.word	0x0800f1cb
 800c260:	abcd330e 	.word	0xabcd330e
 800c264:	e66d1234 	.word	0xe66d1234
 800c268:	0005deec 	.word	0x0005deec
 800c26c:	5851f42d 	.word	0x5851f42d
 800c270:	4c957f2d 	.word	0x4c957f2d

0800c274 <cleanup_glue>:
 800c274:	b538      	push	{r3, r4, r5, lr}
 800c276:	460c      	mov	r4, r1
 800c278:	6809      	ldr	r1, [r1, #0]
 800c27a:	4605      	mov	r5, r0
 800c27c:	b109      	cbz	r1, 800c282 <cleanup_glue+0xe>
 800c27e:	f7ff fff9 	bl	800c274 <cleanup_glue>
 800c282:	4621      	mov	r1, r4
 800c284:	4628      	mov	r0, r5
 800c286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c28a:	f000 bc4d 	b.w	800cb28 <_free_r>
	...

0800c290 <_reclaim_reent>:
 800c290:	4b2c      	ldr	r3, [pc, #176]	; (800c344 <_reclaim_reent+0xb4>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4283      	cmp	r3, r0
 800c296:	b570      	push	{r4, r5, r6, lr}
 800c298:	4604      	mov	r4, r0
 800c29a:	d051      	beq.n	800c340 <_reclaim_reent+0xb0>
 800c29c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c29e:	b143      	cbz	r3, 800c2b2 <_reclaim_reent+0x22>
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d14a      	bne.n	800c33c <_reclaim_reent+0xac>
 800c2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2a8:	6819      	ldr	r1, [r3, #0]
 800c2aa:	b111      	cbz	r1, 800c2b2 <_reclaim_reent+0x22>
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f000 fc3b 	bl	800cb28 <_free_r>
 800c2b2:	6961      	ldr	r1, [r4, #20]
 800c2b4:	b111      	cbz	r1, 800c2bc <_reclaim_reent+0x2c>
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f000 fc36 	bl	800cb28 <_free_r>
 800c2bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c2be:	b111      	cbz	r1, 800c2c6 <_reclaim_reent+0x36>
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 fc31 	bl	800cb28 <_free_r>
 800c2c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c2c8:	b111      	cbz	r1, 800c2d0 <_reclaim_reent+0x40>
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 fc2c 	bl	800cb28 <_free_r>
 800c2d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c2d2:	b111      	cbz	r1, 800c2da <_reclaim_reent+0x4a>
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f000 fc27 	bl	800cb28 <_free_r>
 800c2da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c2dc:	b111      	cbz	r1, 800c2e4 <_reclaim_reent+0x54>
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f000 fc22 	bl	800cb28 <_free_r>
 800c2e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c2e6:	b111      	cbz	r1, 800c2ee <_reclaim_reent+0x5e>
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f000 fc1d 	bl	800cb28 <_free_r>
 800c2ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c2f0:	b111      	cbz	r1, 800c2f8 <_reclaim_reent+0x68>
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f000 fc18 	bl	800cb28 <_free_r>
 800c2f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2fa:	b111      	cbz	r1, 800c302 <_reclaim_reent+0x72>
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f000 fc13 	bl	800cb28 <_free_r>
 800c302:	69a3      	ldr	r3, [r4, #24]
 800c304:	b1e3      	cbz	r3, 800c340 <_reclaim_reent+0xb0>
 800c306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c308:	4620      	mov	r0, r4
 800c30a:	4798      	blx	r3
 800c30c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c30e:	b1b9      	cbz	r1, 800c340 <_reclaim_reent+0xb0>
 800c310:	4620      	mov	r0, r4
 800c312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c316:	f7ff bfad 	b.w	800c274 <cleanup_glue>
 800c31a:	5949      	ldr	r1, [r1, r5]
 800c31c:	b941      	cbnz	r1, 800c330 <_reclaim_reent+0xa0>
 800c31e:	3504      	adds	r5, #4
 800c320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c322:	2d80      	cmp	r5, #128	; 0x80
 800c324:	68d9      	ldr	r1, [r3, #12]
 800c326:	d1f8      	bne.n	800c31a <_reclaim_reent+0x8a>
 800c328:	4620      	mov	r0, r4
 800c32a:	f000 fbfd 	bl	800cb28 <_free_r>
 800c32e:	e7ba      	b.n	800c2a6 <_reclaim_reent+0x16>
 800c330:	680e      	ldr	r6, [r1, #0]
 800c332:	4620      	mov	r0, r4
 800c334:	f000 fbf8 	bl	800cb28 <_free_r>
 800c338:	4631      	mov	r1, r6
 800c33a:	e7ef      	b.n	800c31c <_reclaim_reent+0x8c>
 800c33c:	2500      	movs	r5, #0
 800c33e:	e7ef      	b.n	800c320 <_reclaim_reent+0x90>
 800c340:	bd70      	pop	{r4, r5, r6, pc}
 800c342:	bf00      	nop
 800c344:	200000a4 	.word	0x200000a4

0800c348 <_sbrk_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	4d06      	ldr	r5, [pc, #24]	; (800c364 <_sbrk_r+0x1c>)
 800c34c:	2300      	movs	r3, #0
 800c34e:	4604      	mov	r4, r0
 800c350:	4608      	mov	r0, r1
 800c352:	602b      	str	r3, [r5, #0]
 800c354:	f7f7 fdec 	bl	8003f30 <_sbrk>
 800c358:	1c43      	adds	r3, r0, #1
 800c35a:	d102      	bne.n	800c362 <_sbrk_r+0x1a>
 800c35c:	682b      	ldr	r3, [r5, #0]
 800c35e:	b103      	cbz	r3, 800c362 <_sbrk_r+0x1a>
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	bd38      	pop	{r3, r4, r5, pc}
 800c364:	20005580 	.word	0x20005580

0800c368 <sniprintf>:
 800c368:	b40c      	push	{r2, r3}
 800c36a:	b530      	push	{r4, r5, lr}
 800c36c:	4b17      	ldr	r3, [pc, #92]	; (800c3cc <sniprintf+0x64>)
 800c36e:	1e0c      	subs	r4, r1, #0
 800c370:	681d      	ldr	r5, [r3, #0]
 800c372:	b09d      	sub	sp, #116	; 0x74
 800c374:	da08      	bge.n	800c388 <sniprintf+0x20>
 800c376:	238b      	movs	r3, #139	; 0x8b
 800c378:	602b      	str	r3, [r5, #0]
 800c37a:	f04f 30ff 	mov.w	r0, #4294967295
 800c37e:	b01d      	add	sp, #116	; 0x74
 800c380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c384:	b002      	add	sp, #8
 800c386:	4770      	bx	lr
 800c388:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c38c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c390:	bf14      	ite	ne
 800c392:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c396:	4623      	moveq	r3, r4
 800c398:	9304      	str	r3, [sp, #16]
 800c39a:	9307      	str	r3, [sp, #28]
 800c39c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3a0:	9002      	str	r0, [sp, #8]
 800c3a2:	9006      	str	r0, [sp, #24]
 800c3a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c3a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c3aa:	ab21      	add	r3, sp, #132	; 0x84
 800c3ac:	a902      	add	r1, sp, #8
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	9301      	str	r3, [sp, #4]
 800c3b2:	f000 fc61 	bl	800cc78 <_svfiprintf_r>
 800c3b6:	1c43      	adds	r3, r0, #1
 800c3b8:	bfbc      	itt	lt
 800c3ba:	238b      	movlt	r3, #139	; 0x8b
 800c3bc:	602b      	strlt	r3, [r5, #0]
 800c3be:	2c00      	cmp	r4, #0
 800c3c0:	d0dd      	beq.n	800c37e <sniprintf+0x16>
 800c3c2:	9b02      	ldr	r3, [sp, #8]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	701a      	strb	r2, [r3, #0]
 800c3c8:	e7d9      	b.n	800c37e <sniprintf+0x16>
 800c3ca:	bf00      	nop
 800c3cc:	200000a4 	.word	0x200000a4

0800c3d0 <siprintf>:
 800c3d0:	b40e      	push	{r1, r2, r3}
 800c3d2:	b500      	push	{lr}
 800c3d4:	b09c      	sub	sp, #112	; 0x70
 800c3d6:	ab1d      	add	r3, sp, #116	; 0x74
 800c3d8:	9002      	str	r0, [sp, #8]
 800c3da:	9006      	str	r0, [sp, #24]
 800c3dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c3e0:	4809      	ldr	r0, [pc, #36]	; (800c408 <siprintf+0x38>)
 800c3e2:	9107      	str	r1, [sp, #28]
 800c3e4:	9104      	str	r1, [sp, #16]
 800c3e6:	4909      	ldr	r1, [pc, #36]	; (800c40c <siprintf+0x3c>)
 800c3e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ec:	9105      	str	r1, [sp, #20]
 800c3ee:	6800      	ldr	r0, [r0, #0]
 800c3f0:	9301      	str	r3, [sp, #4]
 800c3f2:	a902      	add	r1, sp, #8
 800c3f4:	f000 fc40 	bl	800cc78 <_svfiprintf_r>
 800c3f8:	9b02      	ldr	r3, [sp, #8]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	701a      	strb	r2, [r3, #0]
 800c3fe:	b01c      	add	sp, #112	; 0x70
 800c400:	f85d eb04 	ldr.w	lr, [sp], #4
 800c404:	b003      	add	sp, #12
 800c406:	4770      	bx	lr
 800c408:	200000a4 	.word	0x200000a4
 800c40c:	ffff0208 	.word	0xffff0208

0800c410 <siscanf>:
 800c410:	b40e      	push	{r1, r2, r3}
 800c412:	b510      	push	{r4, lr}
 800c414:	b09f      	sub	sp, #124	; 0x7c
 800c416:	ac21      	add	r4, sp, #132	; 0x84
 800c418:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c41c:	f854 2b04 	ldr.w	r2, [r4], #4
 800c420:	9201      	str	r2, [sp, #4]
 800c422:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c426:	9004      	str	r0, [sp, #16]
 800c428:	9008      	str	r0, [sp, #32]
 800c42a:	f7f5 fd19 	bl	8001e60 <strlen>
 800c42e:	4b0c      	ldr	r3, [pc, #48]	; (800c460 <siscanf+0x50>)
 800c430:	9005      	str	r0, [sp, #20]
 800c432:	9009      	str	r0, [sp, #36]	; 0x24
 800c434:	930d      	str	r3, [sp, #52]	; 0x34
 800c436:	480b      	ldr	r0, [pc, #44]	; (800c464 <siscanf+0x54>)
 800c438:	9a01      	ldr	r2, [sp, #4]
 800c43a:	6800      	ldr	r0, [r0, #0]
 800c43c:	9403      	str	r4, [sp, #12]
 800c43e:	2300      	movs	r3, #0
 800c440:	9311      	str	r3, [sp, #68]	; 0x44
 800c442:	9316      	str	r3, [sp, #88]	; 0x58
 800c444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c448:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c44c:	a904      	add	r1, sp, #16
 800c44e:	4623      	mov	r3, r4
 800c450:	f000 fd6c 	bl	800cf2c <__ssvfiscanf_r>
 800c454:	b01f      	add	sp, #124	; 0x7c
 800c456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c45a:	b003      	add	sp, #12
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	0800c48b 	.word	0x0800c48b
 800c464:	200000a4 	.word	0x200000a4

0800c468 <__sread>:
 800c468:	b510      	push	{r4, lr}
 800c46a:	460c      	mov	r4, r1
 800c46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c470:	f001 fb14 	bl	800da9c <_read_r>
 800c474:	2800      	cmp	r0, #0
 800c476:	bfab      	itete	ge
 800c478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c47a:	89a3      	ldrhlt	r3, [r4, #12]
 800c47c:	181b      	addge	r3, r3, r0
 800c47e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c482:	bfac      	ite	ge
 800c484:	6563      	strge	r3, [r4, #84]	; 0x54
 800c486:	81a3      	strhlt	r3, [r4, #12]
 800c488:	bd10      	pop	{r4, pc}

0800c48a <__seofread>:
 800c48a:	2000      	movs	r0, #0
 800c48c:	4770      	bx	lr

0800c48e <__swrite>:
 800c48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c492:	461f      	mov	r7, r3
 800c494:	898b      	ldrh	r3, [r1, #12]
 800c496:	05db      	lsls	r3, r3, #23
 800c498:	4605      	mov	r5, r0
 800c49a:	460c      	mov	r4, r1
 800c49c:	4616      	mov	r6, r2
 800c49e:	d505      	bpl.n	800c4ac <__swrite+0x1e>
 800c4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a4:	2302      	movs	r3, #2
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f000 fab2 	bl	800ca10 <_lseek_r>
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4b6:	81a3      	strh	r3, [r4, #12]
 800c4b8:	4632      	mov	r2, r6
 800c4ba:	463b      	mov	r3, r7
 800c4bc:	4628      	mov	r0, r5
 800c4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c2:	f000 b923 	b.w	800c70c <_write_r>

0800c4c6 <__sseek>:
 800c4c6:	b510      	push	{r4, lr}
 800c4c8:	460c      	mov	r4, r1
 800c4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ce:	f000 fa9f 	bl	800ca10 <_lseek_r>
 800c4d2:	1c43      	adds	r3, r0, #1
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	bf15      	itete	ne
 800c4d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4e2:	81a3      	strheq	r3, [r4, #12]
 800c4e4:	bf18      	it	ne
 800c4e6:	81a3      	strhne	r3, [r4, #12]
 800c4e8:	bd10      	pop	{r4, pc}

0800c4ea <__sclose>:
 800c4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ee:	f000 b9ab 	b.w	800c848 <_close_r>
	...

0800c4f4 <strcasecmp>:
 800c4f4:	b530      	push	{r4, r5, lr}
 800c4f6:	4d0b      	ldr	r5, [pc, #44]	; (800c524 <strcasecmp+0x30>)
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4fe:	5d5a      	ldrb	r2, [r3, r5]
 800c500:	f002 0203 	and.w	r2, r2, #3
 800c504:	2a01      	cmp	r2, #1
 800c506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c50a:	5ca8      	ldrb	r0, [r5, r2]
 800c50c:	f000 0003 	and.w	r0, r0, #3
 800c510:	bf08      	it	eq
 800c512:	3320      	addeq	r3, #32
 800c514:	2801      	cmp	r0, #1
 800c516:	bf08      	it	eq
 800c518:	3220      	addeq	r2, #32
 800c51a:	1a98      	subs	r0, r3, r2
 800c51c:	d101      	bne.n	800c522 <strcasecmp+0x2e>
 800c51e:	2a00      	cmp	r2, #0
 800c520:	d1eb      	bne.n	800c4fa <strcasecmp+0x6>
 800c522:	bd30      	pop	{r4, r5, pc}
 800c524:	0800f263 	.word	0x0800f263

0800c528 <strcpy>:
 800c528:	4603      	mov	r3, r0
 800c52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c52e:	f803 2b01 	strb.w	r2, [r3], #1
 800c532:	2a00      	cmp	r2, #0
 800c534:	d1f9      	bne.n	800c52a <strcpy+0x2>
 800c536:	4770      	bx	lr

0800c538 <strncasecmp>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	4e0f      	ldr	r6, [pc, #60]	; (800c578 <strncasecmp+0x40>)
 800c53c:	4604      	mov	r4, r0
 800c53e:	440a      	add	r2, r1
 800c540:	428a      	cmp	r2, r1
 800c542:	d101      	bne.n	800c548 <strncasecmp+0x10>
 800c544:	2000      	movs	r0, #0
 800c546:	e013      	b.n	800c570 <strncasecmp+0x38>
 800c548:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c54c:	5d98      	ldrb	r0, [r3, r6]
 800c54e:	f000 0003 	and.w	r0, r0, #3
 800c552:	2801      	cmp	r0, #1
 800c554:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c558:	5c35      	ldrb	r5, [r6, r0]
 800c55a:	f005 0503 	and.w	r5, r5, #3
 800c55e:	bf08      	it	eq
 800c560:	3320      	addeq	r3, #32
 800c562:	2d01      	cmp	r5, #1
 800c564:	bf08      	it	eq
 800c566:	3020      	addeq	r0, #32
 800c568:	1a1b      	subs	r3, r3, r0
 800c56a:	d102      	bne.n	800c572 <strncasecmp+0x3a>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d1e7      	bne.n	800c540 <strncasecmp+0x8>
 800c570:	bd70      	pop	{r4, r5, r6, pc}
 800c572:	4618      	mov	r0, r3
 800c574:	e7fc      	b.n	800c570 <strncasecmp+0x38>
 800c576:	bf00      	nop
 800c578:	0800f263 	.word	0x0800f263

0800c57c <strncat>:
 800c57c:	b530      	push	{r4, r5, lr}
 800c57e:	4604      	mov	r4, r0
 800c580:	7825      	ldrb	r5, [r4, #0]
 800c582:	4623      	mov	r3, r4
 800c584:	3401      	adds	r4, #1
 800c586:	2d00      	cmp	r5, #0
 800c588:	d1fa      	bne.n	800c580 <strncat+0x4>
 800c58a:	3a01      	subs	r2, #1
 800c58c:	d304      	bcc.n	800c598 <strncat+0x1c>
 800c58e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c592:	f803 4b01 	strb.w	r4, [r3], #1
 800c596:	b904      	cbnz	r4, 800c59a <strncat+0x1e>
 800c598:	bd30      	pop	{r4, r5, pc}
 800c59a:	2a00      	cmp	r2, #0
 800c59c:	d1f5      	bne.n	800c58a <strncat+0xe>
 800c59e:	701a      	strb	r2, [r3, #0]
 800c5a0:	e7f3      	b.n	800c58a <strncat+0xe>

0800c5a2 <strncpy>:
 800c5a2:	b510      	push	{r4, lr}
 800c5a4:	3901      	subs	r1, #1
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	b132      	cbz	r2, 800c5b8 <strncpy+0x16>
 800c5aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c5ae:	f803 4b01 	strb.w	r4, [r3], #1
 800c5b2:	3a01      	subs	r2, #1
 800c5b4:	2c00      	cmp	r4, #0
 800c5b6:	d1f7      	bne.n	800c5a8 <strncpy+0x6>
 800c5b8:	441a      	add	r2, r3
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d100      	bne.n	800c5c2 <strncpy+0x20>
 800c5c0:	bd10      	pop	{r4, pc}
 800c5c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c5c6:	e7f9      	b.n	800c5bc <strncpy+0x1a>

0800c5c8 <strnlen>:
 800c5c8:	b510      	push	{r4, lr}
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	4401      	add	r1, r0
 800c5ce:	428a      	cmp	r2, r1
 800c5d0:	4613      	mov	r3, r2
 800c5d2:	d003      	beq.n	800c5dc <strnlen+0x14>
 800c5d4:	781c      	ldrb	r4, [r3, #0]
 800c5d6:	3201      	adds	r2, #1
 800c5d8:	2c00      	cmp	r4, #0
 800c5da:	d1f8      	bne.n	800c5ce <strnlen+0x6>
 800c5dc:	1a18      	subs	r0, r3, r0
 800c5de:	bd10      	pop	{r4, pc}

0800c5e0 <__strtok_r>:
 800c5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5e2:	b908      	cbnz	r0, 800c5e8 <__strtok_r+0x8>
 800c5e4:	6810      	ldr	r0, [r2, #0]
 800c5e6:	b188      	cbz	r0, 800c60c <__strtok_r+0x2c>
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c5f0:	460f      	mov	r7, r1
 800c5f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c5f6:	b91e      	cbnz	r6, 800c600 <__strtok_r+0x20>
 800c5f8:	b965      	cbnz	r5, 800c614 <__strtok_r+0x34>
 800c5fa:	6015      	str	r5, [r2, #0]
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	e005      	b.n	800c60c <__strtok_r+0x2c>
 800c600:	42b5      	cmp	r5, r6
 800c602:	d1f6      	bne.n	800c5f2 <__strtok_r+0x12>
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1f0      	bne.n	800c5ea <__strtok_r+0xa>
 800c608:	6014      	str	r4, [r2, #0]
 800c60a:	7003      	strb	r3, [r0, #0]
 800c60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c60e:	461c      	mov	r4, r3
 800c610:	e00c      	b.n	800c62c <__strtok_r+0x4c>
 800c612:	b915      	cbnz	r5, 800c61a <__strtok_r+0x3a>
 800c614:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c618:	460e      	mov	r6, r1
 800c61a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c61e:	42ab      	cmp	r3, r5
 800c620:	d1f7      	bne.n	800c612 <__strtok_r+0x32>
 800c622:	2b00      	cmp	r3, #0
 800c624:	d0f3      	beq.n	800c60e <__strtok_r+0x2e>
 800c626:	2300      	movs	r3, #0
 800c628:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c62c:	6014      	str	r4, [r2, #0]
 800c62e:	e7ed      	b.n	800c60c <__strtok_r+0x2c>

0800c630 <strtok_r>:
 800c630:	2301      	movs	r3, #1
 800c632:	f7ff bfd5 	b.w	800c5e0 <__strtok_r>
	...

0800c638 <viprintf>:
 800c638:	b513      	push	{r0, r1, r4, lr}
 800c63a:	460b      	mov	r3, r1
 800c63c:	4909      	ldr	r1, [pc, #36]	; (800c664 <viprintf+0x2c>)
 800c63e:	680c      	ldr	r4, [r1, #0]
 800c640:	4602      	mov	r2, r0
 800c642:	b144      	cbz	r4, 800c656 <viprintf+0x1e>
 800c644:	69a1      	ldr	r1, [r4, #24]
 800c646:	b931      	cbnz	r1, 800c656 <viprintf+0x1e>
 800c648:	e9cd 0300 	strd	r0, r3, [sp]
 800c64c:	4620      	mov	r0, r4
 800c64e:	f7ff fba7 	bl	800bda0 <__sinit>
 800c652:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c656:	68a1      	ldr	r1, [r4, #8]
 800c658:	4620      	mov	r0, r4
 800c65a:	b002      	add	sp, #8
 800c65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c660:	f000 be06 	b.w	800d270 <_vfiprintf_r>
 800c664:	200000a4 	.word	0x200000a4

0800c668 <__swbuf_r>:
 800c668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66a:	460e      	mov	r6, r1
 800c66c:	4614      	mov	r4, r2
 800c66e:	4605      	mov	r5, r0
 800c670:	b118      	cbz	r0, 800c67a <__swbuf_r+0x12>
 800c672:	6983      	ldr	r3, [r0, #24]
 800c674:	b90b      	cbnz	r3, 800c67a <__swbuf_r+0x12>
 800c676:	f7ff fb93 	bl	800bda0 <__sinit>
 800c67a:	4b21      	ldr	r3, [pc, #132]	; (800c700 <__swbuf_r+0x98>)
 800c67c:	429c      	cmp	r4, r3
 800c67e:	d12b      	bne.n	800c6d8 <__swbuf_r+0x70>
 800c680:	686c      	ldr	r4, [r5, #4]
 800c682:	69a3      	ldr	r3, [r4, #24]
 800c684:	60a3      	str	r3, [r4, #8]
 800c686:	89a3      	ldrh	r3, [r4, #12]
 800c688:	071a      	lsls	r2, r3, #28
 800c68a:	d52f      	bpl.n	800c6ec <__swbuf_r+0x84>
 800c68c:	6923      	ldr	r3, [r4, #16]
 800c68e:	b36b      	cbz	r3, 800c6ec <__swbuf_r+0x84>
 800c690:	6923      	ldr	r3, [r4, #16]
 800c692:	6820      	ldr	r0, [r4, #0]
 800c694:	1ac0      	subs	r0, r0, r3
 800c696:	6963      	ldr	r3, [r4, #20]
 800c698:	b2f6      	uxtb	r6, r6
 800c69a:	4283      	cmp	r3, r0
 800c69c:	4637      	mov	r7, r6
 800c69e:	dc04      	bgt.n	800c6aa <__swbuf_r+0x42>
 800c6a0:	4621      	mov	r1, r4
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	f000 f966 	bl	800c974 <_fflush_r>
 800c6a8:	bb30      	cbnz	r0, 800c6f8 <__swbuf_r+0x90>
 800c6aa:	68a3      	ldr	r3, [r4, #8]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	60a3      	str	r3, [r4, #8]
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	6022      	str	r2, [r4, #0]
 800c6b6:	701e      	strb	r6, [r3, #0]
 800c6b8:	6963      	ldr	r3, [r4, #20]
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	4283      	cmp	r3, r0
 800c6be:	d004      	beq.n	800c6ca <__swbuf_r+0x62>
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	07db      	lsls	r3, r3, #31
 800c6c4:	d506      	bpl.n	800c6d4 <__swbuf_r+0x6c>
 800c6c6:	2e0a      	cmp	r6, #10
 800c6c8:	d104      	bne.n	800c6d4 <__swbuf_r+0x6c>
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	f000 f951 	bl	800c974 <_fflush_r>
 800c6d2:	b988      	cbnz	r0, 800c6f8 <__swbuf_r+0x90>
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6d8:	4b0a      	ldr	r3, [pc, #40]	; (800c704 <__swbuf_r+0x9c>)
 800c6da:	429c      	cmp	r4, r3
 800c6dc:	d101      	bne.n	800c6e2 <__swbuf_r+0x7a>
 800c6de:	68ac      	ldr	r4, [r5, #8]
 800c6e0:	e7cf      	b.n	800c682 <__swbuf_r+0x1a>
 800c6e2:	4b09      	ldr	r3, [pc, #36]	; (800c708 <__swbuf_r+0xa0>)
 800c6e4:	429c      	cmp	r4, r3
 800c6e6:	bf08      	it	eq
 800c6e8:	68ec      	ldreq	r4, [r5, #12]
 800c6ea:	e7ca      	b.n	800c682 <__swbuf_r+0x1a>
 800c6ec:	4621      	mov	r1, r4
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	f000 f81e 	bl	800c730 <__swsetup_r>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d0cb      	beq.n	800c690 <__swbuf_r+0x28>
 800c6f8:	f04f 37ff 	mov.w	r7, #4294967295
 800c6fc:	e7ea      	b.n	800c6d4 <__swbuf_r+0x6c>
 800c6fe:	bf00      	nop
 800c700:	0800f170 	.word	0x0800f170
 800c704:	0800f190 	.word	0x0800f190
 800c708:	0800f150 	.word	0x0800f150

0800c70c <_write_r>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	4d07      	ldr	r5, [pc, #28]	; (800c72c <_write_r+0x20>)
 800c710:	4604      	mov	r4, r0
 800c712:	4608      	mov	r0, r1
 800c714:	4611      	mov	r1, r2
 800c716:	2200      	movs	r2, #0
 800c718:	602a      	str	r2, [r5, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	f7f6 fcb2 	bl	8003084 <_write>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	d102      	bne.n	800c72a <_write_r+0x1e>
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	b103      	cbz	r3, 800c72a <_write_r+0x1e>
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20005580 	.word	0x20005580

0800c730 <__swsetup_r>:
 800c730:	4b32      	ldr	r3, [pc, #200]	; (800c7fc <__swsetup_r+0xcc>)
 800c732:	b570      	push	{r4, r5, r6, lr}
 800c734:	681d      	ldr	r5, [r3, #0]
 800c736:	4606      	mov	r6, r0
 800c738:	460c      	mov	r4, r1
 800c73a:	b125      	cbz	r5, 800c746 <__swsetup_r+0x16>
 800c73c:	69ab      	ldr	r3, [r5, #24]
 800c73e:	b913      	cbnz	r3, 800c746 <__swsetup_r+0x16>
 800c740:	4628      	mov	r0, r5
 800c742:	f7ff fb2d 	bl	800bda0 <__sinit>
 800c746:	4b2e      	ldr	r3, [pc, #184]	; (800c800 <__swsetup_r+0xd0>)
 800c748:	429c      	cmp	r4, r3
 800c74a:	d10f      	bne.n	800c76c <__swsetup_r+0x3c>
 800c74c:	686c      	ldr	r4, [r5, #4]
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c754:	0719      	lsls	r1, r3, #28
 800c756:	d42c      	bmi.n	800c7b2 <__swsetup_r+0x82>
 800c758:	06dd      	lsls	r5, r3, #27
 800c75a:	d411      	bmi.n	800c780 <__swsetup_r+0x50>
 800c75c:	2309      	movs	r3, #9
 800c75e:	6033      	str	r3, [r6, #0]
 800c760:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c764:	81a3      	strh	r3, [r4, #12]
 800c766:	f04f 30ff 	mov.w	r0, #4294967295
 800c76a:	e03e      	b.n	800c7ea <__swsetup_r+0xba>
 800c76c:	4b25      	ldr	r3, [pc, #148]	; (800c804 <__swsetup_r+0xd4>)
 800c76e:	429c      	cmp	r4, r3
 800c770:	d101      	bne.n	800c776 <__swsetup_r+0x46>
 800c772:	68ac      	ldr	r4, [r5, #8]
 800c774:	e7eb      	b.n	800c74e <__swsetup_r+0x1e>
 800c776:	4b24      	ldr	r3, [pc, #144]	; (800c808 <__swsetup_r+0xd8>)
 800c778:	429c      	cmp	r4, r3
 800c77a:	bf08      	it	eq
 800c77c:	68ec      	ldreq	r4, [r5, #12]
 800c77e:	e7e6      	b.n	800c74e <__swsetup_r+0x1e>
 800c780:	0758      	lsls	r0, r3, #29
 800c782:	d512      	bpl.n	800c7aa <__swsetup_r+0x7a>
 800c784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c786:	b141      	cbz	r1, 800c79a <__swsetup_r+0x6a>
 800c788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c78c:	4299      	cmp	r1, r3
 800c78e:	d002      	beq.n	800c796 <__swsetup_r+0x66>
 800c790:	4630      	mov	r0, r6
 800c792:	f000 f9c9 	bl	800cb28 <_free_r>
 800c796:	2300      	movs	r3, #0
 800c798:	6363      	str	r3, [r4, #52]	; 0x34
 800c79a:	89a3      	ldrh	r3, [r4, #12]
 800c79c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7a0:	81a3      	strh	r3, [r4, #12]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	6063      	str	r3, [r4, #4]
 800c7a6:	6923      	ldr	r3, [r4, #16]
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	89a3      	ldrh	r3, [r4, #12]
 800c7ac:	f043 0308 	orr.w	r3, r3, #8
 800c7b0:	81a3      	strh	r3, [r4, #12]
 800c7b2:	6923      	ldr	r3, [r4, #16]
 800c7b4:	b94b      	cbnz	r3, 800c7ca <__swsetup_r+0x9a>
 800c7b6:	89a3      	ldrh	r3, [r4, #12]
 800c7b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c7bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7c0:	d003      	beq.n	800c7ca <__swsetup_r+0x9a>
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	f000 f95b 	bl	800ca80 <__smakebuf_r>
 800c7ca:	89a0      	ldrh	r0, [r4, #12]
 800c7cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7d0:	f010 0301 	ands.w	r3, r0, #1
 800c7d4:	d00a      	beq.n	800c7ec <__swsetup_r+0xbc>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	60a3      	str	r3, [r4, #8]
 800c7da:	6963      	ldr	r3, [r4, #20]
 800c7dc:	425b      	negs	r3, r3
 800c7de:	61a3      	str	r3, [r4, #24]
 800c7e0:	6923      	ldr	r3, [r4, #16]
 800c7e2:	b943      	cbnz	r3, 800c7f6 <__swsetup_r+0xc6>
 800c7e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c7e8:	d1ba      	bne.n	800c760 <__swsetup_r+0x30>
 800c7ea:	bd70      	pop	{r4, r5, r6, pc}
 800c7ec:	0781      	lsls	r1, r0, #30
 800c7ee:	bf58      	it	pl
 800c7f0:	6963      	ldrpl	r3, [r4, #20]
 800c7f2:	60a3      	str	r3, [r4, #8]
 800c7f4:	e7f4      	b.n	800c7e0 <__swsetup_r+0xb0>
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	e7f7      	b.n	800c7ea <__swsetup_r+0xba>
 800c7fa:	bf00      	nop
 800c7fc:	200000a4 	.word	0x200000a4
 800c800:	0800f170 	.word	0x0800f170
 800c804:	0800f190 	.word	0x0800f190
 800c808:	0800f150 	.word	0x0800f150

0800c80c <__assert_func>:
 800c80c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c80e:	4614      	mov	r4, r2
 800c810:	461a      	mov	r2, r3
 800c812:	4b09      	ldr	r3, [pc, #36]	; (800c838 <__assert_func+0x2c>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4605      	mov	r5, r0
 800c818:	68d8      	ldr	r0, [r3, #12]
 800c81a:	b14c      	cbz	r4, 800c830 <__assert_func+0x24>
 800c81c:	4b07      	ldr	r3, [pc, #28]	; (800c83c <__assert_func+0x30>)
 800c81e:	9100      	str	r1, [sp, #0]
 800c820:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c824:	4906      	ldr	r1, [pc, #24]	; (800c840 <__assert_func+0x34>)
 800c826:	462b      	mov	r3, r5
 800c828:	f000 f8e0 	bl	800c9ec <fiprintf>
 800c82c:	f001 fab2 	bl	800dd94 <abort>
 800c830:	4b04      	ldr	r3, [pc, #16]	; (800c844 <__assert_func+0x38>)
 800c832:	461c      	mov	r4, r3
 800c834:	e7f3      	b.n	800c81e <__assert_func+0x12>
 800c836:	bf00      	nop
 800c838:	200000a4 	.word	0x200000a4
 800c83c:	0800f226 	.word	0x0800f226
 800c840:	0800f233 	.word	0x0800f233
 800c844:	0800e7c0 	.word	0x0800e7c0

0800c848 <_close_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d06      	ldr	r5, [pc, #24]	; (800c864 <_close_r+0x1c>)
 800c84c:	2300      	movs	r3, #0
 800c84e:	4604      	mov	r4, r0
 800c850:	4608      	mov	r0, r1
 800c852:	602b      	str	r3, [r5, #0]
 800c854:	f7f7 fb37 	bl	8003ec6 <_close>
 800c858:	1c43      	adds	r3, r0, #1
 800c85a:	d102      	bne.n	800c862 <_close_r+0x1a>
 800c85c:	682b      	ldr	r3, [r5, #0]
 800c85e:	b103      	cbz	r3, 800c862 <_close_r+0x1a>
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	bd38      	pop	{r3, r4, r5, pc}
 800c864:	20005580 	.word	0x20005580

0800c868 <__sflush_r>:
 800c868:	898a      	ldrh	r2, [r1, #12]
 800c86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c86e:	4605      	mov	r5, r0
 800c870:	0710      	lsls	r0, r2, #28
 800c872:	460c      	mov	r4, r1
 800c874:	d458      	bmi.n	800c928 <__sflush_r+0xc0>
 800c876:	684b      	ldr	r3, [r1, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	dc05      	bgt.n	800c888 <__sflush_r+0x20>
 800c87c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c87e:	2b00      	cmp	r3, #0
 800c880:	dc02      	bgt.n	800c888 <__sflush_r+0x20>
 800c882:	2000      	movs	r0, #0
 800c884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c88a:	2e00      	cmp	r6, #0
 800c88c:	d0f9      	beq.n	800c882 <__sflush_r+0x1a>
 800c88e:	2300      	movs	r3, #0
 800c890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c894:	682f      	ldr	r7, [r5, #0]
 800c896:	602b      	str	r3, [r5, #0]
 800c898:	d032      	beq.n	800c900 <__sflush_r+0x98>
 800c89a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c89c:	89a3      	ldrh	r3, [r4, #12]
 800c89e:	075a      	lsls	r2, r3, #29
 800c8a0:	d505      	bpl.n	800c8ae <__sflush_r+0x46>
 800c8a2:	6863      	ldr	r3, [r4, #4]
 800c8a4:	1ac0      	subs	r0, r0, r3
 800c8a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8a8:	b10b      	cbz	r3, 800c8ae <__sflush_r+0x46>
 800c8aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8ac:	1ac0      	subs	r0, r0, r3
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8b4:	6a21      	ldr	r1, [r4, #32]
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	47b0      	blx	r6
 800c8ba:	1c43      	adds	r3, r0, #1
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	d106      	bne.n	800c8ce <__sflush_r+0x66>
 800c8c0:	6829      	ldr	r1, [r5, #0]
 800c8c2:	291d      	cmp	r1, #29
 800c8c4:	d82c      	bhi.n	800c920 <__sflush_r+0xb8>
 800c8c6:	4a2a      	ldr	r2, [pc, #168]	; (800c970 <__sflush_r+0x108>)
 800c8c8:	40ca      	lsrs	r2, r1
 800c8ca:	07d6      	lsls	r6, r2, #31
 800c8cc:	d528      	bpl.n	800c920 <__sflush_r+0xb8>
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	6062      	str	r2, [r4, #4]
 800c8d2:	04d9      	lsls	r1, r3, #19
 800c8d4:	6922      	ldr	r2, [r4, #16]
 800c8d6:	6022      	str	r2, [r4, #0]
 800c8d8:	d504      	bpl.n	800c8e4 <__sflush_r+0x7c>
 800c8da:	1c42      	adds	r2, r0, #1
 800c8dc:	d101      	bne.n	800c8e2 <__sflush_r+0x7a>
 800c8de:	682b      	ldr	r3, [r5, #0]
 800c8e0:	b903      	cbnz	r3, 800c8e4 <__sflush_r+0x7c>
 800c8e2:	6560      	str	r0, [r4, #84]	; 0x54
 800c8e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8e6:	602f      	str	r7, [r5, #0]
 800c8e8:	2900      	cmp	r1, #0
 800c8ea:	d0ca      	beq.n	800c882 <__sflush_r+0x1a>
 800c8ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8f0:	4299      	cmp	r1, r3
 800c8f2:	d002      	beq.n	800c8fa <__sflush_r+0x92>
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f000 f917 	bl	800cb28 <_free_r>
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	6360      	str	r0, [r4, #52]	; 0x34
 800c8fe:	e7c1      	b.n	800c884 <__sflush_r+0x1c>
 800c900:	6a21      	ldr	r1, [r4, #32]
 800c902:	2301      	movs	r3, #1
 800c904:	4628      	mov	r0, r5
 800c906:	47b0      	blx	r6
 800c908:	1c41      	adds	r1, r0, #1
 800c90a:	d1c7      	bne.n	800c89c <__sflush_r+0x34>
 800c90c:	682b      	ldr	r3, [r5, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d0c4      	beq.n	800c89c <__sflush_r+0x34>
 800c912:	2b1d      	cmp	r3, #29
 800c914:	d001      	beq.n	800c91a <__sflush_r+0xb2>
 800c916:	2b16      	cmp	r3, #22
 800c918:	d101      	bne.n	800c91e <__sflush_r+0xb6>
 800c91a:	602f      	str	r7, [r5, #0]
 800c91c:	e7b1      	b.n	800c882 <__sflush_r+0x1a>
 800c91e:	89a3      	ldrh	r3, [r4, #12]
 800c920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c924:	81a3      	strh	r3, [r4, #12]
 800c926:	e7ad      	b.n	800c884 <__sflush_r+0x1c>
 800c928:	690f      	ldr	r7, [r1, #16]
 800c92a:	2f00      	cmp	r7, #0
 800c92c:	d0a9      	beq.n	800c882 <__sflush_r+0x1a>
 800c92e:	0793      	lsls	r3, r2, #30
 800c930:	680e      	ldr	r6, [r1, #0]
 800c932:	bf08      	it	eq
 800c934:	694b      	ldreq	r3, [r1, #20]
 800c936:	600f      	str	r7, [r1, #0]
 800c938:	bf18      	it	ne
 800c93a:	2300      	movne	r3, #0
 800c93c:	eba6 0807 	sub.w	r8, r6, r7
 800c940:	608b      	str	r3, [r1, #8]
 800c942:	f1b8 0f00 	cmp.w	r8, #0
 800c946:	dd9c      	ble.n	800c882 <__sflush_r+0x1a>
 800c948:	6a21      	ldr	r1, [r4, #32]
 800c94a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c94c:	4643      	mov	r3, r8
 800c94e:	463a      	mov	r2, r7
 800c950:	4628      	mov	r0, r5
 800c952:	47b0      	blx	r6
 800c954:	2800      	cmp	r0, #0
 800c956:	dc06      	bgt.n	800c966 <__sflush_r+0xfe>
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c95e:	81a3      	strh	r3, [r4, #12]
 800c960:	f04f 30ff 	mov.w	r0, #4294967295
 800c964:	e78e      	b.n	800c884 <__sflush_r+0x1c>
 800c966:	4407      	add	r7, r0
 800c968:	eba8 0800 	sub.w	r8, r8, r0
 800c96c:	e7e9      	b.n	800c942 <__sflush_r+0xda>
 800c96e:	bf00      	nop
 800c970:	20400001 	.word	0x20400001

0800c974 <_fflush_r>:
 800c974:	b538      	push	{r3, r4, r5, lr}
 800c976:	690b      	ldr	r3, [r1, #16]
 800c978:	4605      	mov	r5, r0
 800c97a:	460c      	mov	r4, r1
 800c97c:	b913      	cbnz	r3, 800c984 <_fflush_r+0x10>
 800c97e:	2500      	movs	r5, #0
 800c980:	4628      	mov	r0, r5
 800c982:	bd38      	pop	{r3, r4, r5, pc}
 800c984:	b118      	cbz	r0, 800c98e <_fflush_r+0x1a>
 800c986:	6983      	ldr	r3, [r0, #24]
 800c988:	b90b      	cbnz	r3, 800c98e <_fflush_r+0x1a>
 800c98a:	f7ff fa09 	bl	800bda0 <__sinit>
 800c98e:	4b14      	ldr	r3, [pc, #80]	; (800c9e0 <_fflush_r+0x6c>)
 800c990:	429c      	cmp	r4, r3
 800c992:	d11b      	bne.n	800c9cc <_fflush_r+0x58>
 800c994:	686c      	ldr	r4, [r5, #4]
 800c996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0ef      	beq.n	800c97e <_fflush_r+0xa>
 800c99e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9a0:	07d0      	lsls	r0, r2, #31
 800c9a2:	d404      	bmi.n	800c9ae <_fflush_r+0x3a>
 800c9a4:	0599      	lsls	r1, r3, #22
 800c9a6:	d402      	bmi.n	800c9ae <_fflush_r+0x3a>
 800c9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9aa:	f7ff fabc 	bl	800bf26 <__retarget_lock_acquire_recursive>
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	f7ff ff59 	bl	800c868 <__sflush_r>
 800c9b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9b8:	07da      	lsls	r2, r3, #31
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	d4e0      	bmi.n	800c980 <_fflush_r+0xc>
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	059b      	lsls	r3, r3, #22
 800c9c2:	d4dd      	bmi.n	800c980 <_fflush_r+0xc>
 800c9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9c6:	f7ff faaf 	bl	800bf28 <__retarget_lock_release_recursive>
 800c9ca:	e7d9      	b.n	800c980 <_fflush_r+0xc>
 800c9cc:	4b05      	ldr	r3, [pc, #20]	; (800c9e4 <_fflush_r+0x70>)
 800c9ce:	429c      	cmp	r4, r3
 800c9d0:	d101      	bne.n	800c9d6 <_fflush_r+0x62>
 800c9d2:	68ac      	ldr	r4, [r5, #8]
 800c9d4:	e7df      	b.n	800c996 <_fflush_r+0x22>
 800c9d6:	4b04      	ldr	r3, [pc, #16]	; (800c9e8 <_fflush_r+0x74>)
 800c9d8:	429c      	cmp	r4, r3
 800c9da:	bf08      	it	eq
 800c9dc:	68ec      	ldreq	r4, [r5, #12]
 800c9de:	e7da      	b.n	800c996 <_fflush_r+0x22>
 800c9e0:	0800f170 	.word	0x0800f170
 800c9e4:	0800f190 	.word	0x0800f190
 800c9e8:	0800f150 	.word	0x0800f150

0800c9ec <fiprintf>:
 800c9ec:	b40e      	push	{r1, r2, r3}
 800c9ee:	b503      	push	{r0, r1, lr}
 800c9f0:	4601      	mov	r1, r0
 800c9f2:	ab03      	add	r3, sp, #12
 800c9f4:	4805      	ldr	r0, [pc, #20]	; (800ca0c <fiprintf+0x20>)
 800c9f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9fa:	6800      	ldr	r0, [r0, #0]
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	f000 fc37 	bl	800d270 <_vfiprintf_r>
 800ca02:	b002      	add	sp, #8
 800ca04:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca08:	b003      	add	sp, #12
 800ca0a:	4770      	bx	lr
 800ca0c:	200000a4 	.word	0x200000a4

0800ca10 <_lseek_r>:
 800ca10:	b538      	push	{r3, r4, r5, lr}
 800ca12:	4d07      	ldr	r5, [pc, #28]	; (800ca30 <_lseek_r+0x20>)
 800ca14:	4604      	mov	r4, r0
 800ca16:	4608      	mov	r0, r1
 800ca18:	4611      	mov	r1, r2
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	602a      	str	r2, [r5, #0]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	f7f7 fa78 	bl	8003f14 <_lseek>
 800ca24:	1c43      	adds	r3, r0, #1
 800ca26:	d102      	bne.n	800ca2e <_lseek_r+0x1e>
 800ca28:	682b      	ldr	r3, [r5, #0]
 800ca2a:	b103      	cbz	r3, 800ca2e <_lseek_r+0x1e>
 800ca2c:	6023      	str	r3, [r4, #0]
 800ca2e:	bd38      	pop	{r3, r4, r5, pc}
 800ca30:	20005580 	.word	0x20005580

0800ca34 <__swhatbuf_r>:
 800ca34:	b570      	push	{r4, r5, r6, lr}
 800ca36:	460e      	mov	r6, r1
 800ca38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca3c:	2900      	cmp	r1, #0
 800ca3e:	b096      	sub	sp, #88	; 0x58
 800ca40:	4614      	mov	r4, r2
 800ca42:	461d      	mov	r5, r3
 800ca44:	da08      	bge.n	800ca58 <__swhatbuf_r+0x24>
 800ca46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	602a      	str	r2, [r5, #0]
 800ca4e:	061a      	lsls	r2, r3, #24
 800ca50:	d410      	bmi.n	800ca74 <__swhatbuf_r+0x40>
 800ca52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca56:	e00e      	b.n	800ca76 <__swhatbuf_r+0x42>
 800ca58:	466a      	mov	r2, sp
 800ca5a:	f001 f9a3 	bl	800dda4 <_fstat_r>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	dbf1      	blt.n	800ca46 <__swhatbuf_r+0x12>
 800ca62:	9a01      	ldr	r2, [sp, #4]
 800ca64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca6c:	425a      	negs	r2, r3
 800ca6e:	415a      	adcs	r2, r3
 800ca70:	602a      	str	r2, [r5, #0]
 800ca72:	e7ee      	b.n	800ca52 <__swhatbuf_r+0x1e>
 800ca74:	2340      	movs	r3, #64	; 0x40
 800ca76:	2000      	movs	r0, #0
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	b016      	add	sp, #88	; 0x58
 800ca7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca80 <__smakebuf_r>:
 800ca80:	898b      	ldrh	r3, [r1, #12]
 800ca82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca84:	079d      	lsls	r5, r3, #30
 800ca86:	4606      	mov	r6, r0
 800ca88:	460c      	mov	r4, r1
 800ca8a:	d507      	bpl.n	800ca9c <__smakebuf_r+0x1c>
 800ca8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca90:	6023      	str	r3, [r4, #0]
 800ca92:	6123      	str	r3, [r4, #16]
 800ca94:	2301      	movs	r3, #1
 800ca96:	6163      	str	r3, [r4, #20]
 800ca98:	b002      	add	sp, #8
 800ca9a:	bd70      	pop	{r4, r5, r6, pc}
 800ca9c:	ab01      	add	r3, sp, #4
 800ca9e:	466a      	mov	r2, sp
 800caa0:	f7ff ffc8 	bl	800ca34 <__swhatbuf_r>
 800caa4:	9900      	ldr	r1, [sp, #0]
 800caa6:	4605      	mov	r5, r0
 800caa8:	4630      	mov	r0, r6
 800caaa:	f7ff fa75 	bl	800bf98 <_malloc_r>
 800caae:	b948      	cbnz	r0, 800cac4 <__smakebuf_r+0x44>
 800cab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cab4:	059a      	lsls	r2, r3, #22
 800cab6:	d4ef      	bmi.n	800ca98 <__smakebuf_r+0x18>
 800cab8:	f023 0303 	bic.w	r3, r3, #3
 800cabc:	f043 0302 	orr.w	r3, r3, #2
 800cac0:	81a3      	strh	r3, [r4, #12]
 800cac2:	e7e3      	b.n	800ca8c <__smakebuf_r+0xc>
 800cac4:	4b0d      	ldr	r3, [pc, #52]	; (800cafc <__smakebuf_r+0x7c>)
 800cac6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cac8:	89a3      	ldrh	r3, [r4, #12]
 800caca:	6020      	str	r0, [r4, #0]
 800cacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cad0:	81a3      	strh	r3, [r4, #12]
 800cad2:	9b00      	ldr	r3, [sp, #0]
 800cad4:	6163      	str	r3, [r4, #20]
 800cad6:	9b01      	ldr	r3, [sp, #4]
 800cad8:	6120      	str	r0, [r4, #16]
 800cada:	b15b      	cbz	r3, 800caf4 <__smakebuf_r+0x74>
 800cadc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cae0:	4630      	mov	r0, r6
 800cae2:	f001 f971 	bl	800ddc8 <_isatty_r>
 800cae6:	b128      	cbz	r0, 800caf4 <__smakebuf_r+0x74>
 800cae8:	89a3      	ldrh	r3, [r4, #12]
 800caea:	f023 0303 	bic.w	r3, r3, #3
 800caee:	f043 0301 	orr.w	r3, r3, #1
 800caf2:	81a3      	strh	r3, [r4, #12]
 800caf4:	89a0      	ldrh	r0, [r4, #12]
 800caf6:	4305      	orrs	r5, r0
 800caf8:	81a5      	strh	r5, [r4, #12]
 800cafa:	e7cd      	b.n	800ca98 <__smakebuf_r+0x18>
 800cafc:	0800bd39 	.word	0x0800bd39

0800cb00 <malloc>:
 800cb00:	4b02      	ldr	r3, [pc, #8]	; (800cb0c <malloc+0xc>)
 800cb02:	4601      	mov	r1, r0
 800cb04:	6818      	ldr	r0, [r3, #0]
 800cb06:	f7ff ba47 	b.w	800bf98 <_malloc_r>
 800cb0a:	bf00      	nop
 800cb0c:	200000a4 	.word	0x200000a4

0800cb10 <__malloc_lock>:
 800cb10:	4801      	ldr	r0, [pc, #4]	; (800cb18 <__malloc_lock+0x8>)
 800cb12:	f7ff ba08 	b.w	800bf26 <__retarget_lock_acquire_recursive>
 800cb16:	bf00      	nop
 800cb18:	20005574 	.word	0x20005574

0800cb1c <__malloc_unlock>:
 800cb1c:	4801      	ldr	r0, [pc, #4]	; (800cb24 <__malloc_unlock+0x8>)
 800cb1e:	f7ff ba03 	b.w	800bf28 <__retarget_lock_release_recursive>
 800cb22:	bf00      	nop
 800cb24:	20005574 	.word	0x20005574

0800cb28 <_free_r>:
 800cb28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb2a:	2900      	cmp	r1, #0
 800cb2c:	d044      	beq.n	800cbb8 <_free_r+0x90>
 800cb2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb32:	9001      	str	r0, [sp, #4]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f1a1 0404 	sub.w	r4, r1, #4
 800cb3a:	bfb8      	it	lt
 800cb3c:	18e4      	addlt	r4, r4, r3
 800cb3e:	f7ff ffe7 	bl	800cb10 <__malloc_lock>
 800cb42:	4a1e      	ldr	r2, [pc, #120]	; (800cbbc <_free_r+0x94>)
 800cb44:	9801      	ldr	r0, [sp, #4]
 800cb46:	6813      	ldr	r3, [r2, #0]
 800cb48:	b933      	cbnz	r3, 800cb58 <_free_r+0x30>
 800cb4a:	6063      	str	r3, [r4, #4]
 800cb4c:	6014      	str	r4, [r2, #0]
 800cb4e:	b003      	add	sp, #12
 800cb50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb54:	f7ff bfe2 	b.w	800cb1c <__malloc_unlock>
 800cb58:	42a3      	cmp	r3, r4
 800cb5a:	d908      	bls.n	800cb6e <_free_r+0x46>
 800cb5c:	6825      	ldr	r5, [r4, #0]
 800cb5e:	1961      	adds	r1, r4, r5
 800cb60:	428b      	cmp	r3, r1
 800cb62:	bf01      	itttt	eq
 800cb64:	6819      	ldreq	r1, [r3, #0]
 800cb66:	685b      	ldreq	r3, [r3, #4]
 800cb68:	1949      	addeq	r1, r1, r5
 800cb6a:	6021      	streq	r1, [r4, #0]
 800cb6c:	e7ed      	b.n	800cb4a <_free_r+0x22>
 800cb6e:	461a      	mov	r2, r3
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	b10b      	cbz	r3, 800cb78 <_free_r+0x50>
 800cb74:	42a3      	cmp	r3, r4
 800cb76:	d9fa      	bls.n	800cb6e <_free_r+0x46>
 800cb78:	6811      	ldr	r1, [r2, #0]
 800cb7a:	1855      	adds	r5, r2, r1
 800cb7c:	42a5      	cmp	r5, r4
 800cb7e:	d10b      	bne.n	800cb98 <_free_r+0x70>
 800cb80:	6824      	ldr	r4, [r4, #0]
 800cb82:	4421      	add	r1, r4
 800cb84:	1854      	adds	r4, r2, r1
 800cb86:	42a3      	cmp	r3, r4
 800cb88:	6011      	str	r1, [r2, #0]
 800cb8a:	d1e0      	bne.n	800cb4e <_free_r+0x26>
 800cb8c:	681c      	ldr	r4, [r3, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	6053      	str	r3, [r2, #4]
 800cb92:	4421      	add	r1, r4
 800cb94:	6011      	str	r1, [r2, #0]
 800cb96:	e7da      	b.n	800cb4e <_free_r+0x26>
 800cb98:	d902      	bls.n	800cba0 <_free_r+0x78>
 800cb9a:	230c      	movs	r3, #12
 800cb9c:	6003      	str	r3, [r0, #0]
 800cb9e:	e7d6      	b.n	800cb4e <_free_r+0x26>
 800cba0:	6825      	ldr	r5, [r4, #0]
 800cba2:	1961      	adds	r1, r4, r5
 800cba4:	428b      	cmp	r3, r1
 800cba6:	bf04      	itt	eq
 800cba8:	6819      	ldreq	r1, [r3, #0]
 800cbaa:	685b      	ldreq	r3, [r3, #4]
 800cbac:	6063      	str	r3, [r4, #4]
 800cbae:	bf04      	itt	eq
 800cbb0:	1949      	addeq	r1, r1, r5
 800cbb2:	6021      	streq	r1, [r4, #0]
 800cbb4:	6054      	str	r4, [r2, #4]
 800cbb6:	e7ca      	b.n	800cb4e <_free_r+0x26>
 800cbb8:	b003      	add	sp, #12
 800cbba:	bd30      	pop	{r4, r5, pc}
 800cbbc:	20005578 	.word	0x20005578

0800cbc0 <__ssputs_r>:
 800cbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc4:	688e      	ldr	r6, [r1, #8]
 800cbc6:	429e      	cmp	r6, r3
 800cbc8:	4682      	mov	sl, r0
 800cbca:	460c      	mov	r4, r1
 800cbcc:	4690      	mov	r8, r2
 800cbce:	461f      	mov	r7, r3
 800cbd0:	d838      	bhi.n	800cc44 <__ssputs_r+0x84>
 800cbd2:	898a      	ldrh	r2, [r1, #12]
 800cbd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbd8:	d032      	beq.n	800cc40 <__ssputs_r+0x80>
 800cbda:	6825      	ldr	r5, [r4, #0]
 800cbdc:	6909      	ldr	r1, [r1, #16]
 800cbde:	eba5 0901 	sub.w	r9, r5, r1
 800cbe2:	6965      	ldr	r5, [r4, #20]
 800cbe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbec:	3301      	adds	r3, #1
 800cbee:	444b      	add	r3, r9
 800cbf0:	106d      	asrs	r5, r5, #1
 800cbf2:	429d      	cmp	r5, r3
 800cbf4:	bf38      	it	cc
 800cbf6:	461d      	movcc	r5, r3
 800cbf8:	0553      	lsls	r3, r2, #21
 800cbfa:	d531      	bpl.n	800cc60 <__ssputs_r+0xa0>
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	f7ff f9cb 	bl	800bf98 <_malloc_r>
 800cc02:	4606      	mov	r6, r0
 800cc04:	b950      	cbnz	r0, 800cc1c <__ssputs_r+0x5c>
 800cc06:	230c      	movs	r3, #12
 800cc08:	f8ca 3000 	str.w	r3, [sl]
 800cc0c:	89a3      	ldrh	r3, [r4, #12]
 800cc0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc12:	81a3      	strh	r3, [r4, #12]
 800cc14:	f04f 30ff 	mov.w	r0, #4294967295
 800cc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc1c:	6921      	ldr	r1, [r4, #16]
 800cc1e:	464a      	mov	r2, r9
 800cc20:	f7ff f983 	bl	800bf2a <memcpy>
 800cc24:	89a3      	ldrh	r3, [r4, #12]
 800cc26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc2e:	81a3      	strh	r3, [r4, #12]
 800cc30:	6126      	str	r6, [r4, #16]
 800cc32:	6165      	str	r5, [r4, #20]
 800cc34:	444e      	add	r6, r9
 800cc36:	eba5 0509 	sub.w	r5, r5, r9
 800cc3a:	6026      	str	r6, [r4, #0]
 800cc3c:	60a5      	str	r5, [r4, #8]
 800cc3e:	463e      	mov	r6, r7
 800cc40:	42be      	cmp	r6, r7
 800cc42:	d900      	bls.n	800cc46 <__ssputs_r+0x86>
 800cc44:	463e      	mov	r6, r7
 800cc46:	6820      	ldr	r0, [r4, #0]
 800cc48:	4632      	mov	r2, r6
 800cc4a:	4641      	mov	r1, r8
 800cc4c:	f001 f8cc 	bl	800dde8 <memmove>
 800cc50:	68a3      	ldr	r3, [r4, #8]
 800cc52:	1b9b      	subs	r3, r3, r6
 800cc54:	60a3      	str	r3, [r4, #8]
 800cc56:	6823      	ldr	r3, [r4, #0]
 800cc58:	4433      	add	r3, r6
 800cc5a:	6023      	str	r3, [r4, #0]
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	e7db      	b.n	800cc18 <__ssputs_r+0x58>
 800cc60:	462a      	mov	r2, r5
 800cc62:	f001 f8db 	bl	800de1c <_realloc_r>
 800cc66:	4606      	mov	r6, r0
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d1e1      	bne.n	800cc30 <__ssputs_r+0x70>
 800cc6c:	6921      	ldr	r1, [r4, #16]
 800cc6e:	4650      	mov	r0, sl
 800cc70:	f7ff ff5a 	bl	800cb28 <_free_r>
 800cc74:	e7c7      	b.n	800cc06 <__ssputs_r+0x46>
	...

0800cc78 <_svfiprintf_r>:
 800cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7c:	4698      	mov	r8, r3
 800cc7e:	898b      	ldrh	r3, [r1, #12]
 800cc80:	061b      	lsls	r3, r3, #24
 800cc82:	b09d      	sub	sp, #116	; 0x74
 800cc84:	4607      	mov	r7, r0
 800cc86:	460d      	mov	r5, r1
 800cc88:	4614      	mov	r4, r2
 800cc8a:	d50e      	bpl.n	800ccaa <_svfiprintf_r+0x32>
 800cc8c:	690b      	ldr	r3, [r1, #16]
 800cc8e:	b963      	cbnz	r3, 800ccaa <_svfiprintf_r+0x32>
 800cc90:	2140      	movs	r1, #64	; 0x40
 800cc92:	f7ff f981 	bl	800bf98 <_malloc_r>
 800cc96:	6028      	str	r0, [r5, #0]
 800cc98:	6128      	str	r0, [r5, #16]
 800cc9a:	b920      	cbnz	r0, 800cca6 <_svfiprintf_r+0x2e>
 800cc9c:	230c      	movs	r3, #12
 800cc9e:	603b      	str	r3, [r7, #0]
 800cca0:	f04f 30ff 	mov.w	r0, #4294967295
 800cca4:	e0d1      	b.n	800ce4a <_svfiprintf_r+0x1d2>
 800cca6:	2340      	movs	r3, #64	; 0x40
 800cca8:	616b      	str	r3, [r5, #20]
 800ccaa:	2300      	movs	r3, #0
 800ccac:	9309      	str	r3, [sp, #36]	; 0x24
 800ccae:	2320      	movs	r3, #32
 800ccb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccb8:	2330      	movs	r3, #48	; 0x30
 800ccba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce64 <_svfiprintf_r+0x1ec>
 800ccbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccc2:	f04f 0901 	mov.w	r9, #1
 800ccc6:	4623      	mov	r3, r4
 800ccc8:	469a      	mov	sl, r3
 800ccca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccce:	b10a      	cbz	r2, 800ccd4 <_svfiprintf_r+0x5c>
 800ccd0:	2a25      	cmp	r2, #37	; 0x25
 800ccd2:	d1f9      	bne.n	800ccc8 <_svfiprintf_r+0x50>
 800ccd4:	ebba 0b04 	subs.w	fp, sl, r4
 800ccd8:	d00b      	beq.n	800ccf2 <_svfiprintf_r+0x7a>
 800ccda:	465b      	mov	r3, fp
 800ccdc:	4622      	mov	r2, r4
 800ccde:	4629      	mov	r1, r5
 800cce0:	4638      	mov	r0, r7
 800cce2:	f7ff ff6d 	bl	800cbc0 <__ssputs_r>
 800cce6:	3001      	adds	r0, #1
 800cce8:	f000 80aa 	beq.w	800ce40 <_svfiprintf_r+0x1c8>
 800ccec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccee:	445a      	add	r2, fp
 800ccf0:	9209      	str	r2, [sp, #36]	; 0x24
 800ccf2:	f89a 3000 	ldrb.w	r3, [sl]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f000 80a2 	beq.w	800ce40 <_svfiprintf_r+0x1c8>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	f04f 32ff 	mov.w	r2, #4294967295
 800cd02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd06:	f10a 0a01 	add.w	sl, sl, #1
 800cd0a:	9304      	str	r3, [sp, #16]
 800cd0c:	9307      	str	r3, [sp, #28]
 800cd0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd12:	931a      	str	r3, [sp, #104]	; 0x68
 800cd14:	4654      	mov	r4, sl
 800cd16:	2205      	movs	r2, #5
 800cd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd1c:	4851      	ldr	r0, [pc, #324]	; (800ce64 <_svfiprintf_r+0x1ec>)
 800cd1e:	f7f5 f8a7 	bl	8001e70 <memchr>
 800cd22:	9a04      	ldr	r2, [sp, #16]
 800cd24:	b9d8      	cbnz	r0, 800cd5e <_svfiprintf_r+0xe6>
 800cd26:	06d0      	lsls	r0, r2, #27
 800cd28:	bf44      	itt	mi
 800cd2a:	2320      	movmi	r3, #32
 800cd2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd30:	0711      	lsls	r1, r2, #28
 800cd32:	bf44      	itt	mi
 800cd34:	232b      	movmi	r3, #43	; 0x2b
 800cd36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd3e:	2b2a      	cmp	r3, #42	; 0x2a
 800cd40:	d015      	beq.n	800cd6e <_svfiprintf_r+0xf6>
 800cd42:	9a07      	ldr	r2, [sp, #28]
 800cd44:	4654      	mov	r4, sl
 800cd46:	2000      	movs	r0, #0
 800cd48:	f04f 0c0a 	mov.w	ip, #10
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd52:	3b30      	subs	r3, #48	; 0x30
 800cd54:	2b09      	cmp	r3, #9
 800cd56:	d94e      	bls.n	800cdf6 <_svfiprintf_r+0x17e>
 800cd58:	b1b0      	cbz	r0, 800cd88 <_svfiprintf_r+0x110>
 800cd5a:	9207      	str	r2, [sp, #28]
 800cd5c:	e014      	b.n	800cd88 <_svfiprintf_r+0x110>
 800cd5e:	eba0 0308 	sub.w	r3, r0, r8
 800cd62:	fa09 f303 	lsl.w	r3, r9, r3
 800cd66:	4313      	orrs	r3, r2
 800cd68:	9304      	str	r3, [sp, #16]
 800cd6a:	46a2      	mov	sl, r4
 800cd6c:	e7d2      	b.n	800cd14 <_svfiprintf_r+0x9c>
 800cd6e:	9b03      	ldr	r3, [sp, #12]
 800cd70:	1d19      	adds	r1, r3, #4
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	9103      	str	r1, [sp, #12]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	bfbb      	ittet	lt
 800cd7a:	425b      	neglt	r3, r3
 800cd7c:	f042 0202 	orrlt.w	r2, r2, #2
 800cd80:	9307      	strge	r3, [sp, #28]
 800cd82:	9307      	strlt	r3, [sp, #28]
 800cd84:	bfb8      	it	lt
 800cd86:	9204      	strlt	r2, [sp, #16]
 800cd88:	7823      	ldrb	r3, [r4, #0]
 800cd8a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd8c:	d10c      	bne.n	800cda8 <_svfiprintf_r+0x130>
 800cd8e:	7863      	ldrb	r3, [r4, #1]
 800cd90:	2b2a      	cmp	r3, #42	; 0x2a
 800cd92:	d135      	bne.n	800ce00 <_svfiprintf_r+0x188>
 800cd94:	9b03      	ldr	r3, [sp, #12]
 800cd96:	1d1a      	adds	r2, r3, #4
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	9203      	str	r2, [sp, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	bfb8      	it	lt
 800cda0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cda4:	3402      	adds	r4, #2
 800cda6:	9305      	str	r3, [sp, #20]
 800cda8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce74 <_svfiprintf_r+0x1fc>
 800cdac:	7821      	ldrb	r1, [r4, #0]
 800cdae:	2203      	movs	r2, #3
 800cdb0:	4650      	mov	r0, sl
 800cdb2:	f7f5 f85d 	bl	8001e70 <memchr>
 800cdb6:	b140      	cbz	r0, 800cdca <_svfiprintf_r+0x152>
 800cdb8:	2340      	movs	r3, #64	; 0x40
 800cdba:	eba0 000a 	sub.w	r0, r0, sl
 800cdbe:	fa03 f000 	lsl.w	r0, r3, r0
 800cdc2:	9b04      	ldr	r3, [sp, #16]
 800cdc4:	4303      	orrs	r3, r0
 800cdc6:	3401      	adds	r4, #1
 800cdc8:	9304      	str	r3, [sp, #16]
 800cdca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdce:	4826      	ldr	r0, [pc, #152]	; (800ce68 <_svfiprintf_r+0x1f0>)
 800cdd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdd4:	2206      	movs	r2, #6
 800cdd6:	f7f5 f84b 	bl	8001e70 <memchr>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d038      	beq.n	800ce50 <_svfiprintf_r+0x1d8>
 800cdde:	4b23      	ldr	r3, [pc, #140]	; (800ce6c <_svfiprintf_r+0x1f4>)
 800cde0:	bb1b      	cbnz	r3, 800ce2a <_svfiprintf_r+0x1b2>
 800cde2:	9b03      	ldr	r3, [sp, #12]
 800cde4:	3307      	adds	r3, #7
 800cde6:	f023 0307 	bic.w	r3, r3, #7
 800cdea:	3308      	adds	r3, #8
 800cdec:	9303      	str	r3, [sp, #12]
 800cdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf0:	4433      	add	r3, r6
 800cdf2:	9309      	str	r3, [sp, #36]	; 0x24
 800cdf4:	e767      	b.n	800ccc6 <_svfiprintf_r+0x4e>
 800cdf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdfa:	460c      	mov	r4, r1
 800cdfc:	2001      	movs	r0, #1
 800cdfe:	e7a5      	b.n	800cd4c <_svfiprintf_r+0xd4>
 800ce00:	2300      	movs	r3, #0
 800ce02:	3401      	adds	r4, #1
 800ce04:	9305      	str	r3, [sp, #20]
 800ce06:	4619      	mov	r1, r3
 800ce08:	f04f 0c0a 	mov.w	ip, #10
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce12:	3a30      	subs	r2, #48	; 0x30
 800ce14:	2a09      	cmp	r2, #9
 800ce16:	d903      	bls.n	800ce20 <_svfiprintf_r+0x1a8>
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d0c5      	beq.n	800cda8 <_svfiprintf_r+0x130>
 800ce1c:	9105      	str	r1, [sp, #20]
 800ce1e:	e7c3      	b.n	800cda8 <_svfiprintf_r+0x130>
 800ce20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce24:	4604      	mov	r4, r0
 800ce26:	2301      	movs	r3, #1
 800ce28:	e7f0      	b.n	800ce0c <_svfiprintf_r+0x194>
 800ce2a:	ab03      	add	r3, sp, #12
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	462a      	mov	r2, r5
 800ce30:	4b0f      	ldr	r3, [pc, #60]	; (800ce70 <_svfiprintf_r+0x1f8>)
 800ce32:	a904      	add	r1, sp, #16
 800ce34:	4638      	mov	r0, r7
 800ce36:	f3af 8000 	nop.w
 800ce3a:	1c42      	adds	r2, r0, #1
 800ce3c:	4606      	mov	r6, r0
 800ce3e:	d1d6      	bne.n	800cdee <_svfiprintf_r+0x176>
 800ce40:	89ab      	ldrh	r3, [r5, #12]
 800ce42:	065b      	lsls	r3, r3, #25
 800ce44:	f53f af2c 	bmi.w	800cca0 <_svfiprintf_r+0x28>
 800ce48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce4a:	b01d      	add	sp, #116	; 0x74
 800ce4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce50:	ab03      	add	r3, sp, #12
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	462a      	mov	r2, r5
 800ce56:	4b06      	ldr	r3, [pc, #24]	; (800ce70 <_svfiprintf_r+0x1f8>)
 800ce58:	a904      	add	r1, sp, #16
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	f000 fba6 	bl	800d5ac <_printf_i>
 800ce60:	e7eb      	b.n	800ce3a <_svfiprintf_r+0x1c2>
 800ce62:	bf00      	nop
 800ce64:	0800f363 	.word	0x0800f363
 800ce68:	0800f36d 	.word	0x0800f36d
 800ce6c:	00000000 	.word	0x00000000
 800ce70:	0800cbc1 	.word	0x0800cbc1
 800ce74:	0800f369 	.word	0x0800f369

0800ce78 <_sungetc_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	1c4b      	adds	r3, r1, #1
 800ce7c:	4614      	mov	r4, r2
 800ce7e:	d103      	bne.n	800ce88 <_sungetc_r+0x10>
 800ce80:	f04f 35ff 	mov.w	r5, #4294967295
 800ce84:	4628      	mov	r0, r5
 800ce86:	bd38      	pop	{r3, r4, r5, pc}
 800ce88:	8993      	ldrh	r3, [r2, #12]
 800ce8a:	f023 0320 	bic.w	r3, r3, #32
 800ce8e:	8193      	strh	r3, [r2, #12]
 800ce90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce92:	6852      	ldr	r2, [r2, #4]
 800ce94:	b2cd      	uxtb	r5, r1
 800ce96:	b18b      	cbz	r3, 800cebc <_sungetc_r+0x44>
 800ce98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	dd08      	ble.n	800ceb0 <_sungetc_r+0x38>
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	1e5a      	subs	r2, r3, #1
 800cea2:	6022      	str	r2, [r4, #0]
 800cea4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cea8:	6863      	ldr	r3, [r4, #4]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	6063      	str	r3, [r4, #4]
 800ceae:	e7e9      	b.n	800ce84 <_sungetc_r+0xc>
 800ceb0:	4621      	mov	r1, r4
 800ceb2:	f000 ff35 	bl	800dd20 <__submore>
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	d0f1      	beq.n	800ce9e <_sungetc_r+0x26>
 800ceba:	e7e1      	b.n	800ce80 <_sungetc_r+0x8>
 800cebc:	6921      	ldr	r1, [r4, #16]
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	b151      	cbz	r1, 800ced8 <_sungetc_r+0x60>
 800cec2:	4299      	cmp	r1, r3
 800cec4:	d208      	bcs.n	800ced8 <_sungetc_r+0x60>
 800cec6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ceca:	42a9      	cmp	r1, r5
 800cecc:	d104      	bne.n	800ced8 <_sungetc_r+0x60>
 800cece:	3b01      	subs	r3, #1
 800ced0:	3201      	adds	r2, #1
 800ced2:	6023      	str	r3, [r4, #0]
 800ced4:	6062      	str	r2, [r4, #4]
 800ced6:	e7d5      	b.n	800ce84 <_sungetc_r+0xc>
 800ced8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cedc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cee0:	6363      	str	r3, [r4, #52]	; 0x34
 800cee2:	2303      	movs	r3, #3
 800cee4:	63a3      	str	r3, [r4, #56]	; 0x38
 800cee6:	4623      	mov	r3, r4
 800cee8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	2301      	movs	r3, #1
 800cef0:	e7dc      	b.n	800ceac <_sungetc_r+0x34>

0800cef2 <__ssrefill_r>:
 800cef2:	b510      	push	{r4, lr}
 800cef4:	460c      	mov	r4, r1
 800cef6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cef8:	b169      	cbz	r1, 800cf16 <__ssrefill_r+0x24>
 800cefa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cefe:	4299      	cmp	r1, r3
 800cf00:	d001      	beq.n	800cf06 <__ssrefill_r+0x14>
 800cf02:	f7ff fe11 	bl	800cb28 <_free_r>
 800cf06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf08:	6063      	str	r3, [r4, #4]
 800cf0a:	2000      	movs	r0, #0
 800cf0c:	6360      	str	r0, [r4, #52]	; 0x34
 800cf0e:	b113      	cbz	r3, 800cf16 <__ssrefill_r+0x24>
 800cf10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cf12:	6023      	str	r3, [r4, #0]
 800cf14:	bd10      	pop	{r4, pc}
 800cf16:	6923      	ldr	r3, [r4, #16]
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	6063      	str	r3, [r4, #4]
 800cf1e:	89a3      	ldrh	r3, [r4, #12]
 800cf20:	f043 0320 	orr.w	r3, r3, #32
 800cf24:	81a3      	strh	r3, [r4, #12]
 800cf26:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2a:	e7f3      	b.n	800cf14 <__ssrefill_r+0x22>

0800cf2c <__ssvfiscanf_r>:
 800cf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf30:	460c      	mov	r4, r1
 800cf32:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cf36:	2100      	movs	r1, #0
 800cf38:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800cf3c:	49a6      	ldr	r1, [pc, #664]	; (800d1d8 <__ssvfiscanf_r+0x2ac>)
 800cf3e:	91a0      	str	r1, [sp, #640]	; 0x280
 800cf40:	f10d 0804 	add.w	r8, sp, #4
 800cf44:	49a5      	ldr	r1, [pc, #660]	; (800d1dc <__ssvfiscanf_r+0x2b0>)
 800cf46:	4fa6      	ldr	r7, [pc, #664]	; (800d1e0 <__ssvfiscanf_r+0x2b4>)
 800cf48:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d1e4 <__ssvfiscanf_r+0x2b8>
 800cf4c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cf50:	4606      	mov	r6, r0
 800cf52:	91a1      	str	r1, [sp, #644]	; 0x284
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	7813      	ldrb	r3, [r2, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f000 815a 	beq.w	800d212 <__ssvfiscanf_r+0x2e6>
 800cf5e:	5dd9      	ldrb	r1, [r3, r7]
 800cf60:	f011 0108 	ands.w	r1, r1, #8
 800cf64:	f102 0501 	add.w	r5, r2, #1
 800cf68:	d019      	beq.n	800cf9e <__ssvfiscanf_r+0x72>
 800cf6a:	6863      	ldr	r3, [r4, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	dd0f      	ble.n	800cf90 <__ssvfiscanf_r+0x64>
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	781a      	ldrb	r2, [r3, #0]
 800cf74:	5cba      	ldrb	r2, [r7, r2]
 800cf76:	0712      	lsls	r2, r2, #28
 800cf78:	d401      	bmi.n	800cf7e <__ssvfiscanf_r+0x52>
 800cf7a:	462a      	mov	r2, r5
 800cf7c:	e7eb      	b.n	800cf56 <__ssvfiscanf_r+0x2a>
 800cf7e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cf80:	3201      	adds	r2, #1
 800cf82:	9245      	str	r2, [sp, #276]	; 0x114
 800cf84:	6862      	ldr	r2, [r4, #4]
 800cf86:	3301      	adds	r3, #1
 800cf88:	3a01      	subs	r2, #1
 800cf8a:	6062      	str	r2, [r4, #4]
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	e7ec      	b.n	800cf6a <__ssvfiscanf_r+0x3e>
 800cf90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cf92:	4621      	mov	r1, r4
 800cf94:	4630      	mov	r0, r6
 800cf96:	4798      	blx	r3
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	d0e9      	beq.n	800cf70 <__ssvfiscanf_r+0x44>
 800cf9c:	e7ed      	b.n	800cf7a <__ssvfiscanf_r+0x4e>
 800cf9e:	2b25      	cmp	r3, #37	; 0x25
 800cfa0:	d012      	beq.n	800cfc8 <__ssvfiscanf_r+0x9c>
 800cfa2:	469a      	mov	sl, r3
 800cfa4:	6863      	ldr	r3, [r4, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f340 8091 	ble.w	800d0ce <__ssvfiscanf_r+0x1a2>
 800cfac:	6822      	ldr	r2, [r4, #0]
 800cfae:	7813      	ldrb	r3, [r2, #0]
 800cfb0:	4553      	cmp	r3, sl
 800cfb2:	f040 812e 	bne.w	800d212 <__ssvfiscanf_r+0x2e6>
 800cfb6:	6863      	ldr	r3, [r4, #4]
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	6063      	str	r3, [r4, #4]
 800cfbc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cfbe:	3201      	adds	r2, #1
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	6022      	str	r2, [r4, #0]
 800cfc4:	9345      	str	r3, [sp, #276]	; 0x114
 800cfc6:	e7d8      	b.n	800cf7a <__ssvfiscanf_r+0x4e>
 800cfc8:	9141      	str	r1, [sp, #260]	; 0x104
 800cfca:	9143      	str	r1, [sp, #268]	; 0x10c
 800cfcc:	7853      	ldrb	r3, [r2, #1]
 800cfce:	2b2a      	cmp	r3, #42	; 0x2a
 800cfd0:	bf02      	ittt	eq
 800cfd2:	2310      	moveq	r3, #16
 800cfd4:	1c95      	addeq	r5, r2, #2
 800cfd6:	9341      	streq	r3, [sp, #260]	; 0x104
 800cfd8:	220a      	movs	r2, #10
 800cfda:	46aa      	mov	sl, r5
 800cfdc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cfe0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cfe4:	2b09      	cmp	r3, #9
 800cfe6:	d91d      	bls.n	800d024 <__ssvfiscanf_r+0xf8>
 800cfe8:	487e      	ldr	r0, [pc, #504]	; (800d1e4 <__ssvfiscanf_r+0x2b8>)
 800cfea:	2203      	movs	r2, #3
 800cfec:	f7f4 ff40 	bl	8001e70 <memchr>
 800cff0:	b140      	cbz	r0, 800d004 <__ssvfiscanf_r+0xd8>
 800cff2:	2301      	movs	r3, #1
 800cff4:	eba0 0009 	sub.w	r0, r0, r9
 800cff8:	fa03 f000 	lsl.w	r0, r3, r0
 800cffc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cffe:	4318      	orrs	r0, r3
 800d000:	9041      	str	r0, [sp, #260]	; 0x104
 800d002:	4655      	mov	r5, sl
 800d004:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d008:	2b78      	cmp	r3, #120	; 0x78
 800d00a:	d806      	bhi.n	800d01a <__ssvfiscanf_r+0xee>
 800d00c:	2b57      	cmp	r3, #87	; 0x57
 800d00e:	d810      	bhi.n	800d032 <__ssvfiscanf_r+0x106>
 800d010:	2b25      	cmp	r3, #37	; 0x25
 800d012:	d0c6      	beq.n	800cfa2 <__ssvfiscanf_r+0x76>
 800d014:	d856      	bhi.n	800d0c4 <__ssvfiscanf_r+0x198>
 800d016:	2b00      	cmp	r3, #0
 800d018:	d064      	beq.n	800d0e4 <__ssvfiscanf_r+0x1b8>
 800d01a:	2303      	movs	r3, #3
 800d01c:	9347      	str	r3, [sp, #284]	; 0x11c
 800d01e:	230a      	movs	r3, #10
 800d020:	9342      	str	r3, [sp, #264]	; 0x108
 800d022:	e071      	b.n	800d108 <__ssvfiscanf_r+0x1dc>
 800d024:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d026:	fb02 1103 	mla	r1, r2, r3, r1
 800d02a:	3930      	subs	r1, #48	; 0x30
 800d02c:	9143      	str	r1, [sp, #268]	; 0x10c
 800d02e:	4655      	mov	r5, sl
 800d030:	e7d3      	b.n	800cfda <__ssvfiscanf_r+0xae>
 800d032:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d036:	2a20      	cmp	r2, #32
 800d038:	d8ef      	bhi.n	800d01a <__ssvfiscanf_r+0xee>
 800d03a:	a101      	add	r1, pc, #4	; (adr r1, 800d040 <__ssvfiscanf_r+0x114>)
 800d03c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d040:	0800d0f3 	.word	0x0800d0f3
 800d044:	0800d01b 	.word	0x0800d01b
 800d048:	0800d01b 	.word	0x0800d01b
 800d04c:	0800d151 	.word	0x0800d151
 800d050:	0800d01b 	.word	0x0800d01b
 800d054:	0800d01b 	.word	0x0800d01b
 800d058:	0800d01b 	.word	0x0800d01b
 800d05c:	0800d01b 	.word	0x0800d01b
 800d060:	0800d01b 	.word	0x0800d01b
 800d064:	0800d01b 	.word	0x0800d01b
 800d068:	0800d01b 	.word	0x0800d01b
 800d06c:	0800d167 	.word	0x0800d167
 800d070:	0800d13d 	.word	0x0800d13d
 800d074:	0800d0cb 	.word	0x0800d0cb
 800d078:	0800d0cb 	.word	0x0800d0cb
 800d07c:	0800d0cb 	.word	0x0800d0cb
 800d080:	0800d01b 	.word	0x0800d01b
 800d084:	0800d141 	.word	0x0800d141
 800d088:	0800d01b 	.word	0x0800d01b
 800d08c:	0800d01b 	.word	0x0800d01b
 800d090:	0800d01b 	.word	0x0800d01b
 800d094:	0800d01b 	.word	0x0800d01b
 800d098:	0800d177 	.word	0x0800d177
 800d09c:	0800d149 	.word	0x0800d149
 800d0a0:	0800d0eb 	.word	0x0800d0eb
 800d0a4:	0800d01b 	.word	0x0800d01b
 800d0a8:	0800d01b 	.word	0x0800d01b
 800d0ac:	0800d173 	.word	0x0800d173
 800d0b0:	0800d01b 	.word	0x0800d01b
 800d0b4:	0800d13d 	.word	0x0800d13d
 800d0b8:	0800d01b 	.word	0x0800d01b
 800d0bc:	0800d01b 	.word	0x0800d01b
 800d0c0:	0800d0f3 	.word	0x0800d0f3
 800d0c4:	3b45      	subs	r3, #69	; 0x45
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	d8a7      	bhi.n	800d01a <__ssvfiscanf_r+0xee>
 800d0ca:	2305      	movs	r3, #5
 800d0cc:	e01b      	b.n	800d106 <__ssvfiscanf_r+0x1da>
 800d0ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	4798      	blx	r3
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	f43f af68 	beq.w	800cfac <__ssvfiscanf_r+0x80>
 800d0dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	f040 808d 	bne.w	800d1fe <__ssvfiscanf_r+0x2d2>
 800d0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e8:	e08f      	b.n	800d20a <__ssvfiscanf_r+0x2de>
 800d0ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d0ec:	f042 0220 	orr.w	r2, r2, #32
 800d0f0:	9241      	str	r2, [sp, #260]	; 0x104
 800d0f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d0f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0f8:	9241      	str	r2, [sp, #260]	; 0x104
 800d0fa:	2210      	movs	r2, #16
 800d0fc:	2b6f      	cmp	r3, #111	; 0x6f
 800d0fe:	9242      	str	r2, [sp, #264]	; 0x108
 800d100:	bf34      	ite	cc
 800d102:	2303      	movcc	r3, #3
 800d104:	2304      	movcs	r3, #4
 800d106:	9347      	str	r3, [sp, #284]	; 0x11c
 800d108:	6863      	ldr	r3, [r4, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	dd42      	ble.n	800d194 <__ssvfiscanf_r+0x268>
 800d10e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d110:	0659      	lsls	r1, r3, #25
 800d112:	d404      	bmi.n	800d11e <__ssvfiscanf_r+0x1f2>
 800d114:	6823      	ldr	r3, [r4, #0]
 800d116:	781a      	ldrb	r2, [r3, #0]
 800d118:	5cba      	ldrb	r2, [r7, r2]
 800d11a:	0712      	lsls	r2, r2, #28
 800d11c:	d441      	bmi.n	800d1a2 <__ssvfiscanf_r+0x276>
 800d11e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d120:	2b02      	cmp	r3, #2
 800d122:	dc50      	bgt.n	800d1c6 <__ssvfiscanf_r+0x29a>
 800d124:	466b      	mov	r3, sp
 800d126:	4622      	mov	r2, r4
 800d128:	a941      	add	r1, sp, #260	; 0x104
 800d12a:	4630      	mov	r0, r6
 800d12c:	f000 fb64 	bl	800d7f8 <_scanf_chars>
 800d130:	2801      	cmp	r0, #1
 800d132:	d06e      	beq.n	800d212 <__ssvfiscanf_r+0x2e6>
 800d134:	2802      	cmp	r0, #2
 800d136:	f47f af20 	bne.w	800cf7a <__ssvfiscanf_r+0x4e>
 800d13a:	e7cf      	b.n	800d0dc <__ssvfiscanf_r+0x1b0>
 800d13c:	220a      	movs	r2, #10
 800d13e:	e7dd      	b.n	800d0fc <__ssvfiscanf_r+0x1d0>
 800d140:	2300      	movs	r3, #0
 800d142:	9342      	str	r3, [sp, #264]	; 0x108
 800d144:	2303      	movs	r3, #3
 800d146:	e7de      	b.n	800d106 <__ssvfiscanf_r+0x1da>
 800d148:	2308      	movs	r3, #8
 800d14a:	9342      	str	r3, [sp, #264]	; 0x108
 800d14c:	2304      	movs	r3, #4
 800d14e:	e7da      	b.n	800d106 <__ssvfiscanf_r+0x1da>
 800d150:	4629      	mov	r1, r5
 800d152:	4640      	mov	r0, r8
 800d154:	f000 fcb4 	bl	800dac0 <__sccl>
 800d158:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d15e:	9341      	str	r3, [sp, #260]	; 0x104
 800d160:	4605      	mov	r5, r0
 800d162:	2301      	movs	r3, #1
 800d164:	e7cf      	b.n	800d106 <__ssvfiscanf_r+0x1da>
 800d166:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d16c:	9341      	str	r3, [sp, #260]	; 0x104
 800d16e:	2300      	movs	r3, #0
 800d170:	e7c9      	b.n	800d106 <__ssvfiscanf_r+0x1da>
 800d172:	2302      	movs	r3, #2
 800d174:	e7c7      	b.n	800d106 <__ssvfiscanf_r+0x1da>
 800d176:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d178:	06c3      	lsls	r3, r0, #27
 800d17a:	f53f aefe 	bmi.w	800cf7a <__ssvfiscanf_r+0x4e>
 800d17e:	9b00      	ldr	r3, [sp, #0]
 800d180:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d182:	1d19      	adds	r1, r3, #4
 800d184:	9100      	str	r1, [sp, #0]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f010 0f01 	tst.w	r0, #1
 800d18c:	bf14      	ite	ne
 800d18e:	801a      	strhne	r2, [r3, #0]
 800d190:	601a      	streq	r2, [r3, #0]
 800d192:	e6f2      	b.n	800cf7a <__ssvfiscanf_r+0x4e>
 800d194:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d196:	4621      	mov	r1, r4
 800d198:	4630      	mov	r0, r6
 800d19a:	4798      	blx	r3
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d0b6      	beq.n	800d10e <__ssvfiscanf_r+0x1e2>
 800d1a0:	e79c      	b.n	800d0dc <__ssvfiscanf_r+0x1b0>
 800d1a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d1a4:	3201      	adds	r2, #1
 800d1a6:	9245      	str	r2, [sp, #276]	; 0x114
 800d1a8:	6862      	ldr	r2, [r4, #4]
 800d1aa:	3a01      	subs	r2, #1
 800d1ac:	2a00      	cmp	r2, #0
 800d1ae:	6062      	str	r2, [r4, #4]
 800d1b0:	dd02      	ble.n	800d1b8 <__ssvfiscanf_r+0x28c>
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	e7ad      	b.n	800d114 <__ssvfiscanf_r+0x1e8>
 800d1b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4630      	mov	r0, r6
 800d1be:	4798      	blx	r3
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d0a7      	beq.n	800d114 <__ssvfiscanf_r+0x1e8>
 800d1c4:	e78a      	b.n	800d0dc <__ssvfiscanf_r+0x1b0>
 800d1c6:	2b04      	cmp	r3, #4
 800d1c8:	dc0e      	bgt.n	800d1e8 <__ssvfiscanf_r+0x2bc>
 800d1ca:	466b      	mov	r3, sp
 800d1cc:	4622      	mov	r2, r4
 800d1ce:	a941      	add	r1, sp, #260	; 0x104
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f000 fb6b 	bl	800d8ac <_scanf_i>
 800d1d6:	e7ab      	b.n	800d130 <__ssvfiscanf_r+0x204>
 800d1d8:	0800ce79 	.word	0x0800ce79
 800d1dc:	0800cef3 	.word	0x0800cef3
 800d1e0:	0800f263 	.word	0x0800f263
 800d1e4:	0800f369 	.word	0x0800f369
 800d1e8:	4b0b      	ldr	r3, [pc, #44]	; (800d218 <__ssvfiscanf_r+0x2ec>)
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f43f aec5 	beq.w	800cf7a <__ssvfiscanf_r+0x4e>
 800d1f0:	466b      	mov	r3, sp
 800d1f2:	4622      	mov	r2, r4
 800d1f4:	a941      	add	r1, sp, #260	; 0x104
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f3af 8000 	nop.w
 800d1fc:	e798      	b.n	800d130 <__ssvfiscanf_r+0x204>
 800d1fe:	89a3      	ldrh	r3, [r4, #12]
 800d200:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d204:	bf18      	it	ne
 800d206:	f04f 30ff 	movne.w	r0, #4294967295
 800d20a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d212:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d214:	e7f9      	b.n	800d20a <__ssvfiscanf_r+0x2de>
 800d216:	bf00      	nop
 800d218:	00000000 	.word	0x00000000

0800d21c <__sfputc_r>:
 800d21c:	6893      	ldr	r3, [r2, #8]
 800d21e:	3b01      	subs	r3, #1
 800d220:	2b00      	cmp	r3, #0
 800d222:	b410      	push	{r4}
 800d224:	6093      	str	r3, [r2, #8]
 800d226:	da08      	bge.n	800d23a <__sfputc_r+0x1e>
 800d228:	6994      	ldr	r4, [r2, #24]
 800d22a:	42a3      	cmp	r3, r4
 800d22c:	db01      	blt.n	800d232 <__sfputc_r+0x16>
 800d22e:	290a      	cmp	r1, #10
 800d230:	d103      	bne.n	800d23a <__sfputc_r+0x1e>
 800d232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d236:	f7ff ba17 	b.w	800c668 <__swbuf_r>
 800d23a:	6813      	ldr	r3, [r2, #0]
 800d23c:	1c58      	adds	r0, r3, #1
 800d23e:	6010      	str	r0, [r2, #0]
 800d240:	7019      	strb	r1, [r3, #0]
 800d242:	4608      	mov	r0, r1
 800d244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <__sfputs_r>:
 800d24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24c:	4606      	mov	r6, r0
 800d24e:	460f      	mov	r7, r1
 800d250:	4614      	mov	r4, r2
 800d252:	18d5      	adds	r5, r2, r3
 800d254:	42ac      	cmp	r4, r5
 800d256:	d101      	bne.n	800d25c <__sfputs_r+0x12>
 800d258:	2000      	movs	r0, #0
 800d25a:	e007      	b.n	800d26c <__sfputs_r+0x22>
 800d25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d260:	463a      	mov	r2, r7
 800d262:	4630      	mov	r0, r6
 800d264:	f7ff ffda 	bl	800d21c <__sfputc_r>
 800d268:	1c43      	adds	r3, r0, #1
 800d26a:	d1f3      	bne.n	800d254 <__sfputs_r+0xa>
 800d26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d270 <_vfiprintf_r>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	460d      	mov	r5, r1
 800d276:	b09d      	sub	sp, #116	; 0x74
 800d278:	4614      	mov	r4, r2
 800d27a:	4698      	mov	r8, r3
 800d27c:	4606      	mov	r6, r0
 800d27e:	b118      	cbz	r0, 800d288 <_vfiprintf_r+0x18>
 800d280:	6983      	ldr	r3, [r0, #24]
 800d282:	b90b      	cbnz	r3, 800d288 <_vfiprintf_r+0x18>
 800d284:	f7fe fd8c 	bl	800bda0 <__sinit>
 800d288:	4b89      	ldr	r3, [pc, #548]	; (800d4b0 <_vfiprintf_r+0x240>)
 800d28a:	429d      	cmp	r5, r3
 800d28c:	d11b      	bne.n	800d2c6 <_vfiprintf_r+0x56>
 800d28e:	6875      	ldr	r5, [r6, #4]
 800d290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d292:	07d9      	lsls	r1, r3, #31
 800d294:	d405      	bmi.n	800d2a2 <_vfiprintf_r+0x32>
 800d296:	89ab      	ldrh	r3, [r5, #12]
 800d298:	059a      	lsls	r2, r3, #22
 800d29a:	d402      	bmi.n	800d2a2 <_vfiprintf_r+0x32>
 800d29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d29e:	f7fe fe42 	bl	800bf26 <__retarget_lock_acquire_recursive>
 800d2a2:	89ab      	ldrh	r3, [r5, #12]
 800d2a4:	071b      	lsls	r3, r3, #28
 800d2a6:	d501      	bpl.n	800d2ac <_vfiprintf_r+0x3c>
 800d2a8:	692b      	ldr	r3, [r5, #16]
 800d2aa:	b9eb      	cbnz	r3, 800d2e8 <_vfiprintf_r+0x78>
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	f7ff fa3e 	bl	800c730 <__swsetup_r>
 800d2b4:	b1c0      	cbz	r0, 800d2e8 <_vfiprintf_r+0x78>
 800d2b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2b8:	07dc      	lsls	r4, r3, #31
 800d2ba:	d50e      	bpl.n	800d2da <_vfiprintf_r+0x6a>
 800d2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c0:	b01d      	add	sp, #116	; 0x74
 800d2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c6:	4b7b      	ldr	r3, [pc, #492]	; (800d4b4 <_vfiprintf_r+0x244>)
 800d2c8:	429d      	cmp	r5, r3
 800d2ca:	d101      	bne.n	800d2d0 <_vfiprintf_r+0x60>
 800d2cc:	68b5      	ldr	r5, [r6, #8]
 800d2ce:	e7df      	b.n	800d290 <_vfiprintf_r+0x20>
 800d2d0:	4b79      	ldr	r3, [pc, #484]	; (800d4b8 <_vfiprintf_r+0x248>)
 800d2d2:	429d      	cmp	r5, r3
 800d2d4:	bf08      	it	eq
 800d2d6:	68f5      	ldreq	r5, [r6, #12]
 800d2d8:	e7da      	b.n	800d290 <_vfiprintf_r+0x20>
 800d2da:	89ab      	ldrh	r3, [r5, #12]
 800d2dc:	0598      	lsls	r0, r3, #22
 800d2de:	d4ed      	bmi.n	800d2bc <_vfiprintf_r+0x4c>
 800d2e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2e2:	f7fe fe21 	bl	800bf28 <__retarget_lock_release_recursive>
 800d2e6:	e7e9      	b.n	800d2bc <_vfiprintf_r+0x4c>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ec:	2320      	movs	r3, #32
 800d2ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2f6:	2330      	movs	r3, #48	; 0x30
 800d2f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4bc <_vfiprintf_r+0x24c>
 800d2fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d300:	f04f 0901 	mov.w	r9, #1
 800d304:	4623      	mov	r3, r4
 800d306:	469a      	mov	sl, r3
 800d308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d30c:	b10a      	cbz	r2, 800d312 <_vfiprintf_r+0xa2>
 800d30e:	2a25      	cmp	r2, #37	; 0x25
 800d310:	d1f9      	bne.n	800d306 <_vfiprintf_r+0x96>
 800d312:	ebba 0b04 	subs.w	fp, sl, r4
 800d316:	d00b      	beq.n	800d330 <_vfiprintf_r+0xc0>
 800d318:	465b      	mov	r3, fp
 800d31a:	4622      	mov	r2, r4
 800d31c:	4629      	mov	r1, r5
 800d31e:	4630      	mov	r0, r6
 800d320:	f7ff ff93 	bl	800d24a <__sfputs_r>
 800d324:	3001      	adds	r0, #1
 800d326:	f000 80aa 	beq.w	800d47e <_vfiprintf_r+0x20e>
 800d32a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d32c:	445a      	add	r2, fp
 800d32e:	9209      	str	r2, [sp, #36]	; 0x24
 800d330:	f89a 3000 	ldrb.w	r3, [sl]
 800d334:	2b00      	cmp	r3, #0
 800d336:	f000 80a2 	beq.w	800d47e <_vfiprintf_r+0x20e>
 800d33a:	2300      	movs	r3, #0
 800d33c:	f04f 32ff 	mov.w	r2, #4294967295
 800d340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d344:	f10a 0a01 	add.w	sl, sl, #1
 800d348:	9304      	str	r3, [sp, #16]
 800d34a:	9307      	str	r3, [sp, #28]
 800d34c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d350:	931a      	str	r3, [sp, #104]	; 0x68
 800d352:	4654      	mov	r4, sl
 800d354:	2205      	movs	r2, #5
 800d356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d35a:	4858      	ldr	r0, [pc, #352]	; (800d4bc <_vfiprintf_r+0x24c>)
 800d35c:	f7f4 fd88 	bl	8001e70 <memchr>
 800d360:	9a04      	ldr	r2, [sp, #16]
 800d362:	b9d8      	cbnz	r0, 800d39c <_vfiprintf_r+0x12c>
 800d364:	06d1      	lsls	r1, r2, #27
 800d366:	bf44      	itt	mi
 800d368:	2320      	movmi	r3, #32
 800d36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d36e:	0713      	lsls	r3, r2, #28
 800d370:	bf44      	itt	mi
 800d372:	232b      	movmi	r3, #43	; 0x2b
 800d374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d378:	f89a 3000 	ldrb.w	r3, [sl]
 800d37c:	2b2a      	cmp	r3, #42	; 0x2a
 800d37e:	d015      	beq.n	800d3ac <_vfiprintf_r+0x13c>
 800d380:	9a07      	ldr	r2, [sp, #28]
 800d382:	4654      	mov	r4, sl
 800d384:	2000      	movs	r0, #0
 800d386:	f04f 0c0a 	mov.w	ip, #10
 800d38a:	4621      	mov	r1, r4
 800d38c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d390:	3b30      	subs	r3, #48	; 0x30
 800d392:	2b09      	cmp	r3, #9
 800d394:	d94e      	bls.n	800d434 <_vfiprintf_r+0x1c4>
 800d396:	b1b0      	cbz	r0, 800d3c6 <_vfiprintf_r+0x156>
 800d398:	9207      	str	r2, [sp, #28]
 800d39a:	e014      	b.n	800d3c6 <_vfiprintf_r+0x156>
 800d39c:	eba0 0308 	sub.w	r3, r0, r8
 800d3a0:	fa09 f303 	lsl.w	r3, r9, r3
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	9304      	str	r3, [sp, #16]
 800d3a8:	46a2      	mov	sl, r4
 800d3aa:	e7d2      	b.n	800d352 <_vfiprintf_r+0xe2>
 800d3ac:	9b03      	ldr	r3, [sp, #12]
 800d3ae:	1d19      	adds	r1, r3, #4
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	9103      	str	r1, [sp, #12]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	bfbb      	ittet	lt
 800d3b8:	425b      	neglt	r3, r3
 800d3ba:	f042 0202 	orrlt.w	r2, r2, #2
 800d3be:	9307      	strge	r3, [sp, #28]
 800d3c0:	9307      	strlt	r3, [sp, #28]
 800d3c2:	bfb8      	it	lt
 800d3c4:	9204      	strlt	r2, [sp, #16]
 800d3c6:	7823      	ldrb	r3, [r4, #0]
 800d3c8:	2b2e      	cmp	r3, #46	; 0x2e
 800d3ca:	d10c      	bne.n	800d3e6 <_vfiprintf_r+0x176>
 800d3cc:	7863      	ldrb	r3, [r4, #1]
 800d3ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d3d0:	d135      	bne.n	800d43e <_vfiprintf_r+0x1ce>
 800d3d2:	9b03      	ldr	r3, [sp, #12]
 800d3d4:	1d1a      	adds	r2, r3, #4
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	9203      	str	r2, [sp, #12]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	bfb8      	it	lt
 800d3de:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3e2:	3402      	adds	r4, #2
 800d3e4:	9305      	str	r3, [sp, #20]
 800d3e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4cc <_vfiprintf_r+0x25c>
 800d3ea:	7821      	ldrb	r1, [r4, #0]
 800d3ec:	2203      	movs	r2, #3
 800d3ee:	4650      	mov	r0, sl
 800d3f0:	f7f4 fd3e 	bl	8001e70 <memchr>
 800d3f4:	b140      	cbz	r0, 800d408 <_vfiprintf_r+0x198>
 800d3f6:	2340      	movs	r3, #64	; 0x40
 800d3f8:	eba0 000a 	sub.w	r0, r0, sl
 800d3fc:	fa03 f000 	lsl.w	r0, r3, r0
 800d400:	9b04      	ldr	r3, [sp, #16]
 800d402:	4303      	orrs	r3, r0
 800d404:	3401      	adds	r4, #1
 800d406:	9304      	str	r3, [sp, #16]
 800d408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d40c:	482c      	ldr	r0, [pc, #176]	; (800d4c0 <_vfiprintf_r+0x250>)
 800d40e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d412:	2206      	movs	r2, #6
 800d414:	f7f4 fd2c 	bl	8001e70 <memchr>
 800d418:	2800      	cmp	r0, #0
 800d41a:	d03f      	beq.n	800d49c <_vfiprintf_r+0x22c>
 800d41c:	4b29      	ldr	r3, [pc, #164]	; (800d4c4 <_vfiprintf_r+0x254>)
 800d41e:	bb1b      	cbnz	r3, 800d468 <_vfiprintf_r+0x1f8>
 800d420:	9b03      	ldr	r3, [sp, #12]
 800d422:	3307      	adds	r3, #7
 800d424:	f023 0307 	bic.w	r3, r3, #7
 800d428:	3308      	adds	r3, #8
 800d42a:	9303      	str	r3, [sp, #12]
 800d42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d42e:	443b      	add	r3, r7
 800d430:	9309      	str	r3, [sp, #36]	; 0x24
 800d432:	e767      	b.n	800d304 <_vfiprintf_r+0x94>
 800d434:	fb0c 3202 	mla	r2, ip, r2, r3
 800d438:	460c      	mov	r4, r1
 800d43a:	2001      	movs	r0, #1
 800d43c:	e7a5      	b.n	800d38a <_vfiprintf_r+0x11a>
 800d43e:	2300      	movs	r3, #0
 800d440:	3401      	adds	r4, #1
 800d442:	9305      	str	r3, [sp, #20]
 800d444:	4619      	mov	r1, r3
 800d446:	f04f 0c0a 	mov.w	ip, #10
 800d44a:	4620      	mov	r0, r4
 800d44c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d450:	3a30      	subs	r2, #48	; 0x30
 800d452:	2a09      	cmp	r2, #9
 800d454:	d903      	bls.n	800d45e <_vfiprintf_r+0x1ee>
 800d456:	2b00      	cmp	r3, #0
 800d458:	d0c5      	beq.n	800d3e6 <_vfiprintf_r+0x176>
 800d45a:	9105      	str	r1, [sp, #20]
 800d45c:	e7c3      	b.n	800d3e6 <_vfiprintf_r+0x176>
 800d45e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d462:	4604      	mov	r4, r0
 800d464:	2301      	movs	r3, #1
 800d466:	e7f0      	b.n	800d44a <_vfiprintf_r+0x1da>
 800d468:	ab03      	add	r3, sp, #12
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	462a      	mov	r2, r5
 800d46e:	4b16      	ldr	r3, [pc, #88]	; (800d4c8 <_vfiprintf_r+0x258>)
 800d470:	a904      	add	r1, sp, #16
 800d472:	4630      	mov	r0, r6
 800d474:	f3af 8000 	nop.w
 800d478:	4607      	mov	r7, r0
 800d47a:	1c78      	adds	r0, r7, #1
 800d47c:	d1d6      	bne.n	800d42c <_vfiprintf_r+0x1bc>
 800d47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d480:	07d9      	lsls	r1, r3, #31
 800d482:	d405      	bmi.n	800d490 <_vfiprintf_r+0x220>
 800d484:	89ab      	ldrh	r3, [r5, #12]
 800d486:	059a      	lsls	r2, r3, #22
 800d488:	d402      	bmi.n	800d490 <_vfiprintf_r+0x220>
 800d48a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d48c:	f7fe fd4c 	bl	800bf28 <__retarget_lock_release_recursive>
 800d490:	89ab      	ldrh	r3, [r5, #12]
 800d492:	065b      	lsls	r3, r3, #25
 800d494:	f53f af12 	bmi.w	800d2bc <_vfiprintf_r+0x4c>
 800d498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d49a:	e711      	b.n	800d2c0 <_vfiprintf_r+0x50>
 800d49c:	ab03      	add	r3, sp, #12
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	4b09      	ldr	r3, [pc, #36]	; (800d4c8 <_vfiprintf_r+0x258>)
 800d4a4:	a904      	add	r1, sp, #16
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	f000 f880 	bl	800d5ac <_printf_i>
 800d4ac:	e7e4      	b.n	800d478 <_vfiprintf_r+0x208>
 800d4ae:	bf00      	nop
 800d4b0:	0800f170 	.word	0x0800f170
 800d4b4:	0800f190 	.word	0x0800f190
 800d4b8:	0800f150 	.word	0x0800f150
 800d4bc:	0800f363 	.word	0x0800f363
 800d4c0:	0800f36d 	.word	0x0800f36d
 800d4c4:	00000000 	.word	0x00000000
 800d4c8:	0800d24b 	.word	0x0800d24b
 800d4cc:	0800f369 	.word	0x0800f369

0800d4d0 <_printf_common>:
 800d4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d4:	4616      	mov	r6, r2
 800d4d6:	4699      	mov	r9, r3
 800d4d8:	688a      	ldr	r2, [r1, #8]
 800d4da:	690b      	ldr	r3, [r1, #16]
 800d4dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	bfb8      	it	lt
 800d4e4:	4613      	movlt	r3, r2
 800d4e6:	6033      	str	r3, [r6, #0]
 800d4e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4ec:	4607      	mov	r7, r0
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	b10a      	cbz	r2, 800d4f6 <_printf_common+0x26>
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	6033      	str	r3, [r6, #0]
 800d4f6:	6823      	ldr	r3, [r4, #0]
 800d4f8:	0699      	lsls	r1, r3, #26
 800d4fa:	bf42      	ittt	mi
 800d4fc:	6833      	ldrmi	r3, [r6, #0]
 800d4fe:	3302      	addmi	r3, #2
 800d500:	6033      	strmi	r3, [r6, #0]
 800d502:	6825      	ldr	r5, [r4, #0]
 800d504:	f015 0506 	ands.w	r5, r5, #6
 800d508:	d106      	bne.n	800d518 <_printf_common+0x48>
 800d50a:	f104 0a19 	add.w	sl, r4, #25
 800d50e:	68e3      	ldr	r3, [r4, #12]
 800d510:	6832      	ldr	r2, [r6, #0]
 800d512:	1a9b      	subs	r3, r3, r2
 800d514:	42ab      	cmp	r3, r5
 800d516:	dc26      	bgt.n	800d566 <_printf_common+0x96>
 800d518:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d51c:	1e13      	subs	r3, r2, #0
 800d51e:	6822      	ldr	r2, [r4, #0]
 800d520:	bf18      	it	ne
 800d522:	2301      	movne	r3, #1
 800d524:	0692      	lsls	r2, r2, #26
 800d526:	d42b      	bmi.n	800d580 <_printf_common+0xb0>
 800d528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d52c:	4649      	mov	r1, r9
 800d52e:	4638      	mov	r0, r7
 800d530:	47c0      	blx	r8
 800d532:	3001      	adds	r0, #1
 800d534:	d01e      	beq.n	800d574 <_printf_common+0xa4>
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	68e5      	ldr	r5, [r4, #12]
 800d53a:	6832      	ldr	r2, [r6, #0]
 800d53c:	f003 0306 	and.w	r3, r3, #6
 800d540:	2b04      	cmp	r3, #4
 800d542:	bf08      	it	eq
 800d544:	1aad      	subeq	r5, r5, r2
 800d546:	68a3      	ldr	r3, [r4, #8]
 800d548:	6922      	ldr	r2, [r4, #16]
 800d54a:	bf0c      	ite	eq
 800d54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d550:	2500      	movne	r5, #0
 800d552:	4293      	cmp	r3, r2
 800d554:	bfc4      	itt	gt
 800d556:	1a9b      	subgt	r3, r3, r2
 800d558:	18ed      	addgt	r5, r5, r3
 800d55a:	2600      	movs	r6, #0
 800d55c:	341a      	adds	r4, #26
 800d55e:	42b5      	cmp	r5, r6
 800d560:	d11a      	bne.n	800d598 <_printf_common+0xc8>
 800d562:	2000      	movs	r0, #0
 800d564:	e008      	b.n	800d578 <_printf_common+0xa8>
 800d566:	2301      	movs	r3, #1
 800d568:	4652      	mov	r2, sl
 800d56a:	4649      	mov	r1, r9
 800d56c:	4638      	mov	r0, r7
 800d56e:	47c0      	blx	r8
 800d570:	3001      	adds	r0, #1
 800d572:	d103      	bne.n	800d57c <_printf_common+0xac>
 800d574:	f04f 30ff 	mov.w	r0, #4294967295
 800d578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d57c:	3501      	adds	r5, #1
 800d57e:	e7c6      	b.n	800d50e <_printf_common+0x3e>
 800d580:	18e1      	adds	r1, r4, r3
 800d582:	1c5a      	adds	r2, r3, #1
 800d584:	2030      	movs	r0, #48	; 0x30
 800d586:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d58a:	4422      	add	r2, r4
 800d58c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d590:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d594:	3302      	adds	r3, #2
 800d596:	e7c7      	b.n	800d528 <_printf_common+0x58>
 800d598:	2301      	movs	r3, #1
 800d59a:	4622      	mov	r2, r4
 800d59c:	4649      	mov	r1, r9
 800d59e:	4638      	mov	r0, r7
 800d5a0:	47c0      	blx	r8
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	d0e6      	beq.n	800d574 <_printf_common+0xa4>
 800d5a6:	3601      	adds	r6, #1
 800d5a8:	e7d9      	b.n	800d55e <_printf_common+0x8e>
	...

0800d5ac <_printf_i>:
 800d5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b0:	7e0f      	ldrb	r7, [r1, #24]
 800d5b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5b4:	2f78      	cmp	r7, #120	; 0x78
 800d5b6:	4691      	mov	r9, r2
 800d5b8:	4680      	mov	r8, r0
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	469a      	mov	sl, r3
 800d5be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5c2:	d807      	bhi.n	800d5d4 <_printf_i+0x28>
 800d5c4:	2f62      	cmp	r7, #98	; 0x62
 800d5c6:	d80a      	bhi.n	800d5de <_printf_i+0x32>
 800d5c8:	2f00      	cmp	r7, #0
 800d5ca:	f000 80d8 	beq.w	800d77e <_printf_i+0x1d2>
 800d5ce:	2f58      	cmp	r7, #88	; 0x58
 800d5d0:	f000 80a3 	beq.w	800d71a <_printf_i+0x16e>
 800d5d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5dc:	e03a      	b.n	800d654 <_printf_i+0xa8>
 800d5de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5e2:	2b15      	cmp	r3, #21
 800d5e4:	d8f6      	bhi.n	800d5d4 <_printf_i+0x28>
 800d5e6:	a101      	add	r1, pc, #4	; (adr r1, 800d5ec <_printf_i+0x40>)
 800d5e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5ec:	0800d645 	.word	0x0800d645
 800d5f0:	0800d659 	.word	0x0800d659
 800d5f4:	0800d5d5 	.word	0x0800d5d5
 800d5f8:	0800d5d5 	.word	0x0800d5d5
 800d5fc:	0800d5d5 	.word	0x0800d5d5
 800d600:	0800d5d5 	.word	0x0800d5d5
 800d604:	0800d659 	.word	0x0800d659
 800d608:	0800d5d5 	.word	0x0800d5d5
 800d60c:	0800d5d5 	.word	0x0800d5d5
 800d610:	0800d5d5 	.word	0x0800d5d5
 800d614:	0800d5d5 	.word	0x0800d5d5
 800d618:	0800d765 	.word	0x0800d765
 800d61c:	0800d689 	.word	0x0800d689
 800d620:	0800d747 	.word	0x0800d747
 800d624:	0800d5d5 	.word	0x0800d5d5
 800d628:	0800d5d5 	.word	0x0800d5d5
 800d62c:	0800d787 	.word	0x0800d787
 800d630:	0800d5d5 	.word	0x0800d5d5
 800d634:	0800d689 	.word	0x0800d689
 800d638:	0800d5d5 	.word	0x0800d5d5
 800d63c:	0800d5d5 	.word	0x0800d5d5
 800d640:	0800d74f 	.word	0x0800d74f
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	1d1a      	adds	r2, r3, #4
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	602a      	str	r2, [r5, #0]
 800d64c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d654:	2301      	movs	r3, #1
 800d656:	e0a3      	b.n	800d7a0 <_printf_i+0x1f4>
 800d658:	6820      	ldr	r0, [r4, #0]
 800d65a:	6829      	ldr	r1, [r5, #0]
 800d65c:	0606      	lsls	r6, r0, #24
 800d65e:	f101 0304 	add.w	r3, r1, #4
 800d662:	d50a      	bpl.n	800d67a <_printf_i+0xce>
 800d664:	680e      	ldr	r6, [r1, #0]
 800d666:	602b      	str	r3, [r5, #0]
 800d668:	2e00      	cmp	r6, #0
 800d66a:	da03      	bge.n	800d674 <_printf_i+0xc8>
 800d66c:	232d      	movs	r3, #45	; 0x2d
 800d66e:	4276      	negs	r6, r6
 800d670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d674:	485e      	ldr	r0, [pc, #376]	; (800d7f0 <_printf_i+0x244>)
 800d676:	230a      	movs	r3, #10
 800d678:	e019      	b.n	800d6ae <_printf_i+0x102>
 800d67a:	680e      	ldr	r6, [r1, #0]
 800d67c:	602b      	str	r3, [r5, #0]
 800d67e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d682:	bf18      	it	ne
 800d684:	b236      	sxthne	r6, r6
 800d686:	e7ef      	b.n	800d668 <_printf_i+0xbc>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	6820      	ldr	r0, [r4, #0]
 800d68c:	1d19      	adds	r1, r3, #4
 800d68e:	6029      	str	r1, [r5, #0]
 800d690:	0601      	lsls	r1, r0, #24
 800d692:	d501      	bpl.n	800d698 <_printf_i+0xec>
 800d694:	681e      	ldr	r6, [r3, #0]
 800d696:	e002      	b.n	800d69e <_printf_i+0xf2>
 800d698:	0646      	lsls	r6, r0, #25
 800d69a:	d5fb      	bpl.n	800d694 <_printf_i+0xe8>
 800d69c:	881e      	ldrh	r6, [r3, #0]
 800d69e:	4854      	ldr	r0, [pc, #336]	; (800d7f0 <_printf_i+0x244>)
 800d6a0:	2f6f      	cmp	r7, #111	; 0x6f
 800d6a2:	bf0c      	ite	eq
 800d6a4:	2308      	moveq	r3, #8
 800d6a6:	230a      	movne	r3, #10
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6ae:	6865      	ldr	r5, [r4, #4]
 800d6b0:	60a5      	str	r5, [r4, #8]
 800d6b2:	2d00      	cmp	r5, #0
 800d6b4:	bfa2      	ittt	ge
 800d6b6:	6821      	ldrge	r1, [r4, #0]
 800d6b8:	f021 0104 	bicge.w	r1, r1, #4
 800d6bc:	6021      	strge	r1, [r4, #0]
 800d6be:	b90e      	cbnz	r6, 800d6c4 <_printf_i+0x118>
 800d6c0:	2d00      	cmp	r5, #0
 800d6c2:	d04d      	beq.n	800d760 <_printf_i+0x1b4>
 800d6c4:	4615      	mov	r5, r2
 800d6c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6ca:	fb03 6711 	mls	r7, r3, r1, r6
 800d6ce:	5dc7      	ldrb	r7, [r0, r7]
 800d6d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6d4:	4637      	mov	r7, r6
 800d6d6:	42bb      	cmp	r3, r7
 800d6d8:	460e      	mov	r6, r1
 800d6da:	d9f4      	bls.n	800d6c6 <_printf_i+0x11a>
 800d6dc:	2b08      	cmp	r3, #8
 800d6de:	d10b      	bne.n	800d6f8 <_printf_i+0x14c>
 800d6e0:	6823      	ldr	r3, [r4, #0]
 800d6e2:	07de      	lsls	r6, r3, #31
 800d6e4:	d508      	bpl.n	800d6f8 <_printf_i+0x14c>
 800d6e6:	6923      	ldr	r3, [r4, #16]
 800d6e8:	6861      	ldr	r1, [r4, #4]
 800d6ea:	4299      	cmp	r1, r3
 800d6ec:	bfde      	ittt	le
 800d6ee:	2330      	movle	r3, #48	; 0x30
 800d6f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6f8:	1b52      	subs	r2, r2, r5
 800d6fa:	6122      	str	r2, [r4, #16]
 800d6fc:	f8cd a000 	str.w	sl, [sp]
 800d700:	464b      	mov	r3, r9
 800d702:	aa03      	add	r2, sp, #12
 800d704:	4621      	mov	r1, r4
 800d706:	4640      	mov	r0, r8
 800d708:	f7ff fee2 	bl	800d4d0 <_printf_common>
 800d70c:	3001      	adds	r0, #1
 800d70e:	d14c      	bne.n	800d7aa <_printf_i+0x1fe>
 800d710:	f04f 30ff 	mov.w	r0, #4294967295
 800d714:	b004      	add	sp, #16
 800d716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71a:	4835      	ldr	r0, [pc, #212]	; (800d7f0 <_printf_i+0x244>)
 800d71c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d720:	6829      	ldr	r1, [r5, #0]
 800d722:	6823      	ldr	r3, [r4, #0]
 800d724:	f851 6b04 	ldr.w	r6, [r1], #4
 800d728:	6029      	str	r1, [r5, #0]
 800d72a:	061d      	lsls	r5, r3, #24
 800d72c:	d514      	bpl.n	800d758 <_printf_i+0x1ac>
 800d72e:	07df      	lsls	r7, r3, #31
 800d730:	bf44      	itt	mi
 800d732:	f043 0320 	orrmi.w	r3, r3, #32
 800d736:	6023      	strmi	r3, [r4, #0]
 800d738:	b91e      	cbnz	r6, 800d742 <_printf_i+0x196>
 800d73a:	6823      	ldr	r3, [r4, #0]
 800d73c:	f023 0320 	bic.w	r3, r3, #32
 800d740:	6023      	str	r3, [r4, #0]
 800d742:	2310      	movs	r3, #16
 800d744:	e7b0      	b.n	800d6a8 <_printf_i+0xfc>
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	f043 0320 	orr.w	r3, r3, #32
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	2378      	movs	r3, #120	; 0x78
 800d750:	4828      	ldr	r0, [pc, #160]	; (800d7f4 <_printf_i+0x248>)
 800d752:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d756:	e7e3      	b.n	800d720 <_printf_i+0x174>
 800d758:	0659      	lsls	r1, r3, #25
 800d75a:	bf48      	it	mi
 800d75c:	b2b6      	uxthmi	r6, r6
 800d75e:	e7e6      	b.n	800d72e <_printf_i+0x182>
 800d760:	4615      	mov	r5, r2
 800d762:	e7bb      	b.n	800d6dc <_printf_i+0x130>
 800d764:	682b      	ldr	r3, [r5, #0]
 800d766:	6826      	ldr	r6, [r4, #0]
 800d768:	6961      	ldr	r1, [r4, #20]
 800d76a:	1d18      	adds	r0, r3, #4
 800d76c:	6028      	str	r0, [r5, #0]
 800d76e:	0635      	lsls	r5, r6, #24
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	d501      	bpl.n	800d778 <_printf_i+0x1cc>
 800d774:	6019      	str	r1, [r3, #0]
 800d776:	e002      	b.n	800d77e <_printf_i+0x1d2>
 800d778:	0670      	lsls	r0, r6, #25
 800d77a:	d5fb      	bpl.n	800d774 <_printf_i+0x1c8>
 800d77c:	8019      	strh	r1, [r3, #0]
 800d77e:	2300      	movs	r3, #0
 800d780:	6123      	str	r3, [r4, #16]
 800d782:	4615      	mov	r5, r2
 800d784:	e7ba      	b.n	800d6fc <_printf_i+0x150>
 800d786:	682b      	ldr	r3, [r5, #0]
 800d788:	1d1a      	adds	r2, r3, #4
 800d78a:	602a      	str	r2, [r5, #0]
 800d78c:	681d      	ldr	r5, [r3, #0]
 800d78e:	6862      	ldr	r2, [r4, #4]
 800d790:	2100      	movs	r1, #0
 800d792:	4628      	mov	r0, r5
 800d794:	f7f4 fb6c 	bl	8001e70 <memchr>
 800d798:	b108      	cbz	r0, 800d79e <_printf_i+0x1f2>
 800d79a:	1b40      	subs	r0, r0, r5
 800d79c:	6060      	str	r0, [r4, #4]
 800d79e:	6863      	ldr	r3, [r4, #4]
 800d7a0:	6123      	str	r3, [r4, #16]
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7a8:	e7a8      	b.n	800d6fc <_printf_i+0x150>
 800d7aa:	6923      	ldr	r3, [r4, #16]
 800d7ac:	462a      	mov	r2, r5
 800d7ae:	4649      	mov	r1, r9
 800d7b0:	4640      	mov	r0, r8
 800d7b2:	47d0      	blx	sl
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	d0ab      	beq.n	800d710 <_printf_i+0x164>
 800d7b8:	6823      	ldr	r3, [r4, #0]
 800d7ba:	079b      	lsls	r3, r3, #30
 800d7bc:	d413      	bmi.n	800d7e6 <_printf_i+0x23a>
 800d7be:	68e0      	ldr	r0, [r4, #12]
 800d7c0:	9b03      	ldr	r3, [sp, #12]
 800d7c2:	4298      	cmp	r0, r3
 800d7c4:	bfb8      	it	lt
 800d7c6:	4618      	movlt	r0, r3
 800d7c8:	e7a4      	b.n	800d714 <_printf_i+0x168>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	4632      	mov	r2, r6
 800d7ce:	4649      	mov	r1, r9
 800d7d0:	4640      	mov	r0, r8
 800d7d2:	47d0      	blx	sl
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	d09b      	beq.n	800d710 <_printf_i+0x164>
 800d7d8:	3501      	adds	r5, #1
 800d7da:	68e3      	ldr	r3, [r4, #12]
 800d7dc:	9903      	ldr	r1, [sp, #12]
 800d7de:	1a5b      	subs	r3, r3, r1
 800d7e0:	42ab      	cmp	r3, r5
 800d7e2:	dcf2      	bgt.n	800d7ca <_printf_i+0x21e>
 800d7e4:	e7eb      	b.n	800d7be <_printf_i+0x212>
 800d7e6:	2500      	movs	r5, #0
 800d7e8:	f104 0619 	add.w	r6, r4, #25
 800d7ec:	e7f5      	b.n	800d7da <_printf_i+0x22e>
 800d7ee:	bf00      	nop
 800d7f0:	0800f374 	.word	0x0800f374
 800d7f4:	0800f385 	.word	0x0800f385

0800d7f8 <_scanf_chars>:
 800d7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7fc:	4615      	mov	r5, r2
 800d7fe:	688a      	ldr	r2, [r1, #8]
 800d800:	4680      	mov	r8, r0
 800d802:	460c      	mov	r4, r1
 800d804:	b932      	cbnz	r2, 800d814 <_scanf_chars+0x1c>
 800d806:	698a      	ldr	r2, [r1, #24]
 800d808:	2a00      	cmp	r2, #0
 800d80a:	bf0c      	ite	eq
 800d80c:	2201      	moveq	r2, #1
 800d80e:	f04f 32ff 	movne.w	r2, #4294967295
 800d812:	608a      	str	r2, [r1, #8]
 800d814:	6822      	ldr	r2, [r4, #0]
 800d816:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d8a8 <_scanf_chars+0xb0>
 800d81a:	06d1      	lsls	r1, r2, #27
 800d81c:	bf5f      	itttt	pl
 800d81e:	681a      	ldrpl	r2, [r3, #0]
 800d820:	1d11      	addpl	r1, r2, #4
 800d822:	6019      	strpl	r1, [r3, #0]
 800d824:	6816      	ldrpl	r6, [r2, #0]
 800d826:	2700      	movs	r7, #0
 800d828:	69a0      	ldr	r0, [r4, #24]
 800d82a:	b188      	cbz	r0, 800d850 <_scanf_chars+0x58>
 800d82c:	2801      	cmp	r0, #1
 800d82e:	d107      	bne.n	800d840 <_scanf_chars+0x48>
 800d830:	682a      	ldr	r2, [r5, #0]
 800d832:	7811      	ldrb	r1, [r2, #0]
 800d834:	6962      	ldr	r2, [r4, #20]
 800d836:	5c52      	ldrb	r2, [r2, r1]
 800d838:	b952      	cbnz	r2, 800d850 <_scanf_chars+0x58>
 800d83a:	2f00      	cmp	r7, #0
 800d83c:	d031      	beq.n	800d8a2 <_scanf_chars+0xaa>
 800d83e:	e022      	b.n	800d886 <_scanf_chars+0x8e>
 800d840:	2802      	cmp	r0, #2
 800d842:	d120      	bne.n	800d886 <_scanf_chars+0x8e>
 800d844:	682b      	ldr	r3, [r5, #0]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d84c:	071b      	lsls	r3, r3, #28
 800d84e:	d41a      	bmi.n	800d886 <_scanf_chars+0x8e>
 800d850:	6823      	ldr	r3, [r4, #0]
 800d852:	06da      	lsls	r2, r3, #27
 800d854:	bf5e      	ittt	pl
 800d856:	682b      	ldrpl	r3, [r5, #0]
 800d858:	781b      	ldrbpl	r3, [r3, #0]
 800d85a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d85e:	682a      	ldr	r2, [r5, #0]
 800d860:	686b      	ldr	r3, [r5, #4]
 800d862:	3201      	adds	r2, #1
 800d864:	602a      	str	r2, [r5, #0]
 800d866:	68a2      	ldr	r2, [r4, #8]
 800d868:	3b01      	subs	r3, #1
 800d86a:	3a01      	subs	r2, #1
 800d86c:	606b      	str	r3, [r5, #4]
 800d86e:	3701      	adds	r7, #1
 800d870:	60a2      	str	r2, [r4, #8]
 800d872:	b142      	cbz	r2, 800d886 <_scanf_chars+0x8e>
 800d874:	2b00      	cmp	r3, #0
 800d876:	dcd7      	bgt.n	800d828 <_scanf_chars+0x30>
 800d878:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d87c:	4629      	mov	r1, r5
 800d87e:	4640      	mov	r0, r8
 800d880:	4798      	blx	r3
 800d882:	2800      	cmp	r0, #0
 800d884:	d0d0      	beq.n	800d828 <_scanf_chars+0x30>
 800d886:	6823      	ldr	r3, [r4, #0]
 800d888:	f013 0310 	ands.w	r3, r3, #16
 800d88c:	d105      	bne.n	800d89a <_scanf_chars+0xa2>
 800d88e:	68e2      	ldr	r2, [r4, #12]
 800d890:	3201      	adds	r2, #1
 800d892:	60e2      	str	r2, [r4, #12]
 800d894:	69a2      	ldr	r2, [r4, #24]
 800d896:	b102      	cbz	r2, 800d89a <_scanf_chars+0xa2>
 800d898:	7033      	strb	r3, [r6, #0]
 800d89a:	6923      	ldr	r3, [r4, #16]
 800d89c:	443b      	add	r3, r7
 800d89e:	6123      	str	r3, [r4, #16]
 800d8a0:	2000      	movs	r0, #0
 800d8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8a6:	bf00      	nop
 800d8a8:	0800f263 	.word	0x0800f263

0800d8ac <_scanf_i>:
 800d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	4698      	mov	r8, r3
 800d8b2:	4b76      	ldr	r3, [pc, #472]	; (800da8c <_scanf_i+0x1e0>)
 800d8b4:	460c      	mov	r4, r1
 800d8b6:	4682      	mov	sl, r0
 800d8b8:	4616      	mov	r6, r2
 800d8ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d8be:	b087      	sub	sp, #28
 800d8c0:	ab03      	add	r3, sp, #12
 800d8c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d8c6:	4b72      	ldr	r3, [pc, #456]	; (800da90 <_scanf_i+0x1e4>)
 800d8c8:	69a1      	ldr	r1, [r4, #24]
 800d8ca:	4a72      	ldr	r2, [pc, #456]	; (800da94 <_scanf_i+0x1e8>)
 800d8cc:	2903      	cmp	r1, #3
 800d8ce:	bf18      	it	ne
 800d8d0:	461a      	movne	r2, r3
 800d8d2:	68a3      	ldr	r3, [r4, #8]
 800d8d4:	9201      	str	r2, [sp, #4]
 800d8d6:	1e5a      	subs	r2, r3, #1
 800d8d8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d8dc:	bf88      	it	hi
 800d8de:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d8e2:	4627      	mov	r7, r4
 800d8e4:	bf82      	ittt	hi
 800d8e6:	eb03 0905 	addhi.w	r9, r3, r5
 800d8ea:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d8ee:	60a3      	strhi	r3, [r4, #8]
 800d8f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d8f4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d8f8:	bf98      	it	ls
 800d8fa:	f04f 0900 	movls.w	r9, #0
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	463d      	mov	r5, r7
 800d902:	f04f 0b00 	mov.w	fp, #0
 800d906:	6831      	ldr	r1, [r6, #0]
 800d908:	ab03      	add	r3, sp, #12
 800d90a:	7809      	ldrb	r1, [r1, #0]
 800d90c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d910:	2202      	movs	r2, #2
 800d912:	f7f4 faad 	bl	8001e70 <memchr>
 800d916:	b328      	cbz	r0, 800d964 <_scanf_i+0xb8>
 800d918:	f1bb 0f01 	cmp.w	fp, #1
 800d91c:	d159      	bne.n	800d9d2 <_scanf_i+0x126>
 800d91e:	6862      	ldr	r2, [r4, #4]
 800d920:	b92a      	cbnz	r2, 800d92e <_scanf_i+0x82>
 800d922:	6822      	ldr	r2, [r4, #0]
 800d924:	2308      	movs	r3, #8
 800d926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d92a:	6063      	str	r3, [r4, #4]
 800d92c:	6022      	str	r2, [r4, #0]
 800d92e:	6822      	ldr	r2, [r4, #0]
 800d930:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d934:	6022      	str	r2, [r4, #0]
 800d936:	68a2      	ldr	r2, [r4, #8]
 800d938:	1e51      	subs	r1, r2, #1
 800d93a:	60a1      	str	r1, [r4, #8]
 800d93c:	b192      	cbz	r2, 800d964 <_scanf_i+0xb8>
 800d93e:	6832      	ldr	r2, [r6, #0]
 800d940:	1c51      	adds	r1, r2, #1
 800d942:	6031      	str	r1, [r6, #0]
 800d944:	7812      	ldrb	r2, [r2, #0]
 800d946:	f805 2b01 	strb.w	r2, [r5], #1
 800d94a:	6872      	ldr	r2, [r6, #4]
 800d94c:	3a01      	subs	r2, #1
 800d94e:	2a00      	cmp	r2, #0
 800d950:	6072      	str	r2, [r6, #4]
 800d952:	dc07      	bgt.n	800d964 <_scanf_i+0xb8>
 800d954:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d958:	4631      	mov	r1, r6
 800d95a:	4650      	mov	r0, sl
 800d95c:	4790      	blx	r2
 800d95e:	2800      	cmp	r0, #0
 800d960:	f040 8085 	bne.w	800da6e <_scanf_i+0x1c2>
 800d964:	f10b 0b01 	add.w	fp, fp, #1
 800d968:	f1bb 0f03 	cmp.w	fp, #3
 800d96c:	d1cb      	bne.n	800d906 <_scanf_i+0x5a>
 800d96e:	6863      	ldr	r3, [r4, #4]
 800d970:	b90b      	cbnz	r3, 800d976 <_scanf_i+0xca>
 800d972:	230a      	movs	r3, #10
 800d974:	6063      	str	r3, [r4, #4]
 800d976:	6863      	ldr	r3, [r4, #4]
 800d978:	4947      	ldr	r1, [pc, #284]	; (800da98 <_scanf_i+0x1ec>)
 800d97a:	6960      	ldr	r0, [r4, #20]
 800d97c:	1ac9      	subs	r1, r1, r3
 800d97e:	f000 f89f 	bl	800dac0 <__sccl>
 800d982:	f04f 0b00 	mov.w	fp, #0
 800d986:	68a3      	ldr	r3, [r4, #8]
 800d988:	6822      	ldr	r2, [r4, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d03d      	beq.n	800da0a <_scanf_i+0x15e>
 800d98e:	6831      	ldr	r1, [r6, #0]
 800d990:	6960      	ldr	r0, [r4, #20]
 800d992:	f891 c000 	ldrb.w	ip, [r1]
 800d996:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d035      	beq.n	800da0a <_scanf_i+0x15e>
 800d99e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d9a2:	d124      	bne.n	800d9ee <_scanf_i+0x142>
 800d9a4:	0510      	lsls	r0, r2, #20
 800d9a6:	d522      	bpl.n	800d9ee <_scanf_i+0x142>
 800d9a8:	f10b 0b01 	add.w	fp, fp, #1
 800d9ac:	f1b9 0f00 	cmp.w	r9, #0
 800d9b0:	d003      	beq.n	800d9ba <_scanf_i+0x10e>
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	f109 39ff 	add.w	r9, r9, #4294967295
 800d9b8:	60a3      	str	r3, [r4, #8]
 800d9ba:	6873      	ldr	r3, [r6, #4]
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	6073      	str	r3, [r6, #4]
 800d9c2:	dd1b      	ble.n	800d9fc <_scanf_i+0x150>
 800d9c4:	6833      	ldr	r3, [r6, #0]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	6033      	str	r3, [r6, #0]
 800d9ca:	68a3      	ldr	r3, [r4, #8]
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	60a3      	str	r3, [r4, #8]
 800d9d0:	e7d9      	b.n	800d986 <_scanf_i+0xda>
 800d9d2:	f1bb 0f02 	cmp.w	fp, #2
 800d9d6:	d1ae      	bne.n	800d936 <_scanf_i+0x8a>
 800d9d8:	6822      	ldr	r2, [r4, #0]
 800d9da:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d9de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d9e2:	d1bf      	bne.n	800d964 <_scanf_i+0xb8>
 800d9e4:	2310      	movs	r3, #16
 800d9e6:	6063      	str	r3, [r4, #4]
 800d9e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d9ec:	e7a2      	b.n	800d934 <_scanf_i+0x88>
 800d9ee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d9f2:	6022      	str	r2, [r4, #0]
 800d9f4:	780b      	ldrb	r3, [r1, #0]
 800d9f6:	f805 3b01 	strb.w	r3, [r5], #1
 800d9fa:	e7de      	b.n	800d9ba <_scanf_i+0x10e>
 800d9fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800da00:	4631      	mov	r1, r6
 800da02:	4650      	mov	r0, sl
 800da04:	4798      	blx	r3
 800da06:	2800      	cmp	r0, #0
 800da08:	d0df      	beq.n	800d9ca <_scanf_i+0x11e>
 800da0a:	6823      	ldr	r3, [r4, #0]
 800da0c:	05db      	lsls	r3, r3, #23
 800da0e:	d50d      	bpl.n	800da2c <_scanf_i+0x180>
 800da10:	42bd      	cmp	r5, r7
 800da12:	d909      	bls.n	800da28 <_scanf_i+0x17c>
 800da14:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800da18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da1c:	4632      	mov	r2, r6
 800da1e:	4650      	mov	r0, sl
 800da20:	4798      	blx	r3
 800da22:	f105 39ff 	add.w	r9, r5, #4294967295
 800da26:	464d      	mov	r5, r9
 800da28:	42bd      	cmp	r5, r7
 800da2a:	d02d      	beq.n	800da88 <_scanf_i+0x1dc>
 800da2c:	6822      	ldr	r2, [r4, #0]
 800da2e:	f012 0210 	ands.w	r2, r2, #16
 800da32:	d113      	bne.n	800da5c <_scanf_i+0x1b0>
 800da34:	702a      	strb	r2, [r5, #0]
 800da36:	6863      	ldr	r3, [r4, #4]
 800da38:	9e01      	ldr	r6, [sp, #4]
 800da3a:	4639      	mov	r1, r7
 800da3c:	4650      	mov	r0, sl
 800da3e:	47b0      	blx	r6
 800da40:	6821      	ldr	r1, [r4, #0]
 800da42:	f8d8 3000 	ldr.w	r3, [r8]
 800da46:	f011 0f20 	tst.w	r1, #32
 800da4a:	d013      	beq.n	800da74 <_scanf_i+0x1c8>
 800da4c:	1d1a      	adds	r2, r3, #4
 800da4e:	f8c8 2000 	str.w	r2, [r8]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	6018      	str	r0, [r3, #0]
 800da56:	68e3      	ldr	r3, [r4, #12]
 800da58:	3301      	adds	r3, #1
 800da5a:	60e3      	str	r3, [r4, #12]
 800da5c:	1bed      	subs	r5, r5, r7
 800da5e:	44ab      	add	fp, r5
 800da60:	6925      	ldr	r5, [r4, #16]
 800da62:	445d      	add	r5, fp
 800da64:	6125      	str	r5, [r4, #16]
 800da66:	2000      	movs	r0, #0
 800da68:	b007      	add	sp, #28
 800da6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6e:	f04f 0b00 	mov.w	fp, #0
 800da72:	e7ca      	b.n	800da0a <_scanf_i+0x15e>
 800da74:	1d1a      	adds	r2, r3, #4
 800da76:	f8c8 2000 	str.w	r2, [r8]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f011 0f01 	tst.w	r1, #1
 800da80:	bf14      	ite	ne
 800da82:	8018      	strhne	r0, [r3, #0]
 800da84:	6018      	streq	r0, [r3, #0]
 800da86:	e7e6      	b.n	800da56 <_scanf_i+0x1aa>
 800da88:	2001      	movs	r0, #1
 800da8a:	e7ed      	b.n	800da68 <_scanf_i+0x1bc>
 800da8c:	0800e2d4 	.word	0x0800e2d4
 800da90:	0800dd1d 	.word	0x0800dd1d
 800da94:	0800dc35 	.word	0x0800dc35
 800da98:	0800f3af 	.word	0x0800f3af

0800da9c <_read_r>:
 800da9c:	b538      	push	{r3, r4, r5, lr}
 800da9e:	4d07      	ldr	r5, [pc, #28]	; (800dabc <_read_r+0x20>)
 800daa0:	4604      	mov	r4, r0
 800daa2:	4608      	mov	r0, r1
 800daa4:	4611      	mov	r1, r2
 800daa6:	2200      	movs	r2, #0
 800daa8:	602a      	str	r2, [r5, #0]
 800daaa:	461a      	mov	r2, r3
 800daac:	f7f6 f9ee 	bl	8003e8c <_read>
 800dab0:	1c43      	adds	r3, r0, #1
 800dab2:	d102      	bne.n	800daba <_read_r+0x1e>
 800dab4:	682b      	ldr	r3, [r5, #0]
 800dab6:	b103      	cbz	r3, 800daba <_read_r+0x1e>
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	bd38      	pop	{r3, r4, r5, pc}
 800dabc:	20005580 	.word	0x20005580

0800dac0 <__sccl>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	780b      	ldrb	r3, [r1, #0]
 800dac4:	4604      	mov	r4, r0
 800dac6:	2b5e      	cmp	r3, #94	; 0x5e
 800dac8:	bf0b      	itete	eq
 800daca:	784b      	ldrbeq	r3, [r1, #1]
 800dacc:	1c48      	addne	r0, r1, #1
 800dace:	1c88      	addeq	r0, r1, #2
 800dad0:	2200      	movne	r2, #0
 800dad2:	bf08      	it	eq
 800dad4:	2201      	moveq	r2, #1
 800dad6:	1e61      	subs	r1, r4, #1
 800dad8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800dadc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800dae0:	42a9      	cmp	r1, r5
 800dae2:	d1fb      	bne.n	800dadc <__sccl+0x1c>
 800dae4:	b90b      	cbnz	r3, 800daea <__sccl+0x2a>
 800dae6:	3801      	subs	r0, #1
 800dae8:	bd70      	pop	{r4, r5, r6, pc}
 800daea:	f082 0201 	eor.w	r2, r2, #1
 800daee:	54e2      	strb	r2, [r4, r3]
 800daf0:	4605      	mov	r5, r0
 800daf2:	4628      	mov	r0, r5
 800daf4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800daf8:	292d      	cmp	r1, #45	; 0x2d
 800dafa:	d006      	beq.n	800db0a <__sccl+0x4a>
 800dafc:	295d      	cmp	r1, #93	; 0x5d
 800dafe:	d0f3      	beq.n	800dae8 <__sccl+0x28>
 800db00:	b909      	cbnz	r1, 800db06 <__sccl+0x46>
 800db02:	4628      	mov	r0, r5
 800db04:	e7f0      	b.n	800dae8 <__sccl+0x28>
 800db06:	460b      	mov	r3, r1
 800db08:	e7f1      	b.n	800daee <__sccl+0x2e>
 800db0a:	786e      	ldrb	r6, [r5, #1]
 800db0c:	2e5d      	cmp	r6, #93	; 0x5d
 800db0e:	d0fa      	beq.n	800db06 <__sccl+0x46>
 800db10:	42b3      	cmp	r3, r6
 800db12:	dcf8      	bgt.n	800db06 <__sccl+0x46>
 800db14:	3502      	adds	r5, #2
 800db16:	4619      	mov	r1, r3
 800db18:	3101      	adds	r1, #1
 800db1a:	428e      	cmp	r6, r1
 800db1c:	5462      	strb	r2, [r4, r1]
 800db1e:	dcfb      	bgt.n	800db18 <__sccl+0x58>
 800db20:	1af1      	subs	r1, r6, r3
 800db22:	3901      	subs	r1, #1
 800db24:	1c58      	adds	r0, r3, #1
 800db26:	42b3      	cmp	r3, r6
 800db28:	bfa8      	it	ge
 800db2a:	2100      	movge	r1, #0
 800db2c:	1843      	adds	r3, r0, r1
 800db2e:	e7e0      	b.n	800daf2 <__sccl+0x32>

0800db30 <_strtol_l.constprop.0>:
 800db30:	2b01      	cmp	r3, #1
 800db32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db36:	d001      	beq.n	800db3c <_strtol_l.constprop.0+0xc>
 800db38:	2b24      	cmp	r3, #36	; 0x24
 800db3a:	d906      	bls.n	800db4a <_strtol_l.constprop.0+0x1a>
 800db3c:	f7fe f8d2 	bl	800bce4 <__errno>
 800db40:	2316      	movs	r3, #22
 800db42:	6003      	str	r3, [r0, #0]
 800db44:	2000      	movs	r0, #0
 800db46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dc30 <_strtol_l.constprop.0+0x100>
 800db4e:	460d      	mov	r5, r1
 800db50:	462e      	mov	r6, r5
 800db52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db56:	f814 700c 	ldrb.w	r7, [r4, ip]
 800db5a:	f017 0708 	ands.w	r7, r7, #8
 800db5e:	d1f7      	bne.n	800db50 <_strtol_l.constprop.0+0x20>
 800db60:	2c2d      	cmp	r4, #45	; 0x2d
 800db62:	d132      	bne.n	800dbca <_strtol_l.constprop.0+0x9a>
 800db64:	782c      	ldrb	r4, [r5, #0]
 800db66:	2701      	movs	r7, #1
 800db68:	1cb5      	adds	r5, r6, #2
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d05b      	beq.n	800dc26 <_strtol_l.constprop.0+0xf6>
 800db6e:	2b10      	cmp	r3, #16
 800db70:	d109      	bne.n	800db86 <_strtol_l.constprop.0+0x56>
 800db72:	2c30      	cmp	r4, #48	; 0x30
 800db74:	d107      	bne.n	800db86 <_strtol_l.constprop.0+0x56>
 800db76:	782c      	ldrb	r4, [r5, #0]
 800db78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800db7c:	2c58      	cmp	r4, #88	; 0x58
 800db7e:	d14d      	bne.n	800dc1c <_strtol_l.constprop.0+0xec>
 800db80:	786c      	ldrb	r4, [r5, #1]
 800db82:	2310      	movs	r3, #16
 800db84:	3502      	adds	r5, #2
 800db86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800db8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800db8e:	f04f 0c00 	mov.w	ip, #0
 800db92:	fbb8 f9f3 	udiv	r9, r8, r3
 800db96:	4666      	mov	r6, ip
 800db98:	fb03 8a19 	mls	sl, r3, r9, r8
 800db9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dba0:	f1be 0f09 	cmp.w	lr, #9
 800dba4:	d816      	bhi.n	800dbd4 <_strtol_l.constprop.0+0xa4>
 800dba6:	4674      	mov	r4, lr
 800dba8:	42a3      	cmp	r3, r4
 800dbaa:	dd24      	ble.n	800dbf6 <_strtol_l.constprop.0+0xc6>
 800dbac:	f1bc 0f00 	cmp.w	ip, #0
 800dbb0:	db1e      	blt.n	800dbf0 <_strtol_l.constprop.0+0xc0>
 800dbb2:	45b1      	cmp	r9, r6
 800dbb4:	d31c      	bcc.n	800dbf0 <_strtol_l.constprop.0+0xc0>
 800dbb6:	d101      	bne.n	800dbbc <_strtol_l.constprop.0+0x8c>
 800dbb8:	45a2      	cmp	sl, r4
 800dbba:	db19      	blt.n	800dbf0 <_strtol_l.constprop.0+0xc0>
 800dbbc:	fb06 4603 	mla	r6, r6, r3, r4
 800dbc0:	f04f 0c01 	mov.w	ip, #1
 800dbc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbc8:	e7e8      	b.n	800db9c <_strtol_l.constprop.0+0x6c>
 800dbca:	2c2b      	cmp	r4, #43	; 0x2b
 800dbcc:	bf04      	itt	eq
 800dbce:	782c      	ldrbeq	r4, [r5, #0]
 800dbd0:	1cb5      	addeq	r5, r6, #2
 800dbd2:	e7ca      	b.n	800db6a <_strtol_l.constprop.0+0x3a>
 800dbd4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dbd8:	f1be 0f19 	cmp.w	lr, #25
 800dbdc:	d801      	bhi.n	800dbe2 <_strtol_l.constprop.0+0xb2>
 800dbde:	3c37      	subs	r4, #55	; 0x37
 800dbe0:	e7e2      	b.n	800dba8 <_strtol_l.constprop.0+0x78>
 800dbe2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dbe6:	f1be 0f19 	cmp.w	lr, #25
 800dbea:	d804      	bhi.n	800dbf6 <_strtol_l.constprop.0+0xc6>
 800dbec:	3c57      	subs	r4, #87	; 0x57
 800dbee:	e7db      	b.n	800dba8 <_strtol_l.constprop.0+0x78>
 800dbf0:	f04f 3cff 	mov.w	ip, #4294967295
 800dbf4:	e7e6      	b.n	800dbc4 <_strtol_l.constprop.0+0x94>
 800dbf6:	f1bc 0f00 	cmp.w	ip, #0
 800dbfa:	da05      	bge.n	800dc08 <_strtol_l.constprop.0+0xd8>
 800dbfc:	2322      	movs	r3, #34	; 0x22
 800dbfe:	6003      	str	r3, [r0, #0]
 800dc00:	4646      	mov	r6, r8
 800dc02:	b942      	cbnz	r2, 800dc16 <_strtol_l.constprop.0+0xe6>
 800dc04:	4630      	mov	r0, r6
 800dc06:	e79e      	b.n	800db46 <_strtol_l.constprop.0+0x16>
 800dc08:	b107      	cbz	r7, 800dc0c <_strtol_l.constprop.0+0xdc>
 800dc0a:	4276      	negs	r6, r6
 800dc0c:	2a00      	cmp	r2, #0
 800dc0e:	d0f9      	beq.n	800dc04 <_strtol_l.constprop.0+0xd4>
 800dc10:	f1bc 0f00 	cmp.w	ip, #0
 800dc14:	d000      	beq.n	800dc18 <_strtol_l.constprop.0+0xe8>
 800dc16:	1e69      	subs	r1, r5, #1
 800dc18:	6011      	str	r1, [r2, #0]
 800dc1a:	e7f3      	b.n	800dc04 <_strtol_l.constprop.0+0xd4>
 800dc1c:	2430      	movs	r4, #48	; 0x30
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1b1      	bne.n	800db86 <_strtol_l.constprop.0+0x56>
 800dc22:	2308      	movs	r3, #8
 800dc24:	e7af      	b.n	800db86 <_strtol_l.constprop.0+0x56>
 800dc26:	2c30      	cmp	r4, #48	; 0x30
 800dc28:	d0a5      	beq.n	800db76 <_strtol_l.constprop.0+0x46>
 800dc2a:	230a      	movs	r3, #10
 800dc2c:	e7ab      	b.n	800db86 <_strtol_l.constprop.0+0x56>
 800dc2e:	bf00      	nop
 800dc30:	0800f263 	.word	0x0800f263

0800dc34 <_strtol_r>:
 800dc34:	f7ff bf7c 	b.w	800db30 <_strtol_l.constprop.0>

0800dc38 <_strtoul_l.constprop.0>:
 800dc38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc3c:	4f36      	ldr	r7, [pc, #216]	; (800dd18 <_strtoul_l.constprop.0+0xe0>)
 800dc3e:	4686      	mov	lr, r0
 800dc40:	460d      	mov	r5, r1
 800dc42:	4628      	mov	r0, r5
 800dc44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc48:	5de6      	ldrb	r6, [r4, r7]
 800dc4a:	f016 0608 	ands.w	r6, r6, #8
 800dc4e:	d1f8      	bne.n	800dc42 <_strtoul_l.constprop.0+0xa>
 800dc50:	2c2d      	cmp	r4, #45	; 0x2d
 800dc52:	d12f      	bne.n	800dcb4 <_strtoul_l.constprop.0+0x7c>
 800dc54:	782c      	ldrb	r4, [r5, #0]
 800dc56:	2601      	movs	r6, #1
 800dc58:	1c85      	adds	r5, r0, #2
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d057      	beq.n	800dd0e <_strtoul_l.constprop.0+0xd6>
 800dc5e:	2b10      	cmp	r3, #16
 800dc60:	d109      	bne.n	800dc76 <_strtoul_l.constprop.0+0x3e>
 800dc62:	2c30      	cmp	r4, #48	; 0x30
 800dc64:	d107      	bne.n	800dc76 <_strtoul_l.constprop.0+0x3e>
 800dc66:	7828      	ldrb	r0, [r5, #0]
 800dc68:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dc6c:	2858      	cmp	r0, #88	; 0x58
 800dc6e:	d149      	bne.n	800dd04 <_strtoul_l.constprop.0+0xcc>
 800dc70:	786c      	ldrb	r4, [r5, #1]
 800dc72:	2310      	movs	r3, #16
 800dc74:	3502      	adds	r5, #2
 800dc76:	f04f 38ff 	mov.w	r8, #4294967295
 800dc7a:	2700      	movs	r7, #0
 800dc7c:	fbb8 f8f3 	udiv	r8, r8, r3
 800dc80:	fb03 f908 	mul.w	r9, r3, r8
 800dc84:	ea6f 0909 	mvn.w	r9, r9
 800dc88:	4638      	mov	r0, r7
 800dc8a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dc8e:	f1bc 0f09 	cmp.w	ip, #9
 800dc92:	d814      	bhi.n	800dcbe <_strtoul_l.constprop.0+0x86>
 800dc94:	4664      	mov	r4, ip
 800dc96:	42a3      	cmp	r3, r4
 800dc98:	dd22      	ble.n	800dce0 <_strtoul_l.constprop.0+0xa8>
 800dc9a:	2f00      	cmp	r7, #0
 800dc9c:	db1d      	blt.n	800dcda <_strtoul_l.constprop.0+0xa2>
 800dc9e:	4580      	cmp	r8, r0
 800dca0:	d31b      	bcc.n	800dcda <_strtoul_l.constprop.0+0xa2>
 800dca2:	d101      	bne.n	800dca8 <_strtoul_l.constprop.0+0x70>
 800dca4:	45a1      	cmp	r9, r4
 800dca6:	db18      	blt.n	800dcda <_strtoul_l.constprop.0+0xa2>
 800dca8:	fb00 4003 	mla	r0, r0, r3, r4
 800dcac:	2701      	movs	r7, #1
 800dcae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcb2:	e7ea      	b.n	800dc8a <_strtoul_l.constprop.0+0x52>
 800dcb4:	2c2b      	cmp	r4, #43	; 0x2b
 800dcb6:	bf04      	itt	eq
 800dcb8:	782c      	ldrbeq	r4, [r5, #0]
 800dcba:	1c85      	addeq	r5, r0, #2
 800dcbc:	e7cd      	b.n	800dc5a <_strtoul_l.constprop.0+0x22>
 800dcbe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dcc2:	f1bc 0f19 	cmp.w	ip, #25
 800dcc6:	d801      	bhi.n	800dccc <_strtoul_l.constprop.0+0x94>
 800dcc8:	3c37      	subs	r4, #55	; 0x37
 800dcca:	e7e4      	b.n	800dc96 <_strtoul_l.constprop.0+0x5e>
 800dccc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dcd0:	f1bc 0f19 	cmp.w	ip, #25
 800dcd4:	d804      	bhi.n	800dce0 <_strtoul_l.constprop.0+0xa8>
 800dcd6:	3c57      	subs	r4, #87	; 0x57
 800dcd8:	e7dd      	b.n	800dc96 <_strtoul_l.constprop.0+0x5e>
 800dcda:	f04f 37ff 	mov.w	r7, #4294967295
 800dcde:	e7e6      	b.n	800dcae <_strtoul_l.constprop.0+0x76>
 800dce0:	2f00      	cmp	r7, #0
 800dce2:	da07      	bge.n	800dcf4 <_strtoul_l.constprop.0+0xbc>
 800dce4:	2322      	movs	r3, #34	; 0x22
 800dce6:	f8ce 3000 	str.w	r3, [lr]
 800dcea:	f04f 30ff 	mov.w	r0, #4294967295
 800dcee:	b932      	cbnz	r2, 800dcfe <_strtoul_l.constprop.0+0xc6>
 800dcf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcf4:	b106      	cbz	r6, 800dcf8 <_strtoul_l.constprop.0+0xc0>
 800dcf6:	4240      	negs	r0, r0
 800dcf8:	2a00      	cmp	r2, #0
 800dcfa:	d0f9      	beq.n	800dcf0 <_strtoul_l.constprop.0+0xb8>
 800dcfc:	b107      	cbz	r7, 800dd00 <_strtoul_l.constprop.0+0xc8>
 800dcfe:	1e69      	subs	r1, r5, #1
 800dd00:	6011      	str	r1, [r2, #0]
 800dd02:	e7f5      	b.n	800dcf0 <_strtoul_l.constprop.0+0xb8>
 800dd04:	2430      	movs	r4, #48	; 0x30
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d1b5      	bne.n	800dc76 <_strtoul_l.constprop.0+0x3e>
 800dd0a:	2308      	movs	r3, #8
 800dd0c:	e7b3      	b.n	800dc76 <_strtoul_l.constprop.0+0x3e>
 800dd0e:	2c30      	cmp	r4, #48	; 0x30
 800dd10:	d0a9      	beq.n	800dc66 <_strtoul_l.constprop.0+0x2e>
 800dd12:	230a      	movs	r3, #10
 800dd14:	e7af      	b.n	800dc76 <_strtoul_l.constprop.0+0x3e>
 800dd16:	bf00      	nop
 800dd18:	0800f263 	.word	0x0800f263

0800dd1c <_strtoul_r>:
 800dd1c:	f7ff bf8c 	b.w	800dc38 <_strtoul_l.constprop.0>

0800dd20 <__submore>:
 800dd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd24:	460c      	mov	r4, r1
 800dd26:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dd28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd2c:	4299      	cmp	r1, r3
 800dd2e:	d11d      	bne.n	800dd6c <__submore+0x4c>
 800dd30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dd34:	f7fe f930 	bl	800bf98 <_malloc_r>
 800dd38:	b918      	cbnz	r0, 800dd42 <__submore+0x22>
 800dd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd46:	63a3      	str	r3, [r4, #56]	; 0x38
 800dd48:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dd4c:	6360      	str	r0, [r4, #52]	; 0x34
 800dd4e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dd52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dd56:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800dd5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dd5e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dd62:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dd66:	6020      	str	r0, [r4, #0]
 800dd68:	2000      	movs	r0, #0
 800dd6a:	e7e8      	b.n	800dd3e <__submore+0x1e>
 800dd6c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dd6e:	0077      	lsls	r7, r6, #1
 800dd70:	463a      	mov	r2, r7
 800dd72:	f000 f853 	bl	800de1c <_realloc_r>
 800dd76:	4605      	mov	r5, r0
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d0de      	beq.n	800dd3a <__submore+0x1a>
 800dd7c:	eb00 0806 	add.w	r8, r0, r6
 800dd80:	4601      	mov	r1, r0
 800dd82:	4632      	mov	r2, r6
 800dd84:	4640      	mov	r0, r8
 800dd86:	f7fe f8d0 	bl	800bf2a <memcpy>
 800dd8a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dd8e:	f8c4 8000 	str.w	r8, [r4]
 800dd92:	e7e9      	b.n	800dd68 <__submore+0x48>

0800dd94 <abort>:
 800dd94:	b508      	push	{r3, lr}
 800dd96:	2006      	movs	r0, #6
 800dd98:	f000 f898 	bl	800decc <raise>
 800dd9c:	2001      	movs	r0, #1
 800dd9e:	f7f6 f86b 	bl	8003e78 <_exit>
	...

0800dda4 <_fstat_r>:
 800dda4:	b538      	push	{r3, r4, r5, lr}
 800dda6:	4d07      	ldr	r5, [pc, #28]	; (800ddc4 <_fstat_r+0x20>)
 800dda8:	2300      	movs	r3, #0
 800ddaa:	4604      	mov	r4, r0
 800ddac:	4608      	mov	r0, r1
 800ddae:	4611      	mov	r1, r2
 800ddb0:	602b      	str	r3, [r5, #0]
 800ddb2:	f7f6 f894 	bl	8003ede <_fstat>
 800ddb6:	1c43      	adds	r3, r0, #1
 800ddb8:	d102      	bne.n	800ddc0 <_fstat_r+0x1c>
 800ddba:	682b      	ldr	r3, [r5, #0]
 800ddbc:	b103      	cbz	r3, 800ddc0 <_fstat_r+0x1c>
 800ddbe:	6023      	str	r3, [r4, #0]
 800ddc0:	bd38      	pop	{r3, r4, r5, pc}
 800ddc2:	bf00      	nop
 800ddc4:	20005580 	.word	0x20005580

0800ddc8 <_isatty_r>:
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	4d06      	ldr	r5, [pc, #24]	; (800dde4 <_isatty_r+0x1c>)
 800ddcc:	2300      	movs	r3, #0
 800ddce:	4604      	mov	r4, r0
 800ddd0:	4608      	mov	r0, r1
 800ddd2:	602b      	str	r3, [r5, #0]
 800ddd4:	f7f6 f893 	bl	8003efe <_isatty>
 800ddd8:	1c43      	adds	r3, r0, #1
 800ddda:	d102      	bne.n	800dde2 <_isatty_r+0x1a>
 800dddc:	682b      	ldr	r3, [r5, #0]
 800ddde:	b103      	cbz	r3, 800dde2 <_isatty_r+0x1a>
 800dde0:	6023      	str	r3, [r4, #0]
 800dde2:	bd38      	pop	{r3, r4, r5, pc}
 800dde4:	20005580 	.word	0x20005580

0800dde8 <memmove>:
 800dde8:	4288      	cmp	r0, r1
 800ddea:	b510      	push	{r4, lr}
 800ddec:	eb01 0402 	add.w	r4, r1, r2
 800ddf0:	d902      	bls.n	800ddf8 <memmove+0x10>
 800ddf2:	4284      	cmp	r4, r0
 800ddf4:	4623      	mov	r3, r4
 800ddf6:	d807      	bhi.n	800de08 <memmove+0x20>
 800ddf8:	1e43      	subs	r3, r0, #1
 800ddfa:	42a1      	cmp	r1, r4
 800ddfc:	d008      	beq.n	800de10 <memmove+0x28>
 800ddfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de06:	e7f8      	b.n	800ddfa <memmove+0x12>
 800de08:	4402      	add	r2, r0
 800de0a:	4601      	mov	r1, r0
 800de0c:	428a      	cmp	r2, r1
 800de0e:	d100      	bne.n	800de12 <memmove+0x2a>
 800de10:	bd10      	pop	{r4, pc}
 800de12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de1a:	e7f7      	b.n	800de0c <memmove+0x24>

0800de1c <_realloc_r>:
 800de1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de20:	4680      	mov	r8, r0
 800de22:	4614      	mov	r4, r2
 800de24:	460e      	mov	r6, r1
 800de26:	b921      	cbnz	r1, 800de32 <_realloc_r+0x16>
 800de28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de2c:	4611      	mov	r1, r2
 800de2e:	f7fe b8b3 	b.w	800bf98 <_malloc_r>
 800de32:	b92a      	cbnz	r2, 800de40 <_realloc_r+0x24>
 800de34:	f7fe fe78 	bl	800cb28 <_free_r>
 800de38:	4625      	mov	r5, r4
 800de3a:	4628      	mov	r0, r5
 800de3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de40:	f000 f860 	bl	800df04 <_malloc_usable_size_r>
 800de44:	4284      	cmp	r4, r0
 800de46:	4607      	mov	r7, r0
 800de48:	d802      	bhi.n	800de50 <_realloc_r+0x34>
 800de4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de4e:	d812      	bhi.n	800de76 <_realloc_r+0x5a>
 800de50:	4621      	mov	r1, r4
 800de52:	4640      	mov	r0, r8
 800de54:	f7fe f8a0 	bl	800bf98 <_malloc_r>
 800de58:	4605      	mov	r5, r0
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d0ed      	beq.n	800de3a <_realloc_r+0x1e>
 800de5e:	42bc      	cmp	r4, r7
 800de60:	4622      	mov	r2, r4
 800de62:	4631      	mov	r1, r6
 800de64:	bf28      	it	cs
 800de66:	463a      	movcs	r2, r7
 800de68:	f7fe f85f 	bl	800bf2a <memcpy>
 800de6c:	4631      	mov	r1, r6
 800de6e:	4640      	mov	r0, r8
 800de70:	f7fe fe5a 	bl	800cb28 <_free_r>
 800de74:	e7e1      	b.n	800de3a <_realloc_r+0x1e>
 800de76:	4635      	mov	r5, r6
 800de78:	e7df      	b.n	800de3a <_realloc_r+0x1e>

0800de7a <_raise_r>:
 800de7a:	291f      	cmp	r1, #31
 800de7c:	b538      	push	{r3, r4, r5, lr}
 800de7e:	4604      	mov	r4, r0
 800de80:	460d      	mov	r5, r1
 800de82:	d904      	bls.n	800de8e <_raise_r+0x14>
 800de84:	2316      	movs	r3, #22
 800de86:	6003      	str	r3, [r0, #0]
 800de88:	f04f 30ff 	mov.w	r0, #4294967295
 800de8c:	bd38      	pop	{r3, r4, r5, pc}
 800de8e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de90:	b112      	cbz	r2, 800de98 <_raise_r+0x1e>
 800de92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de96:	b94b      	cbnz	r3, 800deac <_raise_r+0x32>
 800de98:	4620      	mov	r0, r4
 800de9a:	f000 f831 	bl	800df00 <_getpid_r>
 800de9e:	462a      	mov	r2, r5
 800dea0:	4601      	mov	r1, r0
 800dea2:	4620      	mov	r0, r4
 800dea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dea8:	f000 b818 	b.w	800dedc <_kill_r>
 800deac:	2b01      	cmp	r3, #1
 800deae:	d00a      	beq.n	800dec6 <_raise_r+0x4c>
 800deb0:	1c59      	adds	r1, r3, #1
 800deb2:	d103      	bne.n	800debc <_raise_r+0x42>
 800deb4:	2316      	movs	r3, #22
 800deb6:	6003      	str	r3, [r0, #0]
 800deb8:	2001      	movs	r0, #1
 800deba:	e7e7      	b.n	800de8c <_raise_r+0x12>
 800debc:	2400      	movs	r4, #0
 800debe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dec2:	4628      	mov	r0, r5
 800dec4:	4798      	blx	r3
 800dec6:	2000      	movs	r0, #0
 800dec8:	e7e0      	b.n	800de8c <_raise_r+0x12>
	...

0800decc <raise>:
 800decc:	4b02      	ldr	r3, [pc, #8]	; (800ded8 <raise+0xc>)
 800dece:	4601      	mov	r1, r0
 800ded0:	6818      	ldr	r0, [r3, #0]
 800ded2:	f7ff bfd2 	b.w	800de7a <_raise_r>
 800ded6:	bf00      	nop
 800ded8:	200000a4 	.word	0x200000a4

0800dedc <_kill_r>:
 800dedc:	b538      	push	{r3, r4, r5, lr}
 800dede:	4d07      	ldr	r5, [pc, #28]	; (800defc <_kill_r+0x20>)
 800dee0:	2300      	movs	r3, #0
 800dee2:	4604      	mov	r4, r0
 800dee4:	4608      	mov	r0, r1
 800dee6:	4611      	mov	r1, r2
 800dee8:	602b      	str	r3, [r5, #0]
 800deea:	f7f5 ffb5 	bl	8003e58 <_kill>
 800deee:	1c43      	adds	r3, r0, #1
 800def0:	d102      	bne.n	800def8 <_kill_r+0x1c>
 800def2:	682b      	ldr	r3, [r5, #0]
 800def4:	b103      	cbz	r3, 800def8 <_kill_r+0x1c>
 800def6:	6023      	str	r3, [r4, #0]
 800def8:	bd38      	pop	{r3, r4, r5, pc}
 800defa:	bf00      	nop
 800defc:	20005580 	.word	0x20005580

0800df00 <_getpid_r>:
 800df00:	f7f5 bfa2 	b.w	8003e48 <_getpid>

0800df04 <_malloc_usable_size_r>:
 800df04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df08:	1f18      	subs	r0, r3, #4
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	bfbc      	itt	lt
 800df0e:	580b      	ldrlt	r3, [r1, r0]
 800df10:	18c0      	addlt	r0, r0, r3
 800df12:	4770      	bx	lr

0800df14 <_init>:
 800df14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df16:	bf00      	nop
 800df18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df1a:	bc08      	pop	{r3}
 800df1c:	469e      	mov	lr, r3
 800df1e:	4770      	bx	lr

0800df20 <_fini>:
 800df20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df22:	bf00      	nop
 800df24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df26:	bc08      	pop	{r3}
 800df28:	469e      	mov	lr, r3
 800df2a:	4770      	bx	lr
